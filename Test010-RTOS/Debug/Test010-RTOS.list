
Test010-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005610  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005920  08005920  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004208  2000006c  08005994  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08005994  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001456e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c3  00000000  00000000  0003464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d96  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190f5  00000000  00000000  00039636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d3c  00000000  00000000  0005272b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a8e  00000000  00000000  00066467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005248  00000000  00000000  000feef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00104140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005798 	.word	0x08005798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005798 	.word	0x08005798

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000088 	.word	0x20000088
 80005ac:	20000128 	.word	0x20000128

080005b0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int bn = 0, mode = 0, t1 = 0; //mode : 1 button pressed,  0 release
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	mode = 1; t1 = 0;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_GPIO_EXTI_Callback+0x2c>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x30>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	bn++;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	2000037c 	.word	0x2000037c
 80005e0:	20000380 	.word	0x20000380
 80005e4:	20000378 	.word	0x20000378

080005e8 <LD2Test>:
void LD2Test()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ec:	2120      	movs	r1, #32
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <LD2Test+0x10>)
 80005f0:	f000 ffd3 	bl	800159a <HAL_GPIO_TogglePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020000 	.word	0x40020000

080005fc <step_wave>:

void step_wave(int step)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	int i;
	// step 1
	for(i = 0; i < (step+1); i++)
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e062      	b.n	80006d0 <step_wave+0xd4>
	{
			   //step 1
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2108      	movs	r1, #8
 800060e:	4835      	ldr	r0, [pc, #212]	; (80006e4 <step_wave+0xe8>)
 8000610:	f000 ffaa 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	4832      	ldr	r0, [pc, #200]	; (80006e4 <step_wave+0xe8>)
 800061a:	f000 ffa5 	bl	8001568 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2110      	movs	r1, #16
 8000622:	4830      	ldr	r0, [pc, #192]	; (80006e4 <step_wave+0xe8>)
 8000624:	f000 ffa0 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	482d      	ldr	r0, [pc, #180]	; (80006e4 <step_wave+0xe8>)
 8000630:	f000 ff9a 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f000 fcf5 	bl	8001024 <HAL_Delay>

		      	  // step 2
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	4829      	ldr	r0, [pc, #164]	; (80006e4 <step_wave+0xe8>)
 8000640:	f000 ff92 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	2120      	movs	r1, #32
 8000648:	4826      	ldr	r0, [pc, #152]	; (80006e4 <step_wave+0xe8>)
 800064a:	f000 ff8d 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2110      	movs	r1, #16
 8000652:	4824      	ldr	r0, [pc, #144]	; (80006e4 <step_wave+0xe8>)
 8000654:	f000 ff88 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	4821      	ldr	r0, [pc, #132]	; (80006e4 <step_wave+0xe8>)
 8000660:	f000 ff82 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fcdd 	bl	8001024 <HAL_Delay>


		    // step 3
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	481d      	ldr	r0, [pc, #116]	; (80006e4 <step_wave+0xe8>)
 8000670:	f000 ff7a 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <step_wave+0xe8>)
 800067a:	f000 ff75 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	2110      	movs	r1, #16
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <step_wave+0xe8>)
 8000684:	f000 ff70 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <step_wave+0xe8>)
 8000690:	f000 ff6a 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fcc5 	bl	8001024 <HAL_Delay>



		    	  // step 4
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <step_wave+0xe8>)
 80006a0:	f000 ff62 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <step_wave+0xe8>)
 80006aa:	f000 ff5d 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2110      	movs	r1, #16
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <step_wave+0xe8>)
 80006b4:	f000 ff58 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <step_wave+0xe8>)
 80006c0:	f000 ff52 	bl	8001568 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fcad 	bl	8001024 <HAL_Delay>
	for(i = 0; i < (step+1); i++)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da98      	bge.n	800060a <step_wave+0xe>
	}

	}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fc57 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f83f 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f8d1 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f8a5 	bl	8000848 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, myStartTask01, osPriorityNormal, 0, 128);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <main+0x78>)
 8000700:	f107 041c 	add.w	r4, r7, #28
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fb70 	bl	8002dfe <osThreadCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <main+0x7c>)
 8000722:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, myStartTask02, osPriorityIdle, 0, 128);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <main+0x80>)
 8000726:	463c      	mov	r4, r7
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000736:	463b      	mov	r3, r7
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fb5f 	bl	8002dfe <osThreadCreate>
 8000740:	4603      	mov	r3, r0
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <main+0x84>)
 8000744:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("RTOS test....");
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <main+0x88>)
 8000748:	f000 f9f4 	bl	8000b34 <ProgramStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800074c:	f002 fb50 	bl	8002df0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LD2Test();
 8000750:	f7ff ff4a 	bl	80005e8 <LD2Test>
	  osDelay(500);
 8000754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000758:	f002 fb9d 	bl	8002e96 <osDelay>
	  LD2Test();
 800075c:	e7f8      	b.n	8000750 <main+0x68>
 800075e:	bf00      	nop
 8000760:	080057cc 	.word	0x080057cc
 8000764:	20000370 	.word	0x20000370
 8000768:	080057f4 	.word	0x080057f4
 800076c:	20000374 	.word	0x20000374
 8000770:	080057b0 	.word	0x080057b0

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	; 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 f868 	bl	8004858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b28      	ldr	r3, [pc, #160]	; (8000840 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <SystemClock_Config+0xcc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b25      	ldr	r3, [pc, #148]	; (8000840 <SystemClock_Config+0xcc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd0>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e4:	2310      	movs	r3, #16
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 ff00 	bl	8001600 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000806:	f000 f947 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f962 	bl	8001af0 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000832:	f000 f931 	bl	8000a98 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f001 fdfc 	bl	800247c <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f905 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000328 	.word	0x20000328
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a3b      	ldr	r2, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a34      	ldr	r2, [pc, #208]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_GPIO_Init+0x10c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_GPIO_Init+0x10c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <MX_GPIO_Init+0x10c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_GPIO_Init+0x10c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_GPIO_Init+0x110>)
 8000928:	f000 fe1e 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000932:	481f      	ldr	r0, [pc, #124]	; (80009b0 <MX_GPIO_Init+0x114>)
 8000934:	f000 fe18 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4819      	ldr	r0, [pc, #100]	; (80009b4 <MX_GPIO_Init+0x118>)
 8000950:	f000 fc6e 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_GPIO_Init+0x110>)
 800096c:	f000 fc60 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000970:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x114>)
 800098a:	f000 fc51 	bl	8001230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2028      	movs	r0, #40	; 0x28
 8000994:	f000 fc22 	bl	80011dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000998:	2028      	movs	r0, #40	; 0x28
 800099a:	f000 fc3b 	bl	8001214 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020800 	.word	0x40020800

080009b8 <myStartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_myStartTask01 */
void myStartTask01(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int n1 = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  LD2Test();
 80009c4:	f7ff fe10 	bl	80005e8 <LD2Test>
	  Cursor(0,0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f8e2 	bl	8000b94 <Cursor>
	  printf("LD2 flashed %d times(Task_1)   ",n1++);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60fa      	str	r2, [r7, #12]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <myStartTask01+0x30>)
 80009da:	f003 fd29 	bl	8004430 <iprintf>
	  //HAL_Delay(500);
	  osDelay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f002 fa58 	bl	8002e96 <osDelay>
  {
 80009e6:	e7ed      	b.n	80009c4 <myStartTask01+0xc>
 80009e8:	08005810 	.word	0x08005810

080009ec <myStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask02 */
void myStartTask02(void const * argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask02 */
  /* Infinite loop */
	int n=0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		int d; //degree angle
	  	Cursor(0,10);
 80009f8:	210a      	movs	r1, #10
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f8ca 	bl	8000b94 <Cursor>
	  	if(mode)
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <myStartTask02+0x74>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d023      	beq.n	8000a50 <myStartTask02+0x64>
	  	{
	  		printf("B1 button pressed...%d times\r\n", bn);
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <myStartTask02+0x78>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <myStartTask02+0x7c>)
 8000a10:	f003 fd0e 	bl	8004430 <iprintf>
	  		step_wave((t1 % 4) + 1);
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <myStartTask02+0x80>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	425a      	negs	r2, r3
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	bf58      	it	pl
 8000a24:	4253      	negpl	r3, r2
 8000a26:	3301      	adds	r3, #1
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fde7 	bl	80005fc <step_wave>
	  		if(++t1 > 256) { t1 = 0; mode = 0; }
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <myStartTask02+0x80>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <myStartTask02+0x80>)
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <myStartTask02+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a40:	dd09      	ble.n	8000a56 <myStartTask02+0x6a>
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <myStartTask02+0x80>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <myStartTask02+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e002      	b.n	8000a56 <myStartTask02+0x6a>
	  	}
	  	else
	  		printf("                                   ");
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <myStartTask02+0x84>)
 8000a52:	f003 fced 	bl	8004430 <iprintf>
	 // printf("Input Degree : ");
	 // scanf("%d", &d);
	 // int step = 4096 * d / 360;
	 // printf("Wave(Full) : %d steps, Half : %d steps", step/2, step);

		osDelay(5); //TASK delay
 8000a56:	2005      	movs	r0, #5
 8000a58:	f002 fa1d 	bl	8002e96 <osDelay>
	{
 8000a5c:	e7cc      	b.n	80009f8 <myStartTask02+0xc>
 8000a5e:	bf00      	nop
 8000a60:	2000037c 	.word	0x2000037c
 8000a64:	20000378 	.word	0x20000378
 8000a68:	08005830 	.word	0x08005830
 8000a6c:	20000380 	.word	0x20000380
 8000a70:	08005850 	.word	0x08005850

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 faad 	bl	8000fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40014400 	.word	0x40014400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <__io_getchar>:
extern UART_HandleTypeDef huart2;
//I2C_HandleTypeDef *hi2c = NULL;


int __io_getchar(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000aaa:	bf00      	nop
 8000aac:	1df9      	adds	r1, r7, #7
 8000aae:	230a      	movs	r3, #10
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <__io_getchar+0x44>)
 8000ab4:	f001 fdbd 	bl	8002632 <HAL_UART_Receive>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f6      	bne.n	8000aac <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10); //echo
 8000abe:	1df9      	adds	r1, r7, #7
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <__io_getchar+0x44>)
 8000ac6:	f001 fd29 	bl	800251c <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b0d      	cmp	r3, #13
 8000ace:	d105      	bne.n	8000adc <__io_getchar+0x38>
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4905      	ldr	r1, [pc, #20]	; (8000aec <__io_getchar+0x48>)
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <__io_getchar+0x44>)
 8000ad8:	f001 fd20 	bl	800251c <HAL_UART_Transmit>
	return ch;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000328 	.word	0x20000328
 8000aec:	08005874 	.word	0x08005874

08000af0 <__io_putchar>:

int __io_putchar(int ch)  //4byte
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000af8:	1d39      	adds	r1, r7, #4
 8000afa:	230a      	movs	r3, #10
 8000afc:	2201      	movs	r2, #1
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <__io_putchar+0x20>)
 8000b00:	f001 fd0c 	bl	800251c <HAL_UART_Transmit>
	return ch;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000328 	.word	0x20000328

08000b14 <Standby>:

void Standby()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)); //wait until B1 == 0 (Press)
 8000b18:	bf00      	nop
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <Standby+0x1c>)
 8000b20:	f000 fd0a 	bl	8001538 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f7      	bne.n	8000b1a <Standby+0x6>
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020800 	.word	0x40020800

08000b34 <ProgramStart>:

void ProgramStart (char* str)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


	//printf("\033[2J\033[0;0H");
	cls();
 8000b3c:	f000 f820 	bl	8000b80 <cls>
	Cursor(0,0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f826 	bl	8000b94 <Cursor>
	printf("Program Name - %s\r\n", str);
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <ProgramStart+0x40>)
 8000b4c:	f003 fc70 	bl	8004430 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <ProgramStart+0x44>)
 8000b52:	f003 fcd3 	bl	80044fc <puts>
	setvbuf(stdin, NULL, _IONBF, 0);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <ProgramStart+0x48>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6858      	ldr	r0, [r3, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2202      	movs	r2, #2
 8000b60:	2100      	movs	r1, #0
 8000b62:	f003 fcd3 	bl	800450c <setvbuf>
	Standby();
 8000b66:	f7ff ffd5 	bl	8000b14 <Standby>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	08005878 	.word	0x08005878
 8000b78:	0800588c 	.word	0x0800588c
 8000b7c:	20000068 	.word	0x20000068

08000b80 <cls>:

void cls()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <cls+0x10>)
 8000b86:	f003 fc53 	bl	8004430 <iprintf>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	080058b0 	.word	0x080058b0

08000b94 <Cursor>:
void Cursor(int x, int y)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8000b9e:	f107 000c 	add.w	r0, r7, #12
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <Cursor+0x2c>)
 8000ba8:	f003 fd5e 	bl	8004668 <siprintf>
	puts(buf);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fca3 	bl	80044fc <puts>
}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	080058b8 	.word	0x080058b8

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	f06f 0001 	mvn.w	r0, #1
 8000c0a:	f000 fae7 	bl	80011dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12b      	bne.n	8000c96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_UART_MspInit+0x8c>)
 8000c92:	f000 facd 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <HAL_InitTick+0xd0>)
 8000cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc4:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <HAL_InitTick+0xd0>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6453      	str	r3, [r2, #68]	; 0x44
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <HAL_InitTick+0xd0>)
 8000cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd8:	f107 020c 	add.w	r2, r7, #12
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f924 	bl	8001f30 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ce8:	f001 f90e 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8000cec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <HAL_InitTick+0xd4>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_InitTick+0xd8>)
 8000cfe:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_InitTick+0xdc>)
 8000d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d08:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d24:	f001 f936 	bl	8001f94 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d11b      	bne.n	8000d6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <HAL_InitTick+0xd8>)
 8000d38:	f001 f986 	bl	8002048 <HAL_TIM_Base_Start_IT>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d111      	bne.n	8000d6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d4a:	2019      	movs	r0, #25
 8000d4c:	f000 fa62 	bl	8001214 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d808      	bhi.n	8000d68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d56:	2200      	movs	r2, #0
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	2019      	movs	r0, #25
 8000d5c:	f000 fa3e 	bl	80011dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0xe0>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e002      	b.n	8000d6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	20000384 	.word	0x20000384
 8000d88:	40014400 	.word	0x40014400
 8000d8c:	20000004 	.word	0x20000004

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dc2:	f001 f9a3 	bl	800210c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000384 	.word	0x20000384

08000dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dd8:	f000 fbfa 	bl	80015d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f7ff fe57 	bl	8000aa4 <__io_getchar>
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe5b 	bl	8000af0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fd58 	bl	80049a0 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200003cc 	.word	0x200003cc
 8000f24:	20004278 	.word	0x20004278

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fd17 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fbb3 	bl	80006e8 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f90:	08005928 	.word	0x08005928
  ldr r2, =_sbss
 8000f94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f98:	20004274 	.word	0x20004274

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f8fc 	bl	80011c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	200f      	movs	r0, #15
 8000fd0:	f7ff fe6c 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fdf6 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	200003d0 	.word	0x200003d0

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200003d0 	.word	0x200003d0

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff4c 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff ff61 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ffb1 	bl	8001160 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff80 	bl	800110c <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff54 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e159      	b.n	8001500 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8148 	bne.w	80014fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a2 	beq.w	80014fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x2e8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_GPIO_Init+0x2ec>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a49      	ldr	r2, [pc, #292]	; (8001520 <HAL_GPIO_Init+0x2f0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x202>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2f4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x1fe>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a47      	ldr	r2, [pc, #284]	; (8001528 <HAL_GPIO_Init+0x2f8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x1fa>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_GPIO_Init+0x2fc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x1f6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <HAL_GPIO_Init+0x300>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x1f2>
 800141e:	2304      	movs	r3, #4
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001422:	2307      	movs	r3, #7
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x204>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x204>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x2ec>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x304>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_GPIO_Init+0x304>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_GPIO_Init+0x304>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f aea2 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e001      	b.n	800155a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001584:	e003      	b.n	800158e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	041a      	lsls	r2, r3, #16
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	400b      	ands	r3, r1
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffde 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e267      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d075      	beq.n	800170a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d00c      	beq.n	8001644 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001632:	2b08      	cmp	r3, #8
 8001634:	d112      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b7e      	ldr	r3, [pc, #504]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d05b      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d157      	bne.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e242      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x74>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a75      	ldr	r2, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x98>
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a68      	ldr	r2, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a65      	ldr	r2, [pc, #404]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fca8 	bl	800100c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fca4 	bl	800100c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e207      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc94 	bl	800100c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc90 	bl	800100c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1f3      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800172a:	2b08      	cmp	r3, #8
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e1c7      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4937      	ldr	r1, [pc, #220]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	e03a      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fc49 	bl	800100c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fc45 	bl	800100c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1a8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4925      	ldr	r1, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x244>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc28 	bl	800100c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fc24 	bl	800100c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e187      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d036      	beq.n	8001858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d016      	beq.n	8001820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fc08 	bl	800100c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fc04 	bl	800100c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e167      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x240>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x200>
 800181e:	e01b      	b.n	8001858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x248>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fbf1 	bl	800100c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	e00e      	b.n	800184c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fbed 	bl	800100c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d907      	bls.n	800184c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e150      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ea      	bne.n	800182e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8097 	beq.w	8001994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a7c      	ldr	r2, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a73      	ldr	r2, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fbad 	bl	800100c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fba9 	bl	800100c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e10c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x474>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x2ea>
 80018dc:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x30c>
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a5b      	ldr	r2, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0x324>
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d015      	beq.n	8001958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fb6e 	bl	800100c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fb6a 	bl	800100c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0cb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ee      	beq.n	8001934 <HAL_RCC_OscConfig+0x334>
 8001956:	e014      	b.n	8001982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fb58 	bl	800100c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff fb54 	bl	800100c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0b5      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ee      	bne.n	8001960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a1 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d05c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d141      	bne.n	8001a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb28 	bl	800100c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fb24 	bl	800100c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e087      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fafd 	bl	800100c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff faf9 	bl	800100c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e05c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x416>
 8001a34:	e054      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fae6 	bl	800100c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fae2 	bl	800100c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e045      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x444>
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e038      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4ec>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d028      	beq.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d121      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0cc      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d90c      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	494d      	ldr	r1, [pc, #308]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d044      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e07f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e067      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4934      	ldr	r1, [pc, #208]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff fa14 	bl	800100c <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff fa10 	bl	800100c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e04f      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d20c      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e032      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c76:	f000 f821 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	490a      	ldr	r1, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	5ccb      	ldrb	r3, [r1, r3]
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f808 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	080058cc 	.word	0x080058cc
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc0:	b094      	sub	sp, #80	; 0x50
 8001cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d00d      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x40>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	f200 80e1 	bhi.w	8001ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cee:	e0db      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b73      	ldr	r3, [pc, #460]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf4:	e0db      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cfa:	e0d8      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4621      	mov	r1, r4
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	6139      	str	r1, [r7, #16]
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d60:	4659      	mov	r1, fp
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4651      	mov	r1, sl
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4651      	mov	r1, sl
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	4651      	mov	r1, sl
 8001d70:	ebb2 0801 	subs.w	r8, r2, r1
 8001d74:	4659      	mov	r1, fp
 8001d76:	eb63 0901 	sbc.w	r9, r3, r1
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4699      	mov	r9, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	eb18 0303 	adds.w	r3, r8, r3
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	eb49 0303 	adc.w	r3, r9, r3
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dae:	4629      	mov	r1, r5
 8001db0:	024b      	lsls	r3, r1, #9
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001db8:	4621      	mov	r1, r4
 8001dba:	024a      	lsls	r2, r1, #9
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dcc:	f7fe fa58 	bl	8000280 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd8:	e058      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	2200      	movs	r2, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	4611      	mov	r1, r2
 8001de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001df4:	4642      	mov	r2, r8
 8001df6:	464b      	mov	r3, r9
 8001df8:	f04f 0000 	mov.w	r0, #0
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	0159      	lsls	r1, r3, #5
 8001e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e06:	0150      	lsls	r0, r2, #5
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e12:	4649      	mov	r1, r9
 8001e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e30:	eb63 050b 	sbc.w	r5, r3, fp
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	00eb      	lsls	r3, r5, #3
 8001e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e42:	00e2      	lsls	r2, r4, #3
 8001e44:	4614      	mov	r4, r2
 8001e46:	461d      	mov	r5, r3
 8001e48:	4643      	mov	r3, r8
 8001e4a:	18e3      	adds	r3, r4, r3
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	464b      	mov	r3, r9
 8001e50:	eb45 0303 	adc.w	r3, r5, r3
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e62:	4629      	mov	r1, r5
 8001e64:	028b      	lsls	r3, r1, #10
 8001e66:	4621      	mov	r1, r4
 8001e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	028a      	lsls	r2, r1, #10
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e76:	2200      	movs	r2, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	61fa      	str	r2, [r7, #28]
 8001e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e80:	f7fe f9fe 	bl	8000280 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea6:	e002      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3750      	adds	r7, #80	; 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000000 	.word	0x20000000

08001ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	080058dc 	.word	0x080058dc

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f0c:	f7ff ffdc 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0b5b      	lsrs	r3, r3, #13
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4903      	ldr	r1, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	080058dc 	.word	0x080058dc

08001f30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_GetClockConfig+0x5c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCC_GetClockConfig+0x5c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCC_GetClockConfig+0x5c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_GetClockConfig+0x60>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0207 	and.w	r2, r3, #7
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f839 	bl	8002032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f9b2 	bl	800233c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e044      	b.n	80020ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x6c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d013      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x6c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_TIM_Base_Start_IT+0xb4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x6c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_TIM_Base_Start_IT+0xb8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x6c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_TIM_Base_Start_IT+0xbc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x6c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a16      	ldr	r2, [pc, #88]	; (8002108 <HAL_TIM_Base_Start_IT+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d010      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d6:	e007      	b.n	80020e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40014000 	.word	0x40014000

0800210c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d020      	beq.n	8002170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0202 	mvn.w	r2, #2
 8002140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8d2 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8c4 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8d5 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d020      	beq.n	80021bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0204 	mvn.w	r2, #4
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8ac 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f89e 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8af 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01b      	beq.n	8002208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f886 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f878 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f889 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	d020      	beq.n	8002254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01b      	beq.n	8002254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f860 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f852 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f863 	bl	8002314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0201 	mvn.w	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fbfe 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8e6 	bl	8002468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f834 	bl	8002328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8b8 	bl	8002454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <TIM_Base_SetConfig+0xfc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00f      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d00b      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a37      	ldr	r2, [pc, #220]	; (800243c <TIM_Base_SetConfig+0x100>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a36      	ldr	r2, [pc, #216]	; (8002440 <TIM_Base_SetConfig+0x104>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0x38>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <TIM_Base_SetConfig+0x108>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d108      	bne.n	8002386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <TIM_Base_SetConfig+0xfc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01b      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d017      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <TIM_Base_SetConfig+0x100>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <TIM_Base_SetConfig+0x104>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00f      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <TIM_Base_SetConfig+0x108>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a25      	ldr	r2, [pc, #148]	; (8002448 <TIM_Base_SetConfig+0x10c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a24      	ldr	r2, [pc, #144]	; (800244c <TIM_Base_SetConfig+0x110>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x8a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <TIM_Base_SetConfig+0x114>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <TIM_Base_SetConfig+0xfc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f023 0201 	bic.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
  }
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010000 	.word	0x40010000
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800
 8002444:	40000c00 	.word	0x40000c00
 8002448:	40014000 	.word	0x40014000
 800244c:	40014400 	.word	0x40014400
 8002450:	40014800 	.word	0x40014800

08002454 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e042      	b.n	8002514 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fbba 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa09 	bl	80028d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	d175      	bne.n	8002628 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_UART_Transmit+0x2c>
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e06e      	b.n	800262a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	; 0x21
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255a:	f7fe fd57 	bl	800100c <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d108      	bne.n	8002588 <HAL_UART_Transmit+0x6c>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e003      	b.n	8002590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002590:	e02e      	b.n	80025f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f8df 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e03a      	b.n	800262a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3302      	adds	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e007      	b.n	80025e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1cb      	bne.n	8002592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f8ab 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b08a      	sub	sp, #40	; 0x28
 8002636:	af02      	add	r7, sp, #8
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	f040 8081 	bne.w	8002756 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Receive+0x2e>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e079      	b.n	8002758 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2222      	movs	r2, #34	; 0x22
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002678:	f7fe fcc8 	bl	800100c <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d108      	bne.n	80026a6 <HAL_UART_Receive+0x74>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e003      	b.n	80026ae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026ae:	e047      	b.n	8002740 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2200      	movs	r2, #0
 80026b8:	2120      	movs	r1, #32
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f850 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e042      	b.n	8002758 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3302      	adds	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e01f      	b.n	8002732 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d007      	beq.n	800270c <HAL_UART_Receive+0xda>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_UART_Receive+0xe8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e008      	b.n	800272c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002726:	b2da      	uxtb	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3301      	adds	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1b2      	bne.n	80026b0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002770:	e03b      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d037      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe fc47 	bl	800100c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <UART_WaitOnFlagUntilTimeout+0x30>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03a      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d023      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d020      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d01d      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d116      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f81d 	bl	8002812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2208      	movs	r2, #8
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d0b4      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002812:	b480      	push	{r7}
 8002814:	b095      	sub	sp, #84	; 0x54
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	643a      	str	r2, [r7, #64]	; 0x40
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e5      	bne.n	800281a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	61fb      	str	r3, [r7, #28]
   return(result);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	2b01      	cmp	r3, #1
 8002888:	d119      	bne.n	80028be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	60bb      	str	r3, [r7, #8]
   return(result);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f023 0310 	bic.w	r3, r3, #16
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028aa:	61ba      	str	r2, [r7, #24]
 80028ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6979      	ldr	r1, [r7, #20]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	613b      	str	r3, [r7, #16]
   return(result);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e5      	bne.n	800288a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028cc:	bf00      	nop
 80028ce:	3754      	adds	r7, #84	; 0x54
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b0c0      	sub	sp, #256	; 0x100
 80028de:	af00      	add	r7, sp, #0
 80028e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	68d9      	ldr	r1, [r3, #12]
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	ea40 0301 	orr.w	r3, r0, r1
 8002900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	431a      	orrs	r2, r3
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	431a      	orrs	r2, r3
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002930:	f021 010c 	bic.w	r1, r1, #12
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800293e:	430b      	orrs	r3, r1
 8002940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	6999      	ldr	r1, [r3, #24]
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	ea40 0301 	orr.w	r3, r0, r1
 800295e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <UART_SetConfig+0x2cc>)
 8002968:	429a      	cmp	r2, r3
 800296a:	d005      	beq.n	8002978 <UART_SetConfig+0xa0>
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <UART_SetConfig+0x2d0>)
 8002974:	429a      	cmp	r2, r3
 8002976:	d104      	bne.n	8002982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002978:	f7ff fac6 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 800297c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002980:	e003      	b.n	800298a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7ff faad 	bl	8001ee0 <HAL_RCC_GetPCLK1Freq>
 8002986:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	f040 810c 	bne.w	8002bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	1891      	adds	r1, r2, r2
 80029b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80029b2:	415b      	adcs	r3, r3
 80029b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029ba:	4621      	mov	r1, r4
 80029bc:	eb12 0801 	adds.w	r8, r2, r1
 80029c0:	4629      	mov	r1, r5
 80029c2:	eb43 0901 	adc.w	r9, r3, r1
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	eb18 0303 	adds.w	r3, r8, r3
 80029e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e8:	462b      	mov	r3, r5
 80029ea:	eb49 0303 	adc.w	r3, r9, r3
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a06:	460b      	mov	r3, r1
 8002a08:	18db      	adds	r3, r3, r3
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	eb42 0303 	adc.w	r3, r2, r3
 8002a12:	657b      	str	r3, [r7, #84]	; 0x54
 8002a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a1c:	f7fd fc30 	bl	8000280 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b61      	ldr	r3, [pc, #388]	; (8002bac <UART_SetConfig+0x2d4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a50:	4641      	mov	r1, r8
 8002a52:	eb12 0a01 	adds.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb43 0b01 	adc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a70:	4692      	mov	sl, r2
 8002a72:	469b      	mov	fp, r3
 8002a74:	4643      	mov	r3, r8
 8002a76:	eb1a 0303 	adds.w	r3, sl, r3
 8002a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	eb4b 0303 	adc.w	r3, fp, r3
 8002a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	18db      	adds	r3, r3, r3
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	eb42 0303 	adc.w	r3, r2, r3
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ab2:	f7fd fbe5 	bl	8000280 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <UART_SetConfig+0x2d4>)
 8002abe:	fba3 2301 	umull	r2, r3, r3, r1
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2264      	movs	r2, #100	; 0x64
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <UART_SetConfig+0x2d4>)
 8002ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ae0:	441c      	add	r4, r3
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002afc:	415b      	adcs	r3, r3
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6339      	str	r1, [r7, #48]	; 0x30
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b38:	464b      	mov	r3, r9
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	eb42 0303 	adc.w	r3, r2, r3
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b58:	460b      	mov	r3, r1
 8002b5a:	18db      	adds	r3, r3, r3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	4613      	mov	r3, r2
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b6e:	f7fd fb87 	bl	8000280 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <UART_SetConfig+0x2d4>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	; 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	3332      	adds	r3, #50	; 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <UART_SetConfig+0x2d4>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4422      	add	r2, r4
 8002b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba0:	e106      	b.n	8002db0 <UART_SetConfig+0x4d8>
 8002ba2:	bf00      	nop
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	1891      	adds	r1, r2, r2
 8002bc8:	6239      	str	r1, [r7, #32]
 8002bca:	415b      	adcs	r3, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd2:	4641      	mov	r1, r8
 8002bd4:	1854      	adds	r4, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb43 0501 	adc.w	r5, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	00eb      	lsls	r3, r5, #3
 8002be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bea:	00e2      	lsls	r2, r4, #3
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	18e3      	adds	r3, r4, r3
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	eb45 0303 	adc.w	r3, r5, r3
 8002bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c1e:	4629      	mov	r1, r5
 8002c20:	008b      	lsls	r3, r1, #2
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c28:	4621      	mov	r1, r4
 8002c2a:	008a      	lsls	r2, r1, #2
 8002c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c30:	f7fd fb26 	bl	8000280 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	011c      	lsls	r4, r3, #4
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	61b9      	str	r1, [r7, #24]
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6139      	str	r1, [r7, #16]
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	008b      	lsls	r3, r1, #2
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	008a      	lsls	r2, r1, #2
 8002cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cce:	f7fd fad7 	bl	8000280 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002cda:	fba3 2301 	umull	r2, r3, r3, r1
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2264      	movs	r2, #100	; 0x64
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	1acb      	subs	r3, r1, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf8:	441c      	add	r4, r3
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	673b      	str	r3, [r7, #112]	; 0x70
 8002d02:	677a      	str	r2, [r7, #116]	; 0x74
 8002d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d08:	4642      	mov	r2, r8
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	415b      	adcs	r3, r3
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d18:	4641      	mov	r1, r8
 8002d1a:	1851      	adds	r1, r2, r1
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	4649      	mov	r1, r9
 8002d20:	414b      	adcs	r3, r1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d30:	4659      	mov	r1, fp
 8002d32:	00cb      	lsls	r3, r1, #3
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	00ca      	lsls	r2, r1, #3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	4642      	mov	r2, r8
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	eb42 0303 	adc.w	r3, r2, r3
 8002d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5e:	667a      	str	r2, [r7, #100]	; 0x64
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	008b      	lsls	r3, r1, #2
 8002d70:	4641      	mov	r1, r8
 8002d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d76:	4641      	mov	r1, r8
 8002d78:	008a      	lsls	r2, r1, #2
 8002d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d7e:	f7fd fa7f 	bl	8000280 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4422      	add	r2, r4
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002db6:	46bd      	mov	sp, r7
 8002db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dbc:	51eb851f 	.word	0x51eb851f

08002dc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd2:	2b84      	cmp	r3, #132	; 0x84
 8002dd4:	d005      	beq.n	8002de2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002dd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3303      	adds	r3, #3
 8002de0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002df4:	f000 faf6 	bl	80033e4 <vTaskStartScheduler>
  
  return osOK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e00:	b089      	sub	sp, #36	; 0x24
 8002e02:	af04      	add	r7, sp, #16
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <osThreadCreate+0x54>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01c      	beq.n	8002e52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685c      	ldr	r4, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691e      	ldr	r6, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffc8 	bl	8002dc0 <makeFreeRtosPriority>
 8002e30:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e3a:	9202      	str	r2, [sp, #8]
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	9100      	str	r1, [sp, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4632      	mov	r2, r6
 8002e44:	4629      	mov	r1, r5
 8002e46:	4620      	mov	r0, r4
 8002e48:	f000 f8ed 	bl	8003026 <xTaskCreateStatic>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e01c      	b.n	8002e8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685c      	ldr	r4, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e5e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ffaa 	bl	8002dc0 <makeFreeRtosPriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	9200      	str	r2, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	4632      	mov	r2, r6
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f000 f92f 	bl	80030e0 <xTaskCreate>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d001      	beq.n	8002e8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <osDelay+0x16>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	e000      	b.n	8002eae <osDelay+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fa64 	bl	800337c <vTaskDelay>
  
  return osOK;
 8002eb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 0208 	add.w	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0208 	add.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f103 0208 	add.w	r2, r3, #8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	601a      	str	r2, [r3, #0]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d103      	bne.n	8002f80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e00c      	b.n	8002f9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3308      	adds	r3, #8
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e002      	b.n	8002f8e <vListInsert+0x2e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d2f6      	bcs.n	8002f88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6852      	ldr	r2, [r2, #4]
 8002ff2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d103      	bne.n	8003006 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003026:	b580      	push	{r7, lr}
 8003028:	b08e      	sub	sp, #56	; 0x38
 800302a:	af04      	add	r7, sp, #16
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <xTaskCreateStatic+0x46>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	61fb      	str	r3, [r7, #28]
}
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800306c:	23a0      	movs	r3, #160	; 0xa0
 800306e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2ba0      	cmp	r3, #160	; 0xa0
 8003074:	d00a      	beq.n	800308c <xTaskCreateStatic+0x66>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	61bb      	str	r3, [r7, #24]
}
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800308c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01e      	beq.n	80030d2 <xTaskCreateStatic+0xac>
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01b      	beq.n	80030d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030ac:	2300      	movs	r3, #0
 80030ae:	9303      	str	r3, [sp, #12]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f851 	bl	800316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030cc:	f000 f8ec 	bl	80032a8 <prvAddNewTaskToReadyList>
 80030d0:	e001      	b.n	80030d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030d6:	697b      	ldr	r3, [r7, #20]
	}
 80030d8:	4618      	mov	r0, r3
 80030da:	3728      	adds	r7, #40	; 0x28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 feef 	bl	8003ed8 <pvPortMalloc>
 80030fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003102:	20a0      	movs	r0, #160	; 0xa0
 8003104:	f000 fee8 	bl	8003ed8 <pvPortMalloc>
 8003108:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e005      	b.n	8003124 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003118:	6978      	ldr	r0, [r7, #20]
 800311a:	f000 ffa9 	bl	8004070 <vPortFree>
 800311e:	e001      	b.n	8003124 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d017      	beq.n	800315a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	2300      	movs	r3, #0
 8003136:	9303      	str	r3, [sp, #12]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9302      	str	r3, [sp, #8]
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f80f 	bl	800316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800314e:	69f8      	ldr	r0, [r7, #28]
 8003150:	f000 f8aa 	bl	80032a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003154:	2301      	movs	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e002      	b.n	8003160 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003160:	69bb      	ldr	r3, [r7, #24]
	}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003184:	3b01      	subs	r3, #1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f023 0307 	bic.w	r3, r3, #7
 8003192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	617b      	str	r3, [r7, #20]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01f      	beq.n	80031fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e012      	b.n	80031e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	7819      	ldrb	r1, [r3, #0]
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	3334      	adds	r3, #52	; 0x34
 80031d0:	460a      	mov	r2, r1
 80031d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b0f      	cmp	r3, #15
 80031ea:	d9e9      	bls.n	80031c0 <prvInitialiseNewTask+0x54>
 80031ec:	e000      	b.n	80031f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80031ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f8:	e003      	b.n	8003202 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	2b06      	cmp	r3, #6
 8003206:	d901      	bls.n	800320c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003208:	2306      	movs	r3, #6
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	2200      	movs	r2, #0
 800321c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	3304      	adds	r3, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fe6b 	bl	8002efe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	3318      	adds	r3, #24
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fe66 	bl	8002efe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	f1c3 0207 	rsb	r2, r3, #7
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	2200      	movs	r2, #0
 800324c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	2200      	movs	r2, #0
 8003254:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	334c      	adds	r3, #76	; 0x4c
 800325c:	224c      	movs	r2, #76	; 0x4c
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f001 faf9 	bl	8004858 <memset>
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	4a0c      	ldr	r2, [pc, #48]	; (800329c <prvInitialiseNewTask+0x130>)
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <prvInitialiseNewTask+0x134>)
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <prvInitialiseNewTask+0x138>)
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	69b8      	ldr	r0, [r7, #24]
 800327e:	f000 fc1f 	bl	8003ac0 <pxPortInitialiseStack>
 8003282:	4602      	mov	r2, r0
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003292:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003294:	bf00      	nop
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20004128 	.word	0x20004128
 80032a0:	20004190 	.word	0x20004190
 80032a4:	200041f8 	.word	0x200041f8

080032a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032b0:	f000 fd30 	bl	8003d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <prvAddNewTaskToReadyList+0xb8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <prvAddNewTaskToReadyList+0xb8>)
 80032bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <prvAddNewTaskToReadyList+0xbc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032c6:	4a27      	ldr	r2, [pc, #156]	; (8003364 <prvAddNewTaskToReadyList+0xbc>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <prvAddNewTaskToReadyList+0xb8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d110      	bne.n	80032f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032d4:	f000 facc 	bl	8003870 <prvInitialiseTaskLists>
 80032d8:	e00d      	b.n	80032f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <prvAddNewTaskToReadyList+0xc0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <prvAddNewTaskToReadyList+0xbc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d802      	bhi.n	80032f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <prvAddNewTaskToReadyList+0xbc>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <prvAddNewTaskToReadyList+0xc4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	4a1b      	ldr	r2, [pc, #108]	; (800336c <prvAddNewTaskToReadyList+0xc4>)
 80032fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <prvAddNewTaskToReadyList+0xc8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <prvAddNewTaskToReadyList+0xc8>)
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4a15      	ldr	r2, [pc, #84]	; (8003374 <prvAddNewTaskToReadyList+0xcc>)
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7ff fdf5 	bl	8002f18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800332e:	f000 fd21 	bl	8003d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <prvAddNewTaskToReadyList+0xc0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00e      	beq.n	8003358 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <prvAddNewTaskToReadyList+0xbc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <prvAddNewTaskToReadyList+0xd0>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200004d4 	.word	0x200004d4
 8003364:	200003d4 	.word	0x200003d4
 8003368:	200004e0 	.word	0x200004e0
 800336c:	200004f0 	.word	0x200004f0
 8003370:	200004dc 	.word	0x200004dc
 8003374:	200003d8 	.word	0x200003d8
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <vTaskDelay+0x60>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <vTaskDelay+0x30>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	60bb      	str	r3, [r7, #8]
}
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033ac:	f000 f884 	bl	80034b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033b0:	2100      	movs	r1, #0
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fb1e 	bl	80039f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033b8:	f000 f88c 	bl	80034d4 <xTaskResumeAll>
 80033bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <vTaskDelay+0x64>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200004fc 	.word	0x200004fc
 80033e0:	e000ed04 	.word	0xe000ed04

080033e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033f2:	463a      	mov	r2, r7
 80033f4:	1d39      	adds	r1, r7, #4
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8be 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	9202      	str	r2, [sp, #8]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2300      	movs	r3, #0
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	460a      	mov	r2, r1
 8003412:	4921      	ldr	r1, [pc, #132]	; (8003498 <vTaskStartScheduler+0xb4>)
 8003414:	4821      	ldr	r0, [pc, #132]	; (800349c <vTaskStartScheduler+0xb8>)
 8003416:	f7ff fe06 	bl	8003026 <xTaskCreateStatic>
 800341a:	4603      	mov	r3, r0
 800341c:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <vTaskStartScheduler+0xbc>)
 800341e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003420:	4b1f      	ldr	r3, [pc, #124]	; (80034a0 <vTaskStartScheduler+0xbc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003428:	2301      	movs	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e001      	b.n	8003432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d11b      	bne.n	8003470 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	613b      	str	r3, [r7, #16]
}
 800344a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <vTaskStartScheduler+0xc0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	334c      	adds	r3, #76	; 0x4c
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <vTaskStartScheduler+0xc4>)
 8003454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <vTaskStartScheduler+0xc8>)
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <vTaskStartScheduler+0xcc>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <vTaskStartScheduler+0xd0>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800346a:	f000 fbb1 	bl	8003bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800346e:	e00e      	b.n	800348e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d10a      	bne.n	800348e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
}
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vTaskStartScheduler+0xa8>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	080058c4 	.word	0x080058c4
 800349c:	08003841 	.word	0x08003841
 80034a0:	200004f8 	.word	0x200004f8
 80034a4:	200003d4 	.word	0x200003d4
 80034a8:	20000068 	.word	0x20000068
 80034ac:	200004f4 	.word	0x200004f4
 80034b0:	200004e0 	.word	0x200004e0
 80034b4:	200004d8 	.word	0x200004d8

080034b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <vTaskSuspendAll+0x18>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a03      	ldr	r2, [pc, #12]	; (80034d0 <vTaskSuspendAll+0x18>)
 80034c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	200004fc 	.word	0x200004fc

080034d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <xTaskResumeAll+0x114>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xTaskResumeAll+0x2c>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	603b      	str	r3, [r7, #0]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003500:	f000 fc08 	bl	8003d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003504:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <xTaskResumeAll+0x114>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	4a37      	ldr	r2, [pc, #220]	; (80035e8 <xTaskResumeAll+0x114>)
 800350c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <xTaskResumeAll+0x114>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d161      	bne.n	80035da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003516:	4b35      	ldr	r3, [pc, #212]	; (80035ec <xTaskResumeAll+0x118>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d05d      	beq.n	80035da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800351e:	e02e      	b.n	800357e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <xTaskResumeAll+0x11c>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3318      	adds	r3, #24
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fd50 	bl	8002fd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fd4b 	bl	8002fd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <xTaskResumeAll+0x120>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4313      	orrs	r3, r2
 800354a:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <xTaskResumeAll+0x120>)
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <xTaskResumeAll+0x124>)
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3304      	adds	r3, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f7ff fcd7 	bl	8002f18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <xTaskResumeAll+0x128>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <xTaskResumeAll+0x12c>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <xTaskResumeAll+0x11c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cc      	bne.n	8003520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800358c:	f000 fa12 	bl	80039b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <xTaskResumeAll+0x130>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800359c:	f000 f836 	bl	800360c <xTaskIncrementTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <xTaskResumeAll+0x12c>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f1      	bne.n	800359c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <xTaskResumeAll+0x130>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xTaskResumeAll+0x12c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <xTaskResumeAll+0x134>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035da:	f000 fbcb 	bl	8003d74 <vPortExitCritical>

	return xAlreadyYielded;
 80035de:	68bb      	ldr	r3, [r7, #8]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200004fc 	.word	0x200004fc
 80035ec:	200004d4 	.word	0x200004d4
 80035f0:	20000494 	.word	0x20000494
 80035f4:	200004dc 	.word	0x200004dc
 80035f8:	200003d8 	.word	0x200003d8
 80035fc:	200003d4 	.word	0x200003d4
 8003600:	200004e8 	.word	0x200004e8
 8003604:	200004e4 	.word	0x200004e4
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <xTaskIncrementTick+0x144>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 808e 	bne.w	800373c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003620:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <xTaskIncrementTick+0x148>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003628:	4a4a      	ldr	r2, [pc, #296]	; (8003754 <xTaskIncrementTick+0x148>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d120      	bne.n	8003676 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <xTaskIncrementTick+0x48>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	603b      	str	r3, [r7, #0]
}
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <xTaskIncrementTick+0x46>
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b40      	ldr	r3, [pc, #256]	; (800375c <xTaskIncrementTick+0x150>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3e      	ldr	r2, [pc, #248]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4a3e      	ldr	r2, [pc, #248]	; (800375c <xTaskIncrementTick+0x150>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <xTaskIncrementTick+0x154>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <xTaskIncrementTick+0x154>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	f000 f99f 	bl	80039b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <xTaskIncrementTick+0x158>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d348      	bcc.n	8003712 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003680:	4b35      	ldr	r3, [pc, #212]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <xTaskIncrementTick+0x158>)
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	601a      	str	r2, [r3, #0]
					break;
 8003692:	e03e      	b.n	8003712 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b30      	ldr	r3, [pc, #192]	; (8003758 <xTaskIncrementTick+0x14c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d203      	bcs.n	80036b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <xTaskIncrementTick+0x158>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036b2:	e02e      	b.n	8003712 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fc8a 	bl	8002fd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3318      	adds	r3, #24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fc81 	bl	8002fd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <xTaskIncrementTick+0x15c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	4a22      	ldr	r2, [pc, #136]	; (8003768 <xTaskIncrementTick+0x15c>)
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <xTaskIncrementTick+0x160>)
 80036f0:	441a      	add	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7ff fc0d 	bl	8002f18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <xTaskIncrementTick+0x164>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	429a      	cmp	r2, r3
 800370a:	d3b9      	bcc.n	8003680 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003710:	e7b6      	b.n	8003680 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <xTaskIncrementTick+0x164>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	4914      	ldr	r1, [pc, #80]	; (800376c <xTaskIncrementTick+0x160>)
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d901      	bls.n	800372e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <xTaskIncrementTick+0x168>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e004      	b.n	8003746 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <xTaskIncrementTick+0x16c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <xTaskIncrementTick+0x16c>)
 8003744:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200004fc 	.word	0x200004fc
 8003754:	200004d8 	.word	0x200004d8
 8003758:	2000048c 	.word	0x2000048c
 800375c:	20000490 	.word	0x20000490
 8003760:	200004ec 	.word	0x200004ec
 8003764:	200004f4 	.word	0x200004f4
 8003768:	200004dc 	.word	0x200004dc
 800376c:	200003d8 	.word	0x200003d8
 8003770:	200003d4 	.word	0x200003d4
 8003774:	200004e8 	.word	0x200004e8
 8003778:	200004e4 	.word	0x200004e4

0800377c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <vTaskSwitchContext+0xac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <vTaskSwitchContext+0xb0>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003790:	e044      	b.n	800381c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <vTaskSwitchContext+0xb0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <vTaskSwitchContext+0xb4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	f1c3 031f 	rsb	r3, r3, #31
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4921      	ldr	r1, [pc, #132]	; (8003834 <vTaskSwitchContext+0xb8>)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	607b      	str	r3, [r7, #4]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <vTaskSwitchContext+0x5a>
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <vTaskSwitchContext+0xb8>)
 80037e4:	4413      	add	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3308      	adds	r3, #8
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d104      	bne.n	8003808 <vTaskSwitchContext+0x8c>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <vTaskSwitchContext+0xbc>)
 8003810:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <vTaskSwitchContext+0xbc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	334c      	adds	r3, #76	; 0x4c
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <vTaskSwitchContext+0xc0>)
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	200004fc 	.word	0x200004fc
 800382c:	200004e8 	.word	0x200004e8
 8003830:	200004dc 	.word	0x200004dc
 8003834:	200003d8 	.word	0x200003d8
 8003838:	200003d4 	.word	0x200003d4
 800383c:	20000068 	.word	0x20000068

08003840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003848:	f000 f852 	bl	80038f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <prvIdleTask+0x28>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d9f9      	bls.n	8003848 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <prvIdleTask+0x2c>)
 8003856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003864:	e7f0      	b.n	8003848 <prvIdleTask+0x8>
 8003866:	bf00      	nop
 8003868:	200003d8 	.word	0x200003d8
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	e00c      	b.n	8003896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <prvInitialiseTaskLists+0x60>)
 8003888:	4413      	add	r3, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fb17 	bl	8002ebe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3301      	adds	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d9ef      	bls.n	800387c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800389c:	480d      	ldr	r0, [pc, #52]	; (80038d4 <prvInitialiseTaskLists+0x64>)
 800389e:	f7ff fb0e 	bl	8002ebe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <prvInitialiseTaskLists+0x68>)
 80038a4:	f7ff fb0b 	bl	8002ebe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <prvInitialiseTaskLists+0x6c>)
 80038aa:	f7ff fb08 	bl	8002ebe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038ae:	480c      	ldr	r0, [pc, #48]	; (80038e0 <prvInitialiseTaskLists+0x70>)
 80038b0:	f7ff fb05 	bl	8002ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <prvInitialiseTaskLists+0x74>)
 80038b6:	f7ff fb02 	bl	8002ebe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <prvInitialiseTaskLists+0x78>)
 80038bc:	4a05      	ldr	r2, [pc, #20]	; (80038d4 <prvInitialiseTaskLists+0x64>)
 80038be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <prvInitialiseTaskLists+0x7c>)
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <prvInitialiseTaskLists+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200003d8 	.word	0x200003d8
 80038d4:	20000464 	.word	0x20000464
 80038d8:	20000478 	.word	0x20000478
 80038dc:	20000494 	.word	0x20000494
 80038e0:	200004a8 	.word	0x200004a8
 80038e4:	200004c0 	.word	0x200004c0
 80038e8:	2000048c 	.word	0x2000048c
 80038ec:	20000490 	.word	0x20000490

080038f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f6:	e019      	b.n	800392c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038f8:	f000 fa0c 	bl	8003d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <prvCheckTasksWaitingTermination+0x50>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fb62 	bl	8002fd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <prvCheckTasksWaitingTermination+0x54>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	4a0b      	ldr	r2, [pc, #44]	; (8003944 <prvCheckTasksWaitingTermination+0x54>)
 8003916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <prvCheckTasksWaitingTermination+0x58>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3b01      	subs	r3, #1
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <prvCheckTasksWaitingTermination+0x58>)
 8003920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003922:	f000 fa27 	bl	8003d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f810 	bl	800394c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <prvCheckTasksWaitingTermination+0x58>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e1      	bne.n	80038f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200004a8 	.word	0x200004a8
 8003944:	200004d4 	.word	0x200004d4
 8003948:	200004bc 	.word	0x200004bc

0800394c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	334c      	adds	r3, #76	; 0x4c
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ff95 	bl	8004888 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fb7f 	bl	8004070 <vPortFree>
				vPortFree( pxTCB );
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb7c 	bl	8004070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003978:	e018      	b.n	80039ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003980:	2b01      	cmp	r3, #1
 8003982:	d103      	bne.n	800398c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb73 	bl	8004070 <vPortFree>
	}
 800398a:	e00f      	b.n	80039ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003992:	2b02      	cmp	r3, #2
 8003994:	d00a      	beq.n	80039ac <prvDeleteTCB+0x60>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	60fb      	str	r3, [r7, #12]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <prvDeleteTCB+0x5e>
	}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <prvResetNextTaskUnblockTime+0x38>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <prvResetNextTaskUnblockTime+0x3c>)
 80039c6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039cc:	e008      	b.n	80039e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <prvResetNextTaskUnblockTime+0x38>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <prvResetNextTaskUnblockTime+0x3c>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	2000048c 	.word	0x2000048c
 80039f0:	200004f4 	.word	0x200004f4

080039f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fae1 	bl	8002fd2 <uxListRemove>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	4a20      	ldr	r2, [pc, #128]	; (8003aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d10a      	bne.n	8003a4c <prvAddCurrentTaskToDelayedList+0x58>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	481a      	ldr	r0, [pc, #104]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a46:	f7ff fa67 	bl	8002f18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a4a:	e026      	b.n	8003a9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d209      	bcs.n	8003a78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7ff fa75 	bl	8002f60 <vListInsert>
}
 8003a76:	e010      	b.n	8003a9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7ff fa6b 	bl	8002f60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d202      	bcs.n	8003a9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6013      	str	r3, [r2, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200004d8 	.word	0x200004d8
 8003aa8:	200003d4 	.word	0x200003d4
 8003aac:	200004dc 	.word	0x200004dc
 8003ab0:	200004c0 	.word	0x200004c0
 8003ab4:	20000490 	.word	0x20000490
 8003ab8:	2000048c 	.word	0x2000048c
 8003abc:	200004f4 	.word	0x200004f4

08003ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b04      	subs	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b04      	subs	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b04      	subs	r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <pxPortInitialiseStack+0x64>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b14      	subs	r3, #20
 8003afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b04      	subs	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f06f 0202 	mvn.w	r2, #2
 8003b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b20      	subs	r3, #32
 8003b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b16:	68fb      	ldr	r3, [r7, #12]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	08003b29 	.word	0x08003b29

08003b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <prvTaskExitError+0x54>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d00a      	beq.n	8003b52 <prvTaskExitError+0x2a>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <prvTaskExitError+0x28>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	60bb      	str	r3, [r7, #8]
}
 8003b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b66:	bf00      	nop
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0fc      	beq.n	8003b68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	2000000c 	.word	0x2000000c

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bca:	bf00      	nop
 8003bcc:	e000ed08 	.word	0xe000ed08

08003bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <xPortStartScheduler+0x120>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <xPortStartScheduler+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10a      	bne.n	8003bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	613b      	str	r3, [r7, #16]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bf6:	4b3e      	ldr	r3, [pc, #248]	; (8003cf0 <xPortStartScheduler+0x120>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	; (8003cf8 <xPortStartScheduler+0x128>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10a      	bne.n	8003c16 <xPortStartScheduler+0x46>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c16:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <xPortStartScheduler+0x12c>)
 8003c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <xPortStartScheduler+0x130>)
 8003c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c44:	e009      	b.n	8003c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003c46:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d0ef      	beq.n	8003c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d00a      	beq.n	8003c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60bb      	str	r3, [r7, #8]
}
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c88:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <xPortStartScheduler+0x134>)
 8003c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <xPortStartScheduler+0x138>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <xPortStartScheduler+0x138>)
 8003cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <xPortStartScheduler+0x138>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <xPortStartScheduler+0x138>)
 8003cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003cbe:	f000 f8dd 	bl	8003e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <xPortStartScheduler+0x13c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cc8:	f000 f8fc 	bl	8003ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xPortStartScheduler+0x140>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <xPortStartScheduler+0x140>)
 8003cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cd8:	f7ff ff66 	bl	8003ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cdc:	f7ff fd4e 	bl	800377c <vTaskSwitchContext>
	prvTaskExitError();
 8003ce0:	f7ff ff22 	bl	8003b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	e000ed00 	.word	0xe000ed00
 8003cf4:	410fc271 	.word	0x410fc271
 8003cf8:	410fc270 	.word	0x410fc270
 8003cfc:	e000e400 	.word	0xe000e400
 8003d00:	20000500 	.word	0x20000500
 8003d04:	20000504 	.word	0x20000504
 8003d08:	e000ed20 	.word	0xe000ed20
 8003d0c:	2000000c 	.word	0x2000000c
 8003d10:	e000ef34 	.word	0xe000ef34

08003d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	607b      	str	r3, [r7, #4]
}
 8003d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <vPortEnterCritical+0x58>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <vPortEnterCritical+0x58>)
 8003d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <vPortEnterCritical+0x58>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d10f      	bne.n	8003d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <vPortEnterCritical+0x5c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	603b      	str	r3, [r7, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <vPortEnterCritical+0x4a>
	}
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	2000000c 	.word	0x2000000c
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <vPortExitCritical+0x50>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <vPortExitCritical+0x24>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <vPortExitCritical+0x50>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <vPortExitCritical+0x50>)
 8003da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <vPortExitCritical+0x50>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <vPortExitCritical+0x42>
 8003daa:	2300      	movs	r3, #0
 8003dac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
	...

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	f01e 0f10 	tst.w	lr, #16
 8003de0:	bf08      	it	eq
 8003de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003df4:	f380 8811 	msr	BASEPRI, r0
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f7ff fcbc 	bl	800377c <vTaskSwitchContext>
 8003e04:	f04f 0000 	mov.w	r0, #0
 8003e08:	f380 8811 	msr	BASEPRI, r0
 8003e0c:	bc09      	pop	{r0, r3}
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e16:	f01e 0f10 	tst.w	lr, #16
 8003e1a:	bf08      	it	eq
 8003e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e20:	f380 8809 	msr	PSP, r0
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst>:
 8003e30:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f7ff fbdb 	bl	800360c <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <SysTick_Handler+0x40>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
}
 8003e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <vPortSetupTimerInterrupt+0x38>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <vPortSetupTimerInterrupt+0x3c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <vPortSetupTimerInterrupt+0x40>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <vPortSetupTimerInterrupt+0x44>)
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000e010 	.word	0xe000e010
 8003eb4:	e000e018 	.word	0xe000e018
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	10624dd3 	.word	0x10624dd3
 8003ec0:	e000e014 	.word	0xe000e014

08003ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ed4 <vPortEnableVFP+0x10>
 8003ec8:	6801      	ldr	r1, [r0, #0]
 8003eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ece:	6001      	str	r1, [r0, #0]
 8003ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ed2:	bf00      	nop
 8003ed4:	e000ed88 	.word	0xe000ed88

08003ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ee4:	f7ff fae8 	bl	80034b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <pvPortMalloc+0x180>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ef0:	f000 f920 	bl	8004134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <pvPortMalloc+0x184>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8093 	bne.w	8004028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01d      	beq.n	8003f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f08:	2208      	movs	r2, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f023 0307 	bic.w	r3, r3, #7
 8003f20:	3308      	adds	r3, #8
 8003f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <pvPortMalloc+0x6c>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	617b      	str	r3, [r7, #20]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d06e      	beq.n	8004028 <pvPortMalloc+0x150>
 8003f4a:	4b45      	ldr	r3, [pc, #276]	; (8004060 <pvPortMalloc+0x188>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d869      	bhi.n	8004028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <pvPortMalloc+0x18c>)
 8003f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <pvPortMalloc+0x18c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f5e:	e004      	b.n	8003f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <pvPortMalloc+0xa4>
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f1      	bne.n	8003f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <pvPortMalloc+0x180>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d050      	beq.n	8004028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	4413      	add	r3, r2
 8003f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d91f      	bls.n	8003fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	613b      	str	r3, [r7, #16]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	1ad2      	subs	r2, r2, r3
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fe2:	69b8      	ldr	r0, [r7, #24]
 8003fe4:	f000 f908 	bl	80041f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <pvPortMalloc+0x188>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <pvPortMalloc+0x188>)
 8003ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <pvPortMalloc+0x188>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <pvPortMalloc+0x190>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d203      	bcs.n	800400a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <pvPortMalloc+0x188>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <pvPortMalloc+0x190>)
 8004008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <pvPortMalloc+0x184>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	431a      	orrs	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <pvPortMalloc+0x194>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <pvPortMalloc+0x194>)
 8004026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004028:	f7ff fa54 	bl	80034d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <pvPortMalloc+0x174>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60fb      	str	r3, [r7, #12]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <pvPortMalloc+0x172>
	return pvReturn;
 800404c:	69fb      	ldr	r3, [r7, #28]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3728      	adds	r7, #40	; 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20004110 	.word	0x20004110
 800405c:	20004124 	.word	0x20004124
 8004060:	20004114 	.word	0x20004114
 8004064:	20004108 	.word	0x20004108
 8004068:	20004118 	.word	0x20004118
 800406c:	2000411c 	.word	0x2000411c

08004070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04d      	beq.n	800411e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004082:	2308      	movs	r3, #8
 8004084:	425b      	negs	r3, r3
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4413      	add	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <vPortFree+0xb8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <vPortFree+0x44>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	60fb      	str	r3, [r7, #12]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <vPortFree+0x62>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60bb      	str	r3, [r7, #8]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <vPortFree+0xb8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01e      	beq.n	800411e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11a      	bne.n	800411e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <vPortFree+0xb8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	401a      	ands	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040f8:	f7ff f9de 	bl	80034b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <vPortFree+0xbc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4413      	add	r3, r2
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <vPortFree+0xbc>)
 8004108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800410a:	6938      	ldr	r0, [r7, #16]
 800410c:	f000 f874 	bl	80041f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <vPortFree+0xc0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <vPortFree+0xc0>)
 8004118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800411a:	f7ff f9db 	bl	80034d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20004124 	.word	0x20004124
 800412c:	20004114 	.word	0x20004114
 8004130:	20004120 	.word	0x20004120

08004134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800413a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800413e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <prvHeapInit+0xac>)
 8004142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3307      	adds	r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <prvHeapInit+0xac>)
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <prvHeapInit+0xb0>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <prvHeapInit+0xb0>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004180:	2208      	movs	r2, #8
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <prvHeapInit+0xb4>)
 8004194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <prvHeapInit+0xb4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <prvHeapInit+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <prvHeapInit+0xb4>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <prvHeapInit+0xb8>)
 80041c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <prvHeapInit+0xbc>)
 80041ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <prvHeapInit+0xc0>)
 80041ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000508 	.word	0x20000508
 80041e4:	20004108 	.word	0x20004108
 80041e8:	20004110 	.word	0x20004110
 80041ec:	20004118 	.word	0x20004118
 80041f0:	20004114 	.word	0x20004114
 80041f4:	20004124 	.word	0x20004124

080041f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <prvInsertBlockIntoFreeList+0xac>)
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <prvInsertBlockIntoFreeList+0x14>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d8f7      	bhi.n	8004206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d108      	bne.n	800423a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d118      	bne.n	8004280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d00d      	beq.n	8004276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e008      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e003      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d002      	beq.n	8004296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20004108 	.word	0x20004108
 80042a8:	20004110 	.word	0x20004110

080042ac <std>:
 80042ac:	2300      	movs	r3, #0
 80042ae:	b510      	push	{r4, lr}
 80042b0:	4604      	mov	r4, r0
 80042b2:	e9c0 3300 	strd	r3, r3, [r0]
 80042b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ba:	6083      	str	r3, [r0, #8]
 80042bc:	8181      	strh	r1, [r0, #12]
 80042be:	6643      	str	r3, [r0, #100]	; 0x64
 80042c0:	81c2      	strh	r2, [r0, #14]
 80042c2:	6183      	str	r3, [r0, #24]
 80042c4:	4619      	mov	r1, r3
 80042c6:	2208      	movs	r2, #8
 80042c8:	305c      	adds	r0, #92	; 0x5c
 80042ca:	f000 fac5 	bl	8004858 <memset>
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <std+0x58>)
 80042d0:	6263      	str	r3, [r4, #36]	; 0x24
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <std+0x5c>)
 80042d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <std+0x60>)
 80042d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <std+0x64>)
 80042dc:	6323      	str	r3, [r4, #48]	; 0x30
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <std+0x68>)
 80042e0:	6224      	str	r4, [r4, #32]
 80042e2:	429c      	cmp	r4, r3
 80042e4:	d006      	beq.n	80042f4 <std+0x48>
 80042e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042ea:	4294      	cmp	r4, r2
 80042ec:	d002      	beq.n	80042f4 <std+0x48>
 80042ee:	33d0      	adds	r3, #208	; 0xd0
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d105      	bne.n	8004300 <std+0x54>
 80042f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042fc:	f000 bb7a 	b.w	80049f4 <__retarget_lock_init_recursive>
 8004300:	bd10      	pop	{r4, pc}
 8004302:	bf00      	nop
 8004304:	080046a9 	.word	0x080046a9
 8004308:	080046cb 	.word	0x080046cb
 800430c:	08004703 	.word	0x08004703
 8004310:	08004727 	.word	0x08004727
 8004314:	20004128 	.word	0x20004128

08004318 <stdio_exit_handler>:
 8004318:	4a02      	ldr	r2, [pc, #8]	; (8004324 <stdio_exit_handler+0xc>)
 800431a:	4903      	ldr	r1, [pc, #12]	; (8004328 <stdio_exit_handler+0x10>)
 800431c:	4803      	ldr	r0, [pc, #12]	; (800432c <stdio_exit_handler+0x14>)
 800431e:	f000 b869 	b.w	80043f4 <_fwalk_sglue>
 8004322:	bf00      	nop
 8004324:	20000010 	.word	0x20000010
 8004328:	0800557d 	.word	0x0800557d
 800432c:	2000001c 	.word	0x2000001c

08004330 <cleanup_stdio>:
 8004330:	6841      	ldr	r1, [r0, #4]
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <cleanup_stdio+0x34>)
 8004334:	4299      	cmp	r1, r3
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	d001      	beq.n	8004340 <cleanup_stdio+0x10>
 800433c:	f001 f91e 	bl	800557c <_fflush_r>
 8004340:	68a1      	ldr	r1, [r4, #8]
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <cleanup_stdio+0x38>)
 8004344:	4299      	cmp	r1, r3
 8004346:	d002      	beq.n	800434e <cleanup_stdio+0x1e>
 8004348:	4620      	mov	r0, r4
 800434a:	f001 f917 	bl	800557c <_fflush_r>
 800434e:	68e1      	ldr	r1, [r4, #12]
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <cleanup_stdio+0x3c>)
 8004352:	4299      	cmp	r1, r3
 8004354:	d004      	beq.n	8004360 <cleanup_stdio+0x30>
 8004356:	4620      	mov	r0, r4
 8004358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435c:	f001 b90e 	b.w	800557c <_fflush_r>
 8004360:	bd10      	pop	{r4, pc}
 8004362:	bf00      	nop
 8004364:	20004128 	.word	0x20004128
 8004368:	20004190 	.word	0x20004190
 800436c:	200041f8 	.word	0x200041f8

08004370 <global_stdio_init.part.0>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <global_stdio_init.part.0+0x30>)
 8004374:	4c0b      	ldr	r4, [pc, #44]	; (80043a4 <global_stdio_init.part.0+0x34>)
 8004376:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <global_stdio_init.part.0+0x38>)
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	4620      	mov	r0, r4
 800437c:	2200      	movs	r2, #0
 800437e:	2104      	movs	r1, #4
 8004380:	f7ff ff94 	bl	80042ac <std>
 8004384:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004388:	2201      	movs	r2, #1
 800438a:	2109      	movs	r1, #9
 800438c:	f7ff ff8e 	bl	80042ac <std>
 8004390:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004394:	2202      	movs	r2, #2
 8004396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439a:	2112      	movs	r1, #18
 800439c:	f7ff bf86 	b.w	80042ac <std>
 80043a0:	20004260 	.word	0x20004260
 80043a4:	20004128 	.word	0x20004128
 80043a8:	08004319 	.word	0x08004319

080043ac <__sfp_lock_acquire>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__sfp_lock_acquire+0x8>)
 80043ae:	f000 bb22 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 80043b2:	bf00      	nop
 80043b4:	20004269 	.word	0x20004269

080043b8 <__sfp_lock_release>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__sfp_lock_release+0x8>)
 80043ba:	f000 bb1d 	b.w	80049f8 <__retarget_lock_release_recursive>
 80043be:	bf00      	nop
 80043c0:	20004269 	.word	0x20004269

080043c4 <__sinit>:
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4604      	mov	r4, r0
 80043c8:	f7ff fff0 	bl	80043ac <__sfp_lock_acquire>
 80043cc:	6a23      	ldr	r3, [r4, #32]
 80043ce:	b11b      	cbz	r3, 80043d8 <__sinit+0x14>
 80043d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d4:	f7ff bff0 	b.w	80043b8 <__sfp_lock_release>
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <__sinit+0x28>)
 80043da:	6223      	str	r3, [r4, #32]
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <__sinit+0x2c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f5      	bne.n	80043d0 <__sinit+0xc>
 80043e4:	f7ff ffc4 	bl	8004370 <global_stdio_init.part.0>
 80043e8:	e7f2      	b.n	80043d0 <__sinit+0xc>
 80043ea:	bf00      	nop
 80043ec:	08004331 	.word	0x08004331
 80043f0:	20004260 	.word	0x20004260

080043f4 <_fwalk_sglue>:
 80043f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f8:	4607      	mov	r7, r0
 80043fa:	4688      	mov	r8, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	2600      	movs	r6, #0
 8004400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004404:	f1b9 0901 	subs.w	r9, r9, #1
 8004408:	d505      	bpl.n	8004416 <_fwalk_sglue+0x22>
 800440a:	6824      	ldr	r4, [r4, #0]
 800440c:	2c00      	cmp	r4, #0
 800440e:	d1f7      	bne.n	8004400 <_fwalk_sglue+0xc>
 8004410:	4630      	mov	r0, r6
 8004412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d907      	bls.n	800442c <_fwalk_sglue+0x38>
 800441c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004420:	3301      	adds	r3, #1
 8004422:	d003      	beq.n	800442c <_fwalk_sglue+0x38>
 8004424:	4629      	mov	r1, r5
 8004426:	4638      	mov	r0, r7
 8004428:	47c0      	blx	r8
 800442a:	4306      	orrs	r6, r0
 800442c:	3568      	adds	r5, #104	; 0x68
 800442e:	e7e9      	b.n	8004404 <_fwalk_sglue+0x10>

08004430 <iprintf>:
 8004430:	b40f      	push	{r0, r1, r2, r3}
 8004432:	b507      	push	{r0, r1, r2, lr}
 8004434:	4906      	ldr	r1, [pc, #24]	; (8004450 <iprintf+0x20>)
 8004436:	ab04      	add	r3, sp, #16
 8004438:	6808      	ldr	r0, [r1, #0]
 800443a:	f853 2b04 	ldr.w	r2, [r3], #4
 800443e:	6881      	ldr	r1, [r0, #8]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	f000 fd6b 	bl	8004f1c <_vfiprintf_r>
 8004446:	b003      	add	sp, #12
 8004448:	f85d eb04 	ldr.w	lr, [sp], #4
 800444c:	b004      	add	sp, #16
 800444e:	4770      	bx	lr
 8004450:	20000068 	.word	0x20000068

08004454 <_puts_r>:
 8004454:	6a03      	ldr	r3, [r0, #32]
 8004456:	b570      	push	{r4, r5, r6, lr}
 8004458:	6884      	ldr	r4, [r0, #8]
 800445a:	4605      	mov	r5, r0
 800445c:	460e      	mov	r6, r1
 800445e:	b90b      	cbnz	r3, 8004464 <_puts_r+0x10>
 8004460:	f7ff ffb0 	bl	80043c4 <__sinit>
 8004464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004466:	07db      	lsls	r3, r3, #31
 8004468:	d405      	bmi.n	8004476 <_puts_r+0x22>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	0598      	lsls	r0, r3, #22
 800446e:	d402      	bmi.n	8004476 <_puts_r+0x22>
 8004470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004472:	f000 fac0 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	0719      	lsls	r1, r3, #28
 800447a:	d513      	bpl.n	80044a4 <_puts_r+0x50>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	b18b      	cbz	r3, 80044a4 <_puts_r+0x50>
 8004480:	3e01      	subs	r6, #1
 8004482:	68a3      	ldr	r3, [r4, #8]
 8004484:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004488:	3b01      	subs	r3, #1
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	b9e9      	cbnz	r1, 80044ca <_puts_r+0x76>
 800448e:	2b00      	cmp	r3, #0
 8004490:	da2e      	bge.n	80044f0 <_puts_r+0x9c>
 8004492:	4622      	mov	r2, r4
 8004494:	210a      	movs	r1, #10
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f949 	bl	800472e <__swbuf_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d007      	beq.n	80044b0 <_puts_r+0x5c>
 80044a0:	250a      	movs	r5, #10
 80044a2:	e007      	b.n	80044b4 <_puts_r+0x60>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f97e 	bl	80047a8 <__swsetup_r>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d0e7      	beq.n	8004480 <_puts_r+0x2c>
 80044b0:	f04f 35ff 	mov.w	r5, #4294967295
 80044b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044b6:	07da      	lsls	r2, r3, #31
 80044b8:	d405      	bmi.n	80044c6 <_puts_r+0x72>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	d402      	bmi.n	80044c6 <_puts_r+0x72>
 80044c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c2:	f000 fa99 	bl	80049f8 <__retarget_lock_release_recursive>
 80044c6:	4628      	mov	r0, r5
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da04      	bge.n	80044d8 <_puts_r+0x84>
 80044ce:	69a2      	ldr	r2, [r4, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	dc06      	bgt.n	80044e2 <_puts_r+0x8e>
 80044d4:	290a      	cmp	r1, #10
 80044d6:	d004      	beq.n	80044e2 <_puts_r+0x8e>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	7019      	strb	r1, [r3, #0]
 80044e0:	e7cf      	b.n	8004482 <_puts_r+0x2e>
 80044e2:	4622      	mov	r2, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f922 	bl	800472e <__swbuf_r>
 80044ea:	3001      	adds	r0, #1
 80044ec:	d1c9      	bne.n	8004482 <_puts_r+0x2e>
 80044ee:	e7df      	b.n	80044b0 <_puts_r+0x5c>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	250a      	movs	r5, #10
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	701d      	strb	r5, [r3, #0]
 80044fa:	e7db      	b.n	80044b4 <_puts_r+0x60>

080044fc <puts>:
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <puts+0xc>)
 80044fe:	4601      	mov	r1, r0
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	f7ff bfa7 	b.w	8004454 <_puts_r>
 8004506:	bf00      	nop
 8004508:	20000068 	.word	0x20000068

0800450c <setvbuf>:
 800450c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004510:	461d      	mov	r5, r3
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <setvbuf+0x158>)
 8004514:	681f      	ldr	r7, [r3, #0]
 8004516:	4604      	mov	r4, r0
 8004518:	460e      	mov	r6, r1
 800451a:	4690      	mov	r8, r2
 800451c:	b127      	cbz	r7, 8004528 <setvbuf+0x1c>
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	b913      	cbnz	r3, 8004528 <setvbuf+0x1c>
 8004522:	4638      	mov	r0, r7
 8004524:	f7ff ff4e 	bl	80043c4 <__sinit>
 8004528:	f1b8 0f02 	cmp.w	r8, #2
 800452c:	d006      	beq.n	800453c <setvbuf+0x30>
 800452e:	f1b8 0f01 	cmp.w	r8, #1
 8004532:	f200 8094 	bhi.w	800465e <setvbuf+0x152>
 8004536:	2d00      	cmp	r5, #0
 8004538:	f2c0 8091 	blt.w	800465e <setvbuf+0x152>
 800453c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800453e:	07da      	lsls	r2, r3, #31
 8004540:	d405      	bmi.n	800454e <setvbuf+0x42>
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	059b      	lsls	r3, r3, #22
 8004546:	d402      	bmi.n	800454e <setvbuf+0x42>
 8004548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800454a:	f000 fa54 	bl	80049f6 <__retarget_lock_acquire_recursive>
 800454e:	4621      	mov	r1, r4
 8004550:	4638      	mov	r0, r7
 8004552:	f001 f813 	bl	800557c <_fflush_r>
 8004556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004558:	b141      	cbz	r1, 800456c <setvbuf+0x60>
 800455a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800455e:	4299      	cmp	r1, r3
 8004560:	d002      	beq.n	8004568 <setvbuf+0x5c>
 8004562:	4638      	mov	r0, r7
 8004564:	f000 fa58 	bl	8004a18 <_free_r>
 8004568:	2300      	movs	r3, #0
 800456a:	6363      	str	r3, [r4, #52]	; 0x34
 800456c:	2300      	movs	r3, #0
 800456e:	61a3      	str	r3, [r4, #24]
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	0618      	lsls	r0, r3, #24
 8004576:	d503      	bpl.n	8004580 <setvbuf+0x74>
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	4638      	mov	r0, r7
 800457c:	f000 fa4c 	bl	8004a18 <_free_r>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	f1b8 0f02 	cmp.w	r8, #2
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	d05f      	beq.n	8004652 <setvbuf+0x146>
 8004592:	ab01      	add	r3, sp, #4
 8004594:	466a      	mov	r2, sp
 8004596:	4621      	mov	r1, r4
 8004598:	4638      	mov	r0, r7
 800459a:	f001 f817 	bl	80055cc <__swhatbuf_r>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	4318      	orrs	r0, r3
 80045a2:	81a0      	strh	r0, [r4, #12]
 80045a4:	bb2d      	cbnz	r5, 80045f2 <setvbuf+0xe6>
 80045a6:	9d00      	ldr	r5, [sp, #0]
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fa81 	bl	8004ab0 <malloc>
 80045ae:	4606      	mov	r6, r0
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d150      	bne.n	8004656 <setvbuf+0x14a>
 80045b4:	f8dd 9000 	ldr.w	r9, [sp]
 80045b8:	45a9      	cmp	r9, r5
 80045ba:	d13e      	bne.n	800463a <setvbuf+0x12e>
 80045bc:	f04f 35ff 	mov.w	r5, #4294967295
 80045c0:	2200      	movs	r2, #0
 80045c2:	60a2      	str	r2, [r4, #8]
 80045c4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80045c8:	6022      	str	r2, [r4, #0]
 80045ca:	6122      	str	r2, [r4, #16]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	6162      	str	r2, [r4, #20]
 80045d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d6:	f043 0302 	orr.w	r3, r3, #2
 80045da:	07d1      	lsls	r1, r2, #31
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	d404      	bmi.n	80045ea <setvbuf+0xde>
 80045e0:	059b      	lsls	r3, r3, #22
 80045e2:	d402      	bmi.n	80045ea <setvbuf+0xde>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f000 fa07 	bl	80049f8 <__retarget_lock_release_recursive>
 80045ea:	4628      	mov	r0, r5
 80045ec:	b003      	add	sp, #12
 80045ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d0d8      	beq.n	80045a8 <setvbuf+0x9c>
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	b913      	cbnz	r3, 8004600 <setvbuf+0xf4>
 80045fa:	4638      	mov	r0, r7
 80045fc:	f7ff fee2 	bl	80043c4 <__sinit>
 8004600:	f1b8 0f01 	cmp.w	r8, #1
 8004604:	bf08      	it	eq
 8004606:	89a3      	ldrheq	r3, [r4, #12]
 8004608:	6026      	str	r6, [r4, #0]
 800460a:	bf04      	itt	eq
 800460c:	f043 0301 	orreq.w	r3, r3, #1
 8004610:	81a3      	strheq	r3, [r4, #12]
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	f013 0208 	ands.w	r2, r3, #8
 8004618:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800461c:	d01d      	beq.n	800465a <setvbuf+0x14e>
 800461e:	07da      	lsls	r2, r3, #31
 8004620:	bf41      	itttt	mi
 8004622:	2200      	movmi	r2, #0
 8004624:	426d      	negmi	r5, r5
 8004626:	60a2      	strmi	r2, [r4, #8]
 8004628:	61a5      	strmi	r5, [r4, #24]
 800462a:	bf58      	it	pl
 800462c:	60a5      	strpl	r5, [r4, #8]
 800462e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004630:	f015 0501 	ands.w	r5, r5, #1
 8004634:	d0d4      	beq.n	80045e0 <setvbuf+0xd4>
 8004636:	2500      	movs	r5, #0
 8004638:	e7d7      	b.n	80045ea <setvbuf+0xde>
 800463a:	4648      	mov	r0, r9
 800463c:	f000 fa38 	bl	8004ab0 <malloc>
 8004640:	4606      	mov	r6, r0
 8004642:	2800      	cmp	r0, #0
 8004644:	d0ba      	beq.n	80045bc <setvbuf+0xb0>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	464d      	mov	r5, r9
 8004650:	e7d1      	b.n	80045f6 <setvbuf+0xea>
 8004652:	2500      	movs	r5, #0
 8004654:	e7b4      	b.n	80045c0 <setvbuf+0xb4>
 8004656:	46a9      	mov	r9, r5
 8004658:	e7f5      	b.n	8004646 <setvbuf+0x13a>
 800465a:	60a2      	str	r2, [r4, #8]
 800465c:	e7e7      	b.n	800462e <setvbuf+0x122>
 800465e:	f04f 35ff 	mov.w	r5, #4294967295
 8004662:	e7c2      	b.n	80045ea <setvbuf+0xde>
 8004664:	20000068 	.word	0x20000068

08004668 <siprintf>:
 8004668:	b40e      	push	{r1, r2, r3}
 800466a:	b500      	push	{lr}
 800466c:	b09c      	sub	sp, #112	; 0x70
 800466e:	ab1d      	add	r3, sp, #116	; 0x74
 8004670:	9002      	str	r0, [sp, #8]
 8004672:	9006      	str	r0, [sp, #24]
 8004674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004678:	4809      	ldr	r0, [pc, #36]	; (80046a0 <siprintf+0x38>)
 800467a:	9107      	str	r1, [sp, #28]
 800467c:	9104      	str	r1, [sp, #16]
 800467e:	4909      	ldr	r1, [pc, #36]	; (80046a4 <siprintf+0x3c>)
 8004680:	f853 2b04 	ldr.w	r2, [r3], #4
 8004684:	9105      	str	r1, [sp, #20]
 8004686:	6800      	ldr	r0, [r0, #0]
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	a902      	add	r1, sp, #8
 800468c:	f000 fb1e 	bl	8004ccc <_svfiprintf_r>
 8004690:	9b02      	ldr	r3, [sp, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	b01c      	add	sp, #112	; 0x70
 8004698:	f85d eb04 	ldr.w	lr, [sp], #4
 800469c:	b003      	add	sp, #12
 800469e:	4770      	bx	lr
 80046a0:	20000068 	.word	0x20000068
 80046a4:	ffff0208 	.word	0xffff0208

080046a8 <__sread>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	460c      	mov	r4, r1
 80046ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b0:	f000 f952 	bl	8004958 <_read_r>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	bfab      	itete	ge
 80046b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ba:	89a3      	ldrhlt	r3, [r4, #12]
 80046bc:	181b      	addge	r3, r3, r0
 80046be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046c2:	bfac      	ite	ge
 80046c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046c6:	81a3      	strhlt	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__swrite>:
 80046ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ce:	461f      	mov	r7, r3
 80046d0:	898b      	ldrh	r3, [r1, #12]
 80046d2:	05db      	lsls	r3, r3, #23
 80046d4:	4605      	mov	r5, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	4616      	mov	r6, r2
 80046da:	d505      	bpl.n	80046e8 <__swrite+0x1e>
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	2302      	movs	r3, #2
 80046e2:	2200      	movs	r2, #0
 80046e4:	f000 f926 	bl	8004934 <_lseek_r>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	4632      	mov	r2, r6
 80046f6:	463b      	mov	r3, r7
 80046f8:	4628      	mov	r0, r5
 80046fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fe:	f000 b93d 	b.w	800497c <_write_r>

08004702 <__sseek>:
 8004702:	b510      	push	{r4, lr}
 8004704:	460c      	mov	r4, r1
 8004706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470a:	f000 f913 	bl	8004934 <_lseek_r>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	bf15      	itete	ne
 8004714:	6560      	strne	r0, [r4, #84]	; 0x54
 8004716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800471a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800471e:	81a3      	strheq	r3, [r4, #12]
 8004720:	bf18      	it	ne
 8004722:	81a3      	strhne	r3, [r4, #12]
 8004724:	bd10      	pop	{r4, pc}

08004726 <__sclose>:
 8004726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472a:	f000 b89d 	b.w	8004868 <_close_r>

0800472e <__swbuf_r>:
 800472e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004730:	460e      	mov	r6, r1
 8004732:	4614      	mov	r4, r2
 8004734:	4605      	mov	r5, r0
 8004736:	b118      	cbz	r0, 8004740 <__swbuf_r+0x12>
 8004738:	6a03      	ldr	r3, [r0, #32]
 800473a:	b90b      	cbnz	r3, 8004740 <__swbuf_r+0x12>
 800473c:	f7ff fe42 	bl	80043c4 <__sinit>
 8004740:	69a3      	ldr	r3, [r4, #24]
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	071a      	lsls	r2, r3, #28
 8004748:	d525      	bpl.n	8004796 <__swbuf_r+0x68>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	b31b      	cbz	r3, 8004796 <__swbuf_r+0x68>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	6922      	ldr	r2, [r4, #16]
 8004752:	1a98      	subs	r0, r3, r2
 8004754:	6963      	ldr	r3, [r4, #20]
 8004756:	b2f6      	uxtb	r6, r6
 8004758:	4283      	cmp	r3, r0
 800475a:	4637      	mov	r7, r6
 800475c:	dc04      	bgt.n	8004768 <__swbuf_r+0x3a>
 800475e:	4621      	mov	r1, r4
 8004760:	4628      	mov	r0, r5
 8004762:	f000 ff0b 	bl	800557c <_fflush_r>
 8004766:	b9e0      	cbnz	r0, 80047a2 <__swbuf_r+0x74>
 8004768:	68a3      	ldr	r3, [r4, #8]
 800476a:	3b01      	subs	r3, #1
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	6022      	str	r2, [r4, #0]
 8004774:	701e      	strb	r6, [r3, #0]
 8004776:	6962      	ldr	r2, [r4, #20]
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	429a      	cmp	r2, r3
 800477c:	d004      	beq.n	8004788 <__swbuf_r+0x5a>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	07db      	lsls	r3, r3, #31
 8004782:	d506      	bpl.n	8004792 <__swbuf_r+0x64>
 8004784:	2e0a      	cmp	r6, #10
 8004786:	d104      	bne.n	8004792 <__swbuf_r+0x64>
 8004788:	4621      	mov	r1, r4
 800478a:	4628      	mov	r0, r5
 800478c:	f000 fef6 	bl	800557c <_fflush_r>
 8004790:	b938      	cbnz	r0, 80047a2 <__swbuf_r+0x74>
 8004792:	4638      	mov	r0, r7
 8004794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 f805 	bl	80047a8 <__swsetup_r>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d0d5      	beq.n	800474e <__swbuf_r+0x20>
 80047a2:	f04f 37ff 	mov.w	r7, #4294967295
 80047a6:	e7f4      	b.n	8004792 <__swbuf_r+0x64>

080047a8 <__swsetup_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <__swsetup_r+0xac>)
 80047ac:	4605      	mov	r5, r0
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	460c      	mov	r4, r1
 80047b2:	b118      	cbz	r0, 80047bc <__swsetup_r+0x14>
 80047b4:	6a03      	ldr	r3, [r0, #32]
 80047b6:	b90b      	cbnz	r3, 80047bc <__swsetup_r+0x14>
 80047b8:	f7ff fe04 	bl	80043c4 <__sinit>
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c2:	0718      	lsls	r0, r3, #28
 80047c4:	d422      	bmi.n	800480c <__swsetup_r+0x64>
 80047c6:	06d9      	lsls	r1, r3, #27
 80047c8:	d407      	bmi.n	80047da <__swsetup_r+0x32>
 80047ca:	2309      	movs	r3, #9
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e034      	b.n	8004844 <__swsetup_r+0x9c>
 80047da:	0758      	lsls	r0, r3, #29
 80047dc:	d512      	bpl.n	8004804 <__swsetup_r+0x5c>
 80047de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047e0:	b141      	cbz	r1, 80047f4 <__swsetup_r+0x4c>
 80047e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047e6:	4299      	cmp	r1, r3
 80047e8:	d002      	beq.n	80047f0 <__swsetup_r+0x48>
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 f914 	bl	8004a18 <_free_r>
 80047f0:	2300      	movs	r3, #0
 80047f2:	6363      	str	r3, [r4, #52]	; 0x34
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	2300      	movs	r3, #0
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f043 0308 	orr.w	r3, r3, #8
 800480a:	81a3      	strh	r3, [r4, #12]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b94b      	cbnz	r3, 8004824 <__swsetup_r+0x7c>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481a:	d003      	beq.n	8004824 <__swsetup_r+0x7c>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fefa 	bl	8005618 <__smakebuf_r>
 8004824:	89a0      	ldrh	r0, [r4, #12]
 8004826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800482a:	f010 0301 	ands.w	r3, r0, #1
 800482e:	d00a      	beq.n	8004846 <__swsetup_r+0x9e>
 8004830:	2300      	movs	r3, #0
 8004832:	60a3      	str	r3, [r4, #8]
 8004834:	6963      	ldr	r3, [r4, #20]
 8004836:	425b      	negs	r3, r3
 8004838:	61a3      	str	r3, [r4, #24]
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	b943      	cbnz	r3, 8004850 <__swsetup_r+0xa8>
 800483e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004842:	d1c4      	bne.n	80047ce <__swsetup_r+0x26>
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	0781      	lsls	r1, r0, #30
 8004848:	bf58      	it	pl
 800484a:	6963      	ldrpl	r3, [r4, #20]
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	e7f4      	b.n	800483a <__swsetup_r+0x92>
 8004850:	2000      	movs	r0, #0
 8004852:	e7f7      	b.n	8004844 <__swsetup_r+0x9c>
 8004854:	20000068 	.word	0x20000068

08004858 <memset>:
 8004858:	4402      	add	r2, r0
 800485a:	4603      	mov	r3, r0
 800485c:	4293      	cmp	r3, r2
 800485e:	d100      	bne.n	8004862 <memset+0xa>
 8004860:	4770      	bx	lr
 8004862:	f803 1b01 	strb.w	r1, [r3], #1
 8004866:	e7f9      	b.n	800485c <memset+0x4>

08004868 <_close_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d06      	ldr	r5, [pc, #24]	; (8004884 <_close_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fc faed 	bl	8000e52 <_close>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_close_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_close_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	20004264 	.word	0x20004264

08004888 <_reclaim_reent>:
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <_reclaim_reent+0xa8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4283      	cmp	r3, r0
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	d04b      	beq.n	800492c <_reclaim_reent+0xa4>
 8004894:	69c3      	ldr	r3, [r0, #28]
 8004896:	b143      	cbz	r3, 80048aa <_reclaim_reent+0x22>
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d144      	bne.n	8004928 <_reclaim_reent+0xa0>
 800489e:	69e3      	ldr	r3, [r4, #28]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	b111      	cbz	r1, 80048aa <_reclaim_reent+0x22>
 80048a4:	4620      	mov	r0, r4
 80048a6:	f000 f8b7 	bl	8004a18 <_free_r>
 80048aa:	6961      	ldr	r1, [r4, #20]
 80048ac:	b111      	cbz	r1, 80048b4 <_reclaim_reent+0x2c>
 80048ae:	4620      	mov	r0, r4
 80048b0:	f000 f8b2 	bl	8004a18 <_free_r>
 80048b4:	69e1      	ldr	r1, [r4, #28]
 80048b6:	b111      	cbz	r1, 80048be <_reclaim_reent+0x36>
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 f8ad 	bl	8004a18 <_free_r>
 80048be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80048c0:	b111      	cbz	r1, 80048c8 <_reclaim_reent+0x40>
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 f8a8 	bl	8004a18 <_free_r>
 80048c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ca:	b111      	cbz	r1, 80048d2 <_reclaim_reent+0x4a>
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f8a3 	bl	8004a18 <_free_r>
 80048d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048d4:	b111      	cbz	r1, 80048dc <_reclaim_reent+0x54>
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 f89e 	bl	8004a18 <_free_r>
 80048dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80048de:	b111      	cbz	r1, 80048e6 <_reclaim_reent+0x5e>
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f899 	bl	8004a18 <_free_r>
 80048e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80048e8:	b111      	cbz	r1, 80048f0 <_reclaim_reent+0x68>
 80048ea:	4620      	mov	r0, r4
 80048ec:	f000 f894 	bl	8004a18 <_free_r>
 80048f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80048f2:	b111      	cbz	r1, 80048fa <_reclaim_reent+0x72>
 80048f4:	4620      	mov	r0, r4
 80048f6:	f000 f88f 	bl	8004a18 <_free_r>
 80048fa:	6a23      	ldr	r3, [r4, #32]
 80048fc:	b1b3      	cbz	r3, 800492c <_reclaim_reent+0xa4>
 80048fe:	4620      	mov	r0, r4
 8004900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004904:	4718      	bx	r3
 8004906:	5949      	ldr	r1, [r1, r5]
 8004908:	b941      	cbnz	r1, 800491c <_reclaim_reent+0x94>
 800490a:	3504      	adds	r5, #4
 800490c:	69e3      	ldr	r3, [r4, #28]
 800490e:	2d80      	cmp	r5, #128	; 0x80
 8004910:	68d9      	ldr	r1, [r3, #12]
 8004912:	d1f8      	bne.n	8004906 <_reclaim_reent+0x7e>
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f87f 	bl	8004a18 <_free_r>
 800491a:	e7c0      	b.n	800489e <_reclaim_reent+0x16>
 800491c:	680e      	ldr	r6, [r1, #0]
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f87a 	bl	8004a18 <_free_r>
 8004924:	4631      	mov	r1, r6
 8004926:	e7ef      	b.n	8004908 <_reclaim_reent+0x80>
 8004928:	2500      	movs	r5, #0
 800492a:	e7ef      	b.n	800490c <_reclaim_reent+0x84>
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	bf00      	nop
 8004930:	20000068 	.word	0x20000068

08004934 <_lseek_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	; (8004954 <_lseek_r+0x20>)
 8004938:	4604      	mov	r4, r0
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	2200      	movs	r2, #0
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7fc faac 	bl	8000ea0 <_lseek>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_lseek_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_lseek_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20004264 	.word	0x20004264

08004958 <_read_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d07      	ldr	r5, [pc, #28]	; (8004978 <_read_r+0x20>)
 800495c:	4604      	mov	r4, r0
 800495e:	4608      	mov	r0, r1
 8004960:	4611      	mov	r1, r2
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7fc fa3a 	bl	8000de0 <_read>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_read_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_read_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	20004264 	.word	0x20004264

0800497c <_write_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d07      	ldr	r5, [pc, #28]	; (800499c <_write_r+0x20>)
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	2200      	movs	r2, #0
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f7fc fa45 	bl	8000e1a <_write>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_write_r+0x1e>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_write_r+0x1e>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	20004264 	.word	0x20004264

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	; (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000068 	.word	0x20000068

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	; (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	; (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	; (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	; (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 feea 	bl	8005798 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08005920 	.word	0x08005920
 80049e8:	08005920 	.word	0x08005920
 80049ec:	08005920 	.word	0x08005920
 80049f0:	08005924 	.word	0x08005924

080049f4 <__retarget_lock_init_recursive>:
 80049f4:	4770      	bx	lr

080049f6 <__retarget_lock_acquire_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_release_recursive>:
 80049f8:	4770      	bx	lr

080049fa <memcpy>:
 80049fa:	440a      	add	r2, r1
 80049fc:	4291      	cmp	r1, r2
 80049fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a02:	d100      	bne.n	8004a06 <memcpy+0xc>
 8004a04:	4770      	bx	lr
 8004a06:	b510      	push	{r4, lr}
 8004a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a10:	4291      	cmp	r1, r2
 8004a12:	d1f9      	bne.n	8004a08 <memcpy+0xe>
 8004a14:	bd10      	pop	{r4, pc}
	...

08004a18 <_free_r>:
 8004a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a1a:	2900      	cmp	r1, #0
 8004a1c:	d044      	beq.n	8004aa8 <_free_r+0x90>
 8004a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a22:	9001      	str	r0, [sp, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f1a1 0404 	sub.w	r4, r1, #4
 8004a2a:	bfb8      	it	lt
 8004a2c:	18e4      	addlt	r4, r4, r3
 8004a2e:	f000 f8e7 	bl	8004c00 <__malloc_lock>
 8004a32:	4a1e      	ldr	r2, [pc, #120]	; (8004aac <_free_r+0x94>)
 8004a34:	9801      	ldr	r0, [sp, #4]
 8004a36:	6813      	ldr	r3, [r2, #0]
 8004a38:	b933      	cbnz	r3, 8004a48 <_free_r+0x30>
 8004a3a:	6063      	str	r3, [r4, #4]
 8004a3c:	6014      	str	r4, [r2, #0]
 8004a3e:	b003      	add	sp, #12
 8004a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a44:	f000 b8e2 	b.w	8004c0c <__malloc_unlock>
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	d908      	bls.n	8004a5e <_free_r+0x46>
 8004a4c:	6825      	ldr	r5, [r4, #0]
 8004a4e:	1961      	adds	r1, r4, r5
 8004a50:	428b      	cmp	r3, r1
 8004a52:	bf01      	itttt	eq
 8004a54:	6819      	ldreq	r1, [r3, #0]
 8004a56:	685b      	ldreq	r3, [r3, #4]
 8004a58:	1949      	addeq	r1, r1, r5
 8004a5a:	6021      	streq	r1, [r4, #0]
 8004a5c:	e7ed      	b.n	8004a3a <_free_r+0x22>
 8004a5e:	461a      	mov	r2, r3
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b10b      	cbz	r3, 8004a68 <_free_r+0x50>
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	d9fa      	bls.n	8004a5e <_free_r+0x46>
 8004a68:	6811      	ldr	r1, [r2, #0]
 8004a6a:	1855      	adds	r5, r2, r1
 8004a6c:	42a5      	cmp	r5, r4
 8004a6e:	d10b      	bne.n	8004a88 <_free_r+0x70>
 8004a70:	6824      	ldr	r4, [r4, #0]
 8004a72:	4421      	add	r1, r4
 8004a74:	1854      	adds	r4, r2, r1
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	6011      	str	r1, [r2, #0]
 8004a7a:	d1e0      	bne.n	8004a3e <_free_r+0x26>
 8004a7c:	681c      	ldr	r4, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	6053      	str	r3, [r2, #4]
 8004a82:	440c      	add	r4, r1
 8004a84:	6014      	str	r4, [r2, #0]
 8004a86:	e7da      	b.n	8004a3e <_free_r+0x26>
 8004a88:	d902      	bls.n	8004a90 <_free_r+0x78>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	6003      	str	r3, [r0, #0]
 8004a8e:	e7d6      	b.n	8004a3e <_free_r+0x26>
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	1961      	adds	r1, r4, r5
 8004a94:	428b      	cmp	r3, r1
 8004a96:	bf04      	itt	eq
 8004a98:	6819      	ldreq	r1, [r3, #0]
 8004a9a:	685b      	ldreq	r3, [r3, #4]
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	bf04      	itt	eq
 8004aa0:	1949      	addeq	r1, r1, r5
 8004aa2:	6021      	streq	r1, [r4, #0]
 8004aa4:	6054      	str	r4, [r2, #4]
 8004aa6:	e7ca      	b.n	8004a3e <_free_r+0x26>
 8004aa8:	b003      	add	sp, #12
 8004aaa:	bd30      	pop	{r4, r5, pc}
 8004aac:	2000426c 	.word	0x2000426c

08004ab0 <malloc>:
 8004ab0:	4b02      	ldr	r3, [pc, #8]	; (8004abc <malloc+0xc>)
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	f000 b823 	b.w	8004b00 <_malloc_r>
 8004aba:	bf00      	nop
 8004abc:	20000068 	.word	0x20000068

08004ac0 <sbrk_aligned>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4e0e      	ldr	r6, [pc, #56]	; (8004afc <sbrk_aligned+0x3c>)
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	6831      	ldr	r1, [r6, #0]
 8004ac8:	4605      	mov	r5, r0
 8004aca:	b911      	cbnz	r1, 8004ad2 <sbrk_aligned+0x12>
 8004acc:	f000 fe1c 	bl	8005708 <_sbrk_r>
 8004ad0:	6030      	str	r0, [r6, #0]
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 fe17 	bl	8005708 <_sbrk_r>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	d00a      	beq.n	8004af4 <sbrk_aligned+0x34>
 8004ade:	1cc4      	adds	r4, r0, #3
 8004ae0:	f024 0403 	bic.w	r4, r4, #3
 8004ae4:	42a0      	cmp	r0, r4
 8004ae6:	d007      	beq.n	8004af8 <sbrk_aligned+0x38>
 8004ae8:	1a21      	subs	r1, r4, r0
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 fe0c 	bl	8005708 <_sbrk_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d101      	bne.n	8004af8 <sbrk_aligned+0x38>
 8004af4:	f04f 34ff 	mov.w	r4, #4294967295
 8004af8:	4620      	mov	r0, r4
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	20004270 	.word	0x20004270

08004b00 <_malloc_r>:
 8004b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b04:	1ccd      	adds	r5, r1, #3
 8004b06:	f025 0503 	bic.w	r5, r5, #3
 8004b0a:	3508      	adds	r5, #8
 8004b0c:	2d0c      	cmp	r5, #12
 8004b0e:	bf38      	it	cc
 8004b10:	250c      	movcc	r5, #12
 8004b12:	2d00      	cmp	r5, #0
 8004b14:	4607      	mov	r7, r0
 8004b16:	db01      	blt.n	8004b1c <_malloc_r+0x1c>
 8004b18:	42a9      	cmp	r1, r5
 8004b1a:	d905      	bls.n	8004b28 <_malloc_r+0x28>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	2600      	movs	r6, #0
 8004b22:	4630      	mov	r0, r6
 8004b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bfc <_malloc_r+0xfc>
 8004b2c:	f000 f868 	bl	8004c00 <__malloc_lock>
 8004b30:	f8d8 3000 	ldr.w	r3, [r8]
 8004b34:	461c      	mov	r4, r3
 8004b36:	bb5c      	cbnz	r4, 8004b90 <_malloc_r+0x90>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7ff ffc0 	bl	8004ac0 <sbrk_aligned>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	4604      	mov	r4, r0
 8004b44:	d155      	bne.n	8004bf2 <_malloc_r+0xf2>
 8004b46:	f8d8 4000 	ldr.w	r4, [r8]
 8004b4a:	4626      	mov	r6, r4
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	d145      	bne.n	8004bdc <_malloc_r+0xdc>
 8004b50:	2c00      	cmp	r4, #0
 8004b52:	d048      	beq.n	8004be6 <_malloc_r+0xe6>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	4631      	mov	r1, r6
 8004b58:	4638      	mov	r0, r7
 8004b5a:	eb04 0903 	add.w	r9, r4, r3
 8004b5e:	f000 fdd3 	bl	8005708 <_sbrk_r>
 8004b62:	4581      	cmp	r9, r0
 8004b64:	d13f      	bne.n	8004be6 <_malloc_r+0xe6>
 8004b66:	6821      	ldr	r1, [r4, #0]
 8004b68:	1a6d      	subs	r5, r5, r1
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ffa7 	bl	8004ac0 <sbrk_aligned>
 8004b72:	3001      	adds	r0, #1
 8004b74:	d037      	beq.n	8004be6 <_malloc_r+0xe6>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	442b      	add	r3, r5
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d038      	beq.n	8004bf6 <_malloc_r+0xf6>
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	42a2      	cmp	r2, r4
 8004b88:	d12b      	bne.n	8004be2 <_malloc_r+0xe2>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	e00f      	b.n	8004bb0 <_malloc_r+0xb0>
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	1b52      	subs	r2, r2, r5
 8004b94:	d41f      	bmi.n	8004bd6 <_malloc_r+0xd6>
 8004b96:	2a0b      	cmp	r2, #11
 8004b98:	d917      	bls.n	8004bca <_malloc_r+0xca>
 8004b9a:	1961      	adds	r1, r4, r5
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	6025      	str	r5, [r4, #0]
 8004ba0:	bf18      	it	ne
 8004ba2:	6059      	strne	r1, [r3, #4]
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	bf08      	it	eq
 8004ba8:	f8c8 1000 	streq.w	r1, [r8]
 8004bac:	5162      	str	r2, [r4, r5]
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f104 060b 	add.w	r6, r4, #11
 8004bb6:	f000 f829 	bl	8004c0c <__malloc_unlock>
 8004bba:	f026 0607 	bic.w	r6, r6, #7
 8004bbe:	1d23      	adds	r3, r4, #4
 8004bc0:	1af2      	subs	r2, r6, r3
 8004bc2:	d0ae      	beq.n	8004b22 <_malloc_r+0x22>
 8004bc4:	1b9b      	subs	r3, r3, r6
 8004bc6:	50a3      	str	r3, [r4, r2]
 8004bc8:	e7ab      	b.n	8004b22 <_malloc_r+0x22>
 8004bca:	42a3      	cmp	r3, r4
 8004bcc:	6862      	ldr	r2, [r4, #4]
 8004bce:	d1dd      	bne.n	8004b8c <_malloc_r+0x8c>
 8004bd0:	f8c8 2000 	str.w	r2, [r8]
 8004bd4:	e7ec      	b.n	8004bb0 <_malloc_r+0xb0>
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	6864      	ldr	r4, [r4, #4]
 8004bda:	e7ac      	b.n	8004b36 <_malloc_r+0x36>
 8004bdc:	4634      	mov	r4, r6
 8004bde:	6876      	ldr	r6, [r6, #4]
 8004be0:	e7b4      	b.n	8004b4c <_malloc_r+0x4c>
 8004be2:	4613      	mov	r3, r2
 8004be4:	e7cc      	b.n	8004b80 <_malloc_r+0x80>
 8004be6:	230c      	movs	r3, #12
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4638      	mov	r0, r7
 8004bec:	f000 f80e 	bl	8004c0c <__malloc_unlock>
 8004bf0:	e797      	b.n	8004b22 <_malloc_r+0x22>
 8004bf2:	6025      	str	r5, [r4, #0]
 8004bf4:	e7dc      	b.n	8004bb0 <_malloc_r+0xb0>
 8004bf6:	605b      	str	r3, [r3, #4]
 8004bf8:	deff      	udf	#255	; 0xff
 8004bfa:	bf00      	nop
 8004bfc:	2000426c 	.word	0x2000426c

08004c00 <__malloc_lock>:
 8004c00:	4801      	ldr	r0, [pc, #4]	; (8004c08 <__malloc_lock+0x8>)
 8004c02:	f7ff bef8 	b.w	80049f6 <__retarget_lock_acquire_recursive>
 8004c06:	bf00      	nop
 8004c08:	20004268 	.word	0x20004268

08004c0c <__malloc_unlock>:
 8004c0c:	4801      	ldr	r0, [pc, #4]	; (8004c14 <__malloc_unlock+0x8>)
 8004c0e:	f7ff bef3 	b.w	80049f8 <__retarget_lock_release_recursive>
 8004c12:	bf00      	nop
 8004c14:	20004268 	.word	0x20004268

08004c18 <__ssputs_r>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	688e      	ldr	r6, [r1, #8]
 8004c1e:	461f      	mov	r7, r3
 8004c20:	42be      	cmp	r6, r7
 8004c22:	680b      	ldr	r3, [r1, #0]
 8004c24:	4682      	mov	sl, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	4690      	mov	r8, r2
 8004c2a:	d82c      	bhi.n	8004c86 <__ssputs_r+0x6e>
 8004c2c:	898a      	ldrh	r2, [r1, #12]
 8004c2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c32:	d026      	beq.n	8004c82 <__ssputs_r+0x6a>
 8004c34:	6965      	ldr	r5, [r4, #20]
 8004c36:	6909      	ldr	r1, [r1, #16]
 8004c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c3c:	eba3 0901 	sub.w	r9, r3, r1
 8004c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c44:	1c7b      	adds	r3, r7, #1
 8004c46:	444b      	add	r3, r9
 8004c48:	106d      	asrs	r5, r5, #1
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	bf38      	it	cc
 8004c4e:	461d      	movcc	r5, r3
 8004c50:	0553      	lsls	r3, r2, #21
 8004c52:	d527      	bpl.n	8004ca4 <__ssputs_r+0x8c>
 8004c54:	4629      	mov	r1, r5
 8004c56:	f7ff ff53 	bl	8004b00 <_malloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	b360      	cbz	r0, 8004cb8 <__ssputs_r+0xa0>
 8004c5e:	6921      	ldr	r1, [r4, #16]
 8004c60:	464a      	mov	r2, r9
 8004c62:	f7ff feca 	bl	80049fa <memcpy>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	6126      	str	r6, [r4, #16]
 8004c74:	6165      	str	r5, [r4, #20]
 8004c76:	444e      	add	r6, r9
 8004c78:	eba5 0509 	sub.w	r5, r5, r9
 8004c7c:	6026      	str	r6, [r4, #0]
 8004c7e:	60a5      	str	r5, [r4, #8]
 8004c80:	463e      	mov	r6, r7
 8004c82:	42be      	cmp	r6, r7
 8004c84:	d900      	bls.n	8004c88 <__ssputs_r+0x70>
 8004c86:	463e      	mov	r6, r7
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	f000 fcff 	bl	8005690 <memmove>
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	1b9b      	subs	r3, r3, r6
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	4433      	add	r3, r6
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	462a      	mov	r2, r5
 8004ca6:	f000 fd3f 	bl	8005728 <_realloc_r>
 8004caa:	4606      	mov	r6, r0
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d1e0      	bne.n	8004c72 <__ssputs_r+0x5a>
 8004cb0:	6921      	ldr	r1, [r4, #16]
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f7ff feb0 	bl	8004a18 <_free_r>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	f8ca 3000 	str.w	r3, [sl]
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e7e9      	b.n	8004ca0 <__ssputs_r+0x88>

08004ccc <_svfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	898b      	ldrh	r3, [r1, #12]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	b09d      	sub	sp, #116	; 0x74
 8004cd8:	4607      	mov	r7, r0
 8004cda:	460d      	mov	r5, r1
 8004cdc:	4614      	mov	r4, r2
 8004cde:	d50e      	bpl.n	8004cfe <_svfiprintf_r+0x32>
 8004ce0:	690b      	ldr	r3, [r1, #16]
 8004ce2:	b963      	cbnz	r3, 8004cfe <_svfiprintf_r+0x32>
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	f7ff ff0b 	bl	8004b00 <_malloc_r>
 8004cea:	6028      	str	r0, [r5, #0]
 8004cec:	6128      	str	r0, [r5, #16]
 8004cee:	b920      	cbnz	r0, 8004cfa <_svfiprintf_r+0x2e>
 8004cf0:	230c      	movs	r3, #12
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e0d0      	b.n	8004e9c <_svfiprintf_r+0x1d0>
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	616b      	str	r3, [r5, #20]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9309      	str	r3, [sp, #36]	; 0x24
 8004d02:	2320      	movs	r3, #32
 8004d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0c:	2330      	movs	r3, #48	; 0x30
 8004d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004eb4 <_svfiprintf_r+0x1e8>
 8004d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d16:	f04f 0901 	mov.w	r9, #1
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	469a      	mov	sl, r3
 8004d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d22:	b10a      	cbz	r2, 8004d28 <_svfiprintf_r+0x5c>
 8004d24:	2a25      	cmp	r2, #37	; 0x25
 8004d26:	d1f9      	bne.n	8004d1c <_svfiprintf_r+0x50>
 8004d28:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2c:	d00b      	beq.n	8004d46 <_svfiprintf_r+0x7a>
 8004d2e:	465b      	mov	r3, fp
 8004d30:	4622      	mov	r2, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	4638      	mov	r0, r7
 8004d36:	f7ff ff6f 	bl	8004c18 <__ssputs_r>
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f000 80a9 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d42:	445a      	add	r2, fp
 8004d44:	9209      	str	r2, [sp, #36]	; 0x24
 8004d46:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80a1 	beq.w	8004e92 <_svfiprintf_r+0x1c6>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d5a:	f10a 0a01 	add.w	sl, sl, #1
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	9307      	str	r3, [sp, #28]
 8004d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d66:	931a      	str	r3, [sp, #104]	; 0x68
 8004d68:	4654      	mov	r4, sl
 8004d6a:	2205      	movs	r2, #5
 8004d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d70:	4850      	ldr	r0, [pc, #320]	; (8004eb4 <_svfiprintf_r+0x1e8>)
 8004d72:	f7fb fa35 	bl	80001e0 <memchr>
 8004d76:	9a04      	ldr	r2, [sp, #16]
 8004d78:	b9d8      	cbnz	r0, 8004db2 <_svfiprintf_r+0xe6>
 8004d7a:	06d0      	lsls	r0, r2, #27
 8004d7c:	bf44      	itt	mi
 8004d7e:	2320      	movmi	r3, #32
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d84:	0711      	lsls	r1, r2, #28
 8004d86:	bf44      	itt	mi
 8004d88:	232b      	movmi	r3, #43	; 0x2b
 8004d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d92:	2b2a      	cmp	r3, #42	; 0x2a
 8004d94:	d015      	beq.n	8004dc2 <_svfiprintf_r+0xf6>
 8004d96:	9a07      	ldr	r2, [sp, #28]
 8004d98:	4654      	mov	r4, sl
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f04f 0c0a 	mov.w	ip, #10
 8004da0:	4621      	mov	r1, r4
 8004da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da6:	3b30      	subs	r3, #48	; 0x30
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d94d      	bls.n	8004e48 <_svfiprintf_r+0x17c>
 8004dac:	b1b0      	cbz	r0, 8004ddc <_svfiprintf_r+0x110>
 8004dae:	9207      	str	r2, [sp, #28]
 8004db0:	e014      	b.n	8004ddc <_svfiprintf_r+0x110>
 8004db2:	eba0 0308 	sub.w	r3, r0, r8
 8004db6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	46a2      	mov	sl, r4
 8004dc0:	e7d2      	b.n	8004d68 <_svfiprintf_r+0x9c>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	1d19      	adds	r1, r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9103      	str	r1, [sp, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bfbb      	ittet	lt
 8004dce:	425b      	neglt	r3, r3
 8004dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd4:	9307      	strge	r3, [sp, #28]
 8004dd6:	9307      	strlt	r3, [sp, #28]
 8004dd8:	bfb8      	it	lt
 8004dda:	9204      	strlt	r2, [sp, #16]
 8004ddc:	7823      	ldrb	r3, [r4, #0]
 8004dde:	2b2e      	cmp	r3, #46	; 0x2e
 8004de0:	d10c      	bne.n	8004dfc <_svfiprintf_r+0x130>
 8004de2:	7863      	ldrb	r3, [r4, #1]
 8004de4:	2b2a      	cmp	r3, #42	; 0x2a
 8004de6:	d134      	bne.n	8004e52 <_svfiprintf_r+0x186>
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	9203      	str	r2, [sp, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bfb8      	it	lt
 8004df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004df8:	3402      	adds	r4, #2
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ec4 <_svfiprintf_r+0x1f8>
 8004e00:	7821      	ldrb	r1, [r4, #0]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4650      	mov	r0, sl
 8004e06:	f7fb f9eb 	bl	80001e0 <memchr>
 8004e0a:	b138      	cbz	r0, 8004e1c <_svfiprintf_r+0x150>
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	eba0 000a 	sub.w	r0, r0, sl
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	4082      	lsls	r2, r0
 8004e16:	4313      	orrs	r3, r2
 8004e18:	3401      	adds	r4, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	4825      	ldr	r0, [pc, #148]	; (8004eb8 <_svfiprintf_r+0x1ec>)
 8004e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e26:	2206      	movs	r2, #6
 8004e28:	f7fb f9da 	bl	80001e0 <memchr>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d038      	beq.n	8004ea2 <_svfiprintf_r+0x1d6>
 8004e30:	4b22      	ldr	r3, [pc, #136]	; (8004ebc <_svfiprintf_r+0x1f0>)
 8004e32:	bb1b      	cbnz	r3, 8004e7c <_svfiprintf_r+0x1b0>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	3307      	adds	r3, #7
 8004e38:	f023 0307 	bic.w	r3, r3, #7
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e42:	4433      	add	r3, r6
 8004e44:	9309      	str	r3, [sp, #36]	; 0x24
 8004e46:	e768      	b.n	8004d1a <_svfiprintf_r+0x4e>
 8004e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	2001      	movs	r0, #1
 8004e50:	e7a6      	b.n	8004da0 <_svfiprintf_r+0xd4>
 8004e52:	2300      	movs	r3, #0
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f04f 0c0a 	mov.w	ip, #10
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e64:	3a30      	subs	r2, #48	; 0x30
 8004e66:	2a09      	cmp	r2, #9
 8004e68:	d903      	bls.n	8004e72 <_svfiprintf_r+0x1a6>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0c6      	beq.n	8004dfc <_svfiprintf_r+0x130>
 8004e6e:	9105      	str	r1, [sp, #20]
 8004e70:	e7c4      	b.n	8004dfc <_svfiprintf_r+0x130>
 8004e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e76:	4604      	mov	r4, r0
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7f0      	b.n	8004e5e <_svfiprintf_r+0x192>
 8004e7c:	ab03      	add	r3, sp, #12
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004e84:	a904      	add	r1, sp, #16
 8004e86:	4638      	mov	r0, r7
 8004e88:	f3af 8000 	nop.w
 8004e8c:	1c42      	adds	r2, r0, #1
 8004e8e:	4606      	mov	r6, r0
 8004e90:	d1d6      	bne.n	8004e40 <_svfiprintf_r+0x174>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	065b      	lsls	r3, r3, #25
 8004e96:	f53f af2d 	bmi.w	8004cf4 <_svfiprintf_r+0x28>
 8004e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e9c:	b01d      	add	sp, #116	; 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <_svfiprintf_r+0x1f4>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4638      	mov	r0, r7
 8004eae:	f000 f9bd 	bl	800522c <_printf_i>
 8004eb2:	e7eb      	b.n	8004e8c <_svfiprintf_r+0x1c0>
 8004eb4:	080058e4 	.word	0x080058e4
 8004eb8:	080058ee 	.word	0x080058ee
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c19 	.word	0x08004c19
 8004ec4:	080058ea 	.word	0x080058ea

08004ec8 <__sfputc_r>:
 8004ec8:	6893      	ldr	r3, [r2, #8]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	b410      	push	{r4}
 8004ed0:	6093      	str	r3, [r2, #8]
 8004ed2:	da08      	bge.n	8004ee6 <__sfputc_r+0x1e>
 8004ed4:	6994      	ldr	r4, [r2, #24]
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	db01      	blt.n	8004ede <__sfputc_r+0x16>
 8004eda:	290a      	cmp	r1, #10
 8004edc:	d103      	bne.n	8004ee6 <__sfputc_r+0x1e>
 8004ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ee2:	f7ff bc24 	b.w	800472e <__swbuf_r>
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	1c58      	adds	r0, r3, #1
 8004eea:	6010      	str	r0, [r2, #0]
 8004eec:	7019      	strb	r1, [r3, #0]
 8004eee:	4608      	mov	r0, r1
 8004ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <__sfputs_r>:
 8004ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460f      	mov	r7, r1
 8004efc:	4614      	mov	r4, r2
 8004efe:	18d5      	adds	r5, r2, r3
 8004f00:	42ac      	cmp	r4, r5
 8004f02:	d101      	bne.n	8004f08 <__sfputs_r+0x12>
 8004f04:	2000      	movs	r0, #0
 8004f06:	e007      	b.n	8004f18 <__sfputs_r+0x22>
 8004f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f0c:	463a      	mov	r2, r7
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f7ff ffda 	bl	8004ec8 <__sfputc_r>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d1f3      	bne.n	8004f00 <__sfputs_r+0xa>
 8004f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f1c <_vfiprintf_r>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	460d      	mov	r5, r1
 8004f22:	b09d      	sub	sp, #116	; 0x74
 8004f24:	4614      	mov	r4, r2
 8004f26:	4698      	mov	r8, r3
 8004f28:	4606      	mov	r6, r0
 8004f2a:	b118      	cbz	r0, 8004f34 <_vfiprintf_r+0x18>
 8004f2c:	6a03      	ldr	r3, [r0, #32]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <_vfiprintf_r+0x18>
 8004f30:	f7ff fa48 	bl	80043c4 <__sinit>
 8004f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f36:	07d9      	lsls	r1, r3, #31
 8004f38:	d405      	bmi.n	8004f46 <_vfiprintf_r+0x2a>
 8004f3a:	89ab      	ldrh	r3, [r5, #12]
 8004f3c:	059a      	lsls	r2, r3, #22
 8004f3e:	d402      	bmi.n	8004f46 <_vfiprintf_r+0x2a>
 8004f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f42:	f7ff fd58 	bl	80049f6 <__retarget_lock_acquire_recursive>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	d501      	bpl.n	8004f50 <_vfiprintf_r+0x34>
 8004f4c:	692b      	ldr	r3, [r5, #16]
 8004f4e:	b99b      	cbnz	r3, 8004f78 <_vfiprintf_r+0x5c>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4630      	mov	r0, r6
 8004f54:	f7ff fc28 	bl	80047a8 <__swsetup_r>
 8004f58:	b170      	cbz	r0, 8004f78 <_vfiprintf_r+0x5c>
 8004f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f5c:	07dc      	lsls	r4, r3, #31
 8004f5e:	d504      	bpl.n	8004f6a <_vfiprintf_r+0x4e>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	b01d      	add	sp, #116	; 0x74
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	0598      	lsls	r0, r3, #22
 8004f6e:	d4f7      	bmi.n	8004f60 <_vfiprintf_r+0x44>
 8004f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f72:	f7ff fd41 	bl	80049f8 <__retarget_lock_release_recursive>
 8004f76:	e7f3      	b.n	8004f60 <_vfiprintf_r+0x44>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f86:	2330      	movs	r3, #48	; 0x30
 8004f88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800513c <_vfiprintf_r+0x220>
 8004f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f90:	f04f 0901 	mov.w	r9, #1
 8004f94:	4623      	mov	r3, r4
 8004f96:	469a      	mov	sl, r3
 8004f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f9c:	b10a      	cbz	r2, 8004fa2 <_vfiprintf_r+0x86>
 8004f9e:	2a25      	cmp	r2, #37	; 0x25
 8004fa0:	d1f9      	bne.n	8004f96 <_vfiprintf_r+0x7a>
 8004fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fa6:	d00b      	beq.n	8004fc0 <_vfiprintf_r+0xa4>
 8004fa8:	465b      	mov	r3, fp
 8004faa:	4622      	mov	r2, r4
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa1 	bl	8004ef6 <__sfputs_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f000 80a9 	beq.w	800510c <_vfiprintf_r+0x1f0>
 8004fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fbc:	445a      	add	r2, fp
 8004fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a1 	beq.w	800510c <_vfiprintf_r+0x1f0>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fd4:	f10a 0a01 	add.w	sl, sl, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fe2:	4654      	mov	r4, sl
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fea:	4854      	ldr	r0, [pc, #336]	; (800513c <_vfiprintf_r+0x220>)
 8004fec:	f7fb f8f8 	bl	80001e0 <memchr>
 8004ff0:	9a04      	ldr	r2, [sp, #16]
 8004ff2:	b9d8      	cbnz	r0, 800502c <_vfiprintf_r+0x110>
 8004ff4:	06d1      	lsls	r1, r2, #27
 8004ff6:	bf44      	itt	mi
 8004ff8:	2320      	movmi	r3, #32
 8004ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ffe:	0713      	lsls	r3, r2, #28
 8005000:	bf44      	itt	mi
 8005002:	232b      	movmi	r3, #43	; 0x2b
 8005004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005008:	f89a 3000 	ldrb.w	r3, [sl]
 800500c:	2b2a      	cmp	r3, #42	; 0x2a
 800500e:	d015      	beq.n	800503c <_vfiprintf_r+0x120>
 8005010:	9a07      	ldr	r2, [sp, #28]
 8005012:	4654      	mov	r4, sl
 8005014:	2000      	movs	r0, #0
 8005016:	f04f 0c0a 	mov.w	ip, #10
 800501a:	4621      	mov	r1, r4
 800501c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005020:	3b30      	subs	r3, #48	; 0x30
 8005022:	2b09      	cmp	r3, #9
 8005024:	d94d      	bls.n	80050c2 <_vfiprintf_r+0x1a6>
 8005026:	b1b0      	cbz	r0, 8005056 <_vfiprintf_r+0x13a>
 8005028:	9207      	str	r2, [sp, #28]
 800502a:	e014      	b.n	8005056 <_vfiprintf_r+0x13a>
 800502c:	eba0 0308 	sub.w	r3, r0, r8
 8005030:	fa09 f303 	lsl.w	r3, r9, r3
 8005034:	4313      	orrs	r3, r2
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	46a2      	mov	sl, r4
 800503a:	e7d2      	b.n	8004fe2 <_vfiprintf_r+0xc6>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d19      	adds	r1, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9103      	str	r1, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfbb      	ittet	lt
 8005048:	425b      	neglt	r3, r3
 800504a:	f042 0202 	orrlt.w	r2, r2, #2
 800504e:	9307      	strge	r3, [sp, #28]
 8005050:	9307      	strlt	r3, [sp, #28]
 8005052:	bfb8      	it	lt
 8005054:	9204      	strlt	r2, [sp, #16]
 8005056:	7823      	ldrb	r3, [r4, #0]
 8005058:	2b2e      	cmp	r3, #46	; 0x2e
 800505a:	d10c      	bne.n	8005076 <_vfiprintf_r+0x15a>
 800505c:	7863      	ldrb	r3, [r4, #1]
 800505e:	2b2a      	cmp	r3, #42	; 0x2a
 8005060:	d134      	bne.n	80050cc <_vfiprintf_r+0x1b0>
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	9203      	str	r2, [sp, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfb8      	it	lt
 800506e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005072:	3402      	adds	r4, #2
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800514c <_vfiprintf_r+0x230>
 800507a:	7821      	ldrb	r1, [r4, #0]
 800507c:	2203      	movs	r2, #3
 800507e:	4650      	mov	r0, sl
 8005080:	f7fb f8ae 	bl	80001e0 <memchr>
 8005084:	b138      	cbz	r0, 8005096 <_vfiprintf_r+0x17a>
 8005086:	9b04      	ldr	r3, [sp, #16]
 8005088:	eba0 000a 	sub.w	r0, r0, sl
 800508c:	2240      	movs	r2, #64	; 0x40
 800508e:	4082      	lsls	r2, r0
 8005090:	4313      	orrs	r3, r2
 8005092:	3401      	adds	r4, #1
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509a:	4829      	ldr	r0, [pc, #164]	; (8005140 <_vfiprintf_r+0x224>)
 800509c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a0:	2206      	movs	r2, #6
 80050a2:	f7fb f89d 	bl	80001e0 <memchr>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d03f      	beq.n	800512a <_vfiprintf_r+0x20e>
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <_vfiprintf_r+0x228>)
 80050ac:	bb1b      	cbnz	r3, 80050f6 <_vfiprintf_r+0x1da>
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	3307      	adds	r3, #7
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	3308      	adds	r3, #8
 80050b8:	9303      	str	r3, [sp, #12]
 80050ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050bc:	443b      	add	r3, r7
 80050be:	9309      	str	r3, [sp, #36]	; 0x24
 80050c0:	e768      	b.n	8004f94 <_vfiprintf_r+0x78>
 80050c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050c6:	460c      	mov	r4, r1
 80050c8:	2001      	movs	r0, #1
 80050ca:	e7a6      	b.n	800501a <_vfiprintf_r+0xfe>
 80050cc:	2300      	movs	r3, #0
 80050ce:	3401      	adds	r4, #1
 80050d0:	9305      	str	r3, [sp, #20]
 80050d2:	4619      	mov	r1, r3
 80050d4:	f04f 0c0a 	mov.w	ip, #10
 80050d8:	4620      	mov	r0, r4
 80050da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050de:	3a30      	subs	r2, #48	; 0x30
 80050e0:	2a09      	cmp	r2, #9
 80050e2:	d903      	bls.n	80050ec <_vfiprintf_r+0x1d0>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0c6      	beq.n	8005076 <_vfiprintf_r+0x15a>
 80050e8:	9105      	str	r1, [sp, #20]
 80050ea:	e7c4      	b.n	8005076 <_vfiprintf_r+0x15a>
 80050ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f0:	4604      	mov	r4, r0
 80050f2:	2301      	movs	r3, #1
 80050f4:	e7f0      	b.n	80050d8 <_vfiprintf_r+0x1bc>
 80050f6:	ab03      	add	r3, sp, #12
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	462a      	mov	r2, r5
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <_vfiprintf_r+0x22c>)
 80050fe:	a904      	add	r1, sp, #16
 8005100:	4630      	mov	r0, r6
 8005102:	f3af 8000 	nop.w
 8005106:	4607      	mov	r7, r0
 8005108:	1c78      	adds	r0, r7, #1
 800510a:	d1d6      	bne.n	80050ba <_vfiprintf_r+0x19e>
 800510c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d405      	bmi.n	800511e <_vfiprintf_r+0x202>
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	059a      	lsls	r2, r3, #22
 8005116:	d402      	bmi.n	800511e <_vfiprintf_r+0x202>
 8005118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511a:	f7ff fc6d 	bl	80049f8 <__retarget_lock_release_recursive>
 800511e:	89ab      	ldrh	r3, [r5, #12]
 8005120:	065b      	lsls	r3, r3, #25
 8005122:	f53f af1d 	bmi.w	8004f60 <_vfiprintf_r+0x44>
 8005126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005128:	e71c      	b.n	8004f64 <_vfiprintf_r+0x48>
 800512a:	ab03      	add	r3, sp, #12
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	462a      	mov	r2, r5
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <_vfiprintf_r+0x22c>)
 8005132:	a904      	add	r1, sp, #16
 8005134:	4630      	mov	r0, r6
 8005136:	f000 f879 	bl	800522c <_printf_i>
 800513a:	e7e4      	b.n	8005106 <_vfiprintf_r+0x1ea>
 800513c:	080058e4 	.word	0x080058e4
 8005140:	080058ee 	.word	0x080058ee
 8005144:	00000000 	.word	0x00000000
 8005148:	08004ef7 	.word	0x08004ef7
 800514c:	080058ea 	.word	0x080058ea

08005150 <_printf_common>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4616      	mov	r6, r2
 8005156:	4699      	mov	r9, r3
 8005158:	688a      	ldr	r2, [r1, #8]
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005160:	4293      	cmp	r3, r2
 8005162:	bfb8      	it	lt
 8005164:	4613      	movlt	r3, r2
 8005166:	6033      	str	r3, [r6, #0]
 8005168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800516c:	4607      	mov	r7, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b10a      	cbz	r2, 8005176 <_printf_common+0x26>
 8005172:	3301      	adds	r3, #1
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	0699      	lsls	r1, r3, #26
 800517a:	bf42      	ittt	mi
 800517c:	6833      	ldrmi	r3, [r6, #0]
 800517e:	3302      	addmi	r3, #2
 8005180:	6033      	strmi	r3, [r6, #0]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d106      	bne.n	8005198 <_printf_common+0x48>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	6832      	ldr	r2, [r6, #0]
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	42ab      	cmp	r3, r5
 8005196:	dc26      	bgt.n	80051e6 <_printf_common+0x96>
 8005198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800519c:	1e13      	subs	r3, r2, #0
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	bf18      	it	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	0692      	lsls	r2, r2, #26
 80051a6:	d42b      	bmi.n	8005200 <_printf_common+0xb0>
 80051a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ac:	4649      	mov	r1, r9
 80051ae:	4638      	mov	r0, r7
 80051b0:	47c0      	blx	r8
 80051b2:	3001      	adds	r0, #1
 80051b4:	d01e      	beq.n	80051f4 <_printf_common+0xa4>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	6922      	ldr	r2, [r4, #16]
 80051ba:	f003 0306 	and.w	r3, r3, #6
 80051be:	2b04      	cmp	r3, #4
 80051c0:	bf02      	ittt	eq
 80051c2:	68e5      	ldreq	r5, [r4, #12]
 80051c4:	6833      	ldreq	r3, [r6, #0]
 80051c6:	1aed      	subeq	r5, r5, r3
 80051c8:	68a3      	ldr	r3, [r4, #8]
 80051ca:	bf0c      	ite	eq
 80051cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d0:	2500      	movne	r5, #0
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bfc4      	itt	gt
 80051d6:	1a9b      	subgt	r3, r3, r2
 80051d8:	18ed      	addgt	r5, r5, r3
 80051da:	2600      	movs	r6, #0
 80051dc:	341a      	adds	r4, #26
 80051de:	42b5      	cmp	r5, r6
 80051e0:	d11a      	bne.n	8005218 <_printf_common+0xc8>
 80051e2:	2000      	movs	r0, #0
 80051e4:	e008      	b.n	80051f8 <_printf_common+0xa8>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4649      	mov	r1, r9
 80051ec:	4638      	mov	r0, r7
 80051ee:	47c0      	blx	r8
 80051f0:	3001      	adds	r0, #1
 80051f2:	d103      	bne.n	80051fc <_printf_common+0xac>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	3501      	adds	r5, #1
 80051fe:	e7c6      	b.n	800518e <_printf_common+0x3e>
 8005200:	18e1      	adds	r1, r4, r3
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	2030      	movs	r0, #48	; 0x30
 8005206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520a:	4422      	add	r2, r4
 800520c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005214:	3302      	adds	r3, #2
 8005216:	e7c7      	b.n	80051a8 <_printf_common+0x58>
 8005218:	2301      	movs	r3, #1
 800521a:	4622      	mov	r2, r4
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d0e6      	beq.n	80051f4 <_printf_common+0xa4>
 8005226:	3601      	adds	r6, #1
 8005228:	e7d9      	b.n	80051de <_printf_common+0x8e>
	...

0800522c <_printf_i>:
 800522c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	7e0f      	ldrb	r7, [r1, #24]
 8005232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005234:	2f78      	cmp	r7, #120	; 0x78
 8005236:	4691      	mov	r9, r2
 8005238:	4680      	mov	r8, r0
 800523a:	460c      	mov	r4, r1
 800523c:	469a      	mov	sl, r3
 800523e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005242:	d807      	bhi.n	8005254 <_printf_i+0x28>
 8005244:	2f62      	cmp	r7, #98	; 0x62
 8005246:	d80a      	bhi.n	800525e <_printf_i+0x32>
 8005248:	2f00      	cmp	r7, #0
 800524a:	f000 80d4 	beq.w	80053f6 <_printf_i+0x1ca>
 800524e:	2f58      	cmp	r7, #88	; 0x58
 8005250:	f000 80c0 	beq.w	80053d4 <_printf_i+0x1a8>
 8005254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800525c:	e03a      	b.n	80052d4 <_printf_i+0xa8>
 800525e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005262:	2b15      	cmp	r3, #21
 8005264:	d8f6      	bhi.n	8005254 <_printf_i+0x28>
 8005266:	a101      	add	r1, pc, #4	; (adr r1, 800526c <_printf_i+0x40>)
 8005268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052d9 	.word	0x080052d9
 8005274:	08005255 	.word	0x08005255
 8005278:	08005255 	.word	0x08005255
 800527c:	08005255 	.word	0x08005255
 8005280:	08005255 	.word	0x08005255
 8005284:	080052d9 	.word	0x080052d9
 8005288:	08005255 	.word	0x08005255
 800528c:	08005255 	.word	0x08005255
 8005290:	08005255 	.word	0x08005255
 8005294:	08005255 	.word	0x08005255
 8005298:	080053dd 	.word	0x080053dd
 800529c:	08005305 	.word	0x08005305
 80052a0:	08005397 	.word	0x08005397
 80052a4:	08005255 	.word	0x08005255
 80052a8:	08005255 	.word	0x08005255
 80052ac:	080053ff 	.word	0x080053ff
 80052b0:	08005255 	.word	0x08005255
 80052b4:	08005305 	.word	0x08005305
 80052b8:	08005255 	.word	0x08005255
 80052bc:	08005255 	.word	0x08005255
 80052c0:	0800539f 	.word	0x0800539f
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	602a      	str	r2, [r5, #0]
 80052cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d4:	2301      	movs	r3, #1
 80052d6:	e09f      	b.n	8005418 <_printf_i+0x1ec>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	682b      	ldr	r3, [r5, #0]
 80052dc:	0607      	lsls	r7, r0, #24
 80052de:	f103 0104 	add.w	r1, r3, #4
 80052e2:	6029      	str	r1, [r5, #0]
 80052e4:	d501      	bpl.n	80052ea <_printf_i+0xbe>
 80052e6:	681e      	ldr	r6, [r3, #0]
 80052e8:	e003      	b.n	80052f2 <_printf_i+0xc6>
 80052ea:	0646      	lsls	r6, r0, #25
 80052ec:	d5fb      	bpl.n	80052e6 <_printf_i+0xba>
 80052ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052f2:	2e00      	cmp	r6, #0
 80052f4:	da03      	bge.n	80052fe <_printf_i+0xd2>
 80052f6:	232d      	movs	r3, #45	; 0x2d
 80052f8:	4276      	negs	r6, r6
 80052fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052fe:	485a      	ldr	r0, [pc, #360]	; (8005468 <_printf_i+0x23c>)
 8005300:	230a      	movs	r3, #10
 8005302:	e012      	b.n	800532a <_printf_i+0xfe>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	6029      	str	r1, [r5, #0]
 800530c:	0605      	lsls	r5, r0, #24
 800530e:	d501      	bpl.n	8005314 <_printf_i+0xe8>
 8005310:	681e      	ldr	r6, [r3, #0]
 8005312:	e002      	b.n	800531a <_printf_i+0xee>
 8005314:	0641      	lsls	r1, r0, #25
 8005316:	d5fb      	bpl.n	8005310 <_printf_i+0xe4>
 8005318:	881e      	ldrh	r6, [r3, #0]
 800531a:	4853      	ldr	r0, [pc, #332]	; (8005468 <_printf_i+0x23c>)
 800531c:	2f6f      	cmp	r7, #111	; 0x6f
 800531e:	bf0c      	ite	eq
 8005320:	2308      	moveq	r3, #8
 8005322:	230a      	movne	r3, #10
 8005324:	2100      	movs	r1, #0
 8005326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800532a:	6865      	ldr	r5, [r4, #4]
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	2d00      	cmp	r5, #0
 8005330:	bfa2      	ittt	ge
 8005332:	6821      	ldrge	r1, [r4, #0]
 8005334:	f021 0104 	bicge.w	r1, r1, #4
 8005338:	6021      	strge	r1, [r4, #0]
 800533a:	b90e      	cbnz	r6, 8005340 <_printf_i+0x114>
 800533c:	2d00      	cmp	r5, #0
 800533e:	d04b      	beq.n	80053d8 <_printf_i+0x1ac>
 8005340:	4615      	mov	r5, r2
 8005342:	fbb6 f1f3 	udiv	r1, r6, r3
 8005346:	fb03 6711 	mls	r7, r3, r1, r6
 800534a:	5dc7      	ldrb	r7, [r0, r7]
 800534c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005350:	4637      	mov	r7, r6
 8005352:	42bb      	cmp	r3, r7
 8005354:	460e      	mov	r6, r1
 8005356:	d9f4      	bls.n	8005342 <_printf_i+0x116>
 8005358:	2b08      	cmp	r3, #8
 800535a:	d10b      	bne.n	8005374 <_printf_i+0x148>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	07de      	lsls	r6, r3, #31
 8005360:	d508      	bpl.n	8005374 <_printf_i+0x148>
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	4299      	cmp	r1, r3
 8005368:	bfde      	ittt	le
 800536a:	2330      	movle	r3, #48	; 0x30
 800536c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005374:	1b52      	subs	r2, r2, r5
 8005376:	6122      	str	r2, [r4, #16]
 8005378:	f8cd a000 	str.w	sl, [sp]
 800537c:	464b      	mov	r3, r9
 800537e:	aa03      	add	r2, sp, #12
 8005380:	4621      	mov	r1, r4
 8005382:	4640      	mov	r0, r8
 8005384:	f7ff fee4 	bl	8005150 <_printf_common>
 8005388:	3001      	adds	r0, #1
 800538a:	d14a      	bne.n	8005422 <_printf_i+0x1f6>
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	b004      	add	sp, #16
 8005392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f043 0320 	orr.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	4833      	ldr	r0, [pc, #204]	; (800546c <_printf_i+0x240>)
 80053a0:	2778      	movs	r7, #120	; 0x78
 80053a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	6829      	ldr	r1, [r5, #0]
 80053aa:	061f      	lsls	r7, r3, #24
 80053ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80053b0:	d402      	bmi.n	80053b8 <_printf_i+0x18c>
 80053b2:	065f      	lsls	r7, r3, #25
 80053b4:	bf48      	it	mi
 80053b6:	b2b6      	uxthmi	r6, r6
 80053b8:	07df      	lsls	r7, r3, #31
 80053ba:	bf48      	it	mi
 80053bc:	f043 0320 	orrmi.w	r3, r3, #32
 80053c0:	6029      	str	r1, [r5, #0]
 80053c2:	bf48      	it	mi
 80053c4:	6023      	strmi	r3, [r4, #0]
 80053c6:	b91e      	cbnz	r6, 80053d0 <_printf_i+0x1a4>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	f023 0320 	bic.w	r3, r3, #32
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	2310      	movs	r3, #16
 80053d2:	e7a7      	b.n	8005324 <_printf_i+0xf8>
 80053d4:	4824      	ldr	r0, [pc, #144]	; (8005468 <_printf_i+0x23c>)
 80053d6:	e7e4      	b.n	80053a2 <_printf_i+0x176>
 80053d8:	4615      	mov	r5, r2
 80053da:	e7bd      	b.n	8005358 <_printf_i+0x12c>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	6826      	ldr	r6, [r4, #0]
 80053e0:	6961      	ldr	r1, [r4, #20]
 80053e2:	1d18      	adds	r0, r3, #4
 80053e4:	6028      	str	r0, [r5, #0]
 80053e6:	0635      	lsls	r5, r6, #24
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0x1c4>
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0x1ca>
 80053f0:	0670      	lsls	r0, r6, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0x1c0>
 80053f4:	8019      	strh	r1, [r3, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	4615      	mov	r5, r2
 80053fc:	e7bc      	b.n	8005378 <_printf_i+0x14c>
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	602a      	str	r2, [r5, #0]
 8005404:	681d      	ldr	r5, [r3, #0]
 8005406:	6862      	ldr	r2, [r4, #4]
 8005408:	2100      	movs	r1, #0
 800540a:	4628      	mov	r0, r5
 800540c:	f7fa fee8 	bl	80001e0 <memchr>
 8005410:	b108      	cbz	r0, 8005416 <_printf_i+0x1ea>
 8005412:	1b40      	subs	r0, r0, r5
 8005414:	6060      	str	r0, [r4, #4]
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	6123      	str	r3, [r4, #16]
 800541a:	2300      	movs	r3, #0
 800541c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005420:	e7aa      	b.n	8005378 <_printf_i+0x14c>
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	462a      	mov	r2, r5
 8005426:	4649      	mov	r1, r9
 8005428:	4640      	mov	r0, r8
 800542a:	47d0      	blx	sl
 800542c:	3001      	adds	r0, #1
 800542e:	d0ad      	beq.n	800538c <_printf_i+0x160>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	079b      	lsls	r3, r3, #30
 8005434:	d413      	bmi.n	800545e <_printf_i+0x232>
 8005436:	68e0      	ldr	r0, [r4, #12]
 8005438:	9b03      	ldr	r3, [sp, #12]
 800543a:	4298      	cmp	r0, r3
 800543c:	bfb8      	it	lt
 800543e:	4618      	movlt	r0, r3
 8005440:	e7a6      	b.n	8005390 <_printf_i+0x164>
 8005442:	2301      	movs	r3, #1
 8005444:	4632      	mov	r2, r6
 8005446:	4649      	mov	r1, r9
 8005448:	4640      	mov	r0, r8
 800544a:	47d0      	blx	sl
 800544c:	3001      	adds	r0, #1
 800544e:	d09d      	beq.n	800538c <_printf_i+0x160>
 8005450:	3501      	adds	r5, #1
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	9903      	ldr	r1, [sp, #12]
 8005456:	1a5b      	subs	r3, r3, r1
 8005458:	42ab      	cmp	r3, r5
 800545a:	dcf2      	bgt.n	8005442 <_printf_i+0x216>
 800545c:	e7eb      	b.n	8005436 <_printf_i+0x20a>
 800545e:	2500      	movs	r5, #0
 8005460:	f104 0619 	add.w	r6, r4, #25
 8005464:	e7f5      	b.n	8005452 <_printf_i+0x226>
 8005466:	bf00      	nop
 8005468:	080058f5 	.word	0x080058f5
 800546c:	08005906 	.word	0x08005906

08005470 <__sflush_r>:
 8005470:	898a      	ldrh	r2, [r1, #12]
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	4605      	mov	r5, r0
 8005478:	0710      	lsls	r0, r2, #28
 800547a:	460c      	mov	r4, r1
 800547c:	d458      	bmi.n	8005530 <__sflush_r+0xc0>
 800547e:	684b      	ldr	r3, [r1, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	dc05      	bgt.n	8005490 <__sflush_r+0x20>
 8005484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	dc02      	bgt.n	8005490 <__sflush_r+0x20>
 800548a:	2000      	movs	r0, #0
 800548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005492:	2e00      	cmp	r6, #0
 8005494:	d0f9      	beq.n	800548a <__sflush_r+0x1a>
 8005496:	2300      	movs	r3, #0
 8005498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800549c:	682f      	ldr	r7, [r5, #0]
 800549e:	6a21      	ldr	r1, [r4, #32]
 80054a0:	602b      	str	r3, [r5, #0]
 80054a2:	d032      	beq.n	800550a <__sflush_r+0x9a>
 80054a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	075a      	lsls	r2, r3, #29
 80054aa:	d505      	bpl.n	80054b8 <__sflush_r+0x48>
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	1ac0      	subs	r0, r0, r3
 80054b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054b2:	b10b      	cbz	r3, 80054b8 <__sflush_r+0x48>
 80054b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054b6:	1ac0      	subs	r0, r0, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	4602      	mov	r2, r0
 80054bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054be:	6a21      	ldr	r1, [r4, #32]
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b0      	blx	r6
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	d106      	bne.n	80054d8 <__sflush_r+0x68>
 80054ca:	6829      	ldr	r1, [r5, #0]
 80054cc:	291d      	cmp	r1, #29
 80054ce:	d82b      	bhi.n	8005528 <__sflush_r+0xb8>
 80054d0:	4a29      	ldr	r2, [pc, #164]	; (8005578 <__sflush_r+0x108>)
 80054d2:	410a      	asrs	r2, r1
 80054d4:	07d6      	lsls	r6, r2, #31
 80054d6:	d427      	bmi.n	8005528 <__sflush_r+0xb8>
 80054d8:	2200      	movs	r2, #0
 80054da:	6062      	str	r2, [r4, #4]
 80054dc:	04d9      	lsls	r1, r3, #19
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	6022      	str	r2, [r4, #0]
 80054e2:	d504      	bpl.n	80054ee <__sflush_r+0x7e>
 80054e4:	1c42      	adds	r2, r0, #1
 80054e6:	d101      	bne.n	80054ec <__sflush_r+0x7c>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b903      	cbnz	r3, 80054ee <__sflush_r+0x7e>
 80054ec:	6560      	str	r0, [r4, #84]	; 0x54
 80054ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f0:	602f      	str	r7, [r5, #0]
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d0c9      	beq.n	800548a <__sflush_r+0x1a>
 80054f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d002      	beq.n	8005504 <__sflush_r+0x94>
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff fa8a 	bl	8004a18 <_free_r>
 8005504:	2000      	movs	r0, #0
 8005506:	6360      	str	r0, [r4, #52]	; 0x34
 8005508:	e7c0      	b.n	800548c <__sflush_r+0x1c>
 800550a:	2301      	movs	r3, #1
 800550c:	4628      	mov	r0, r5
 800550e:	47b0      	blx	r6
 8005510:	1c41      	adds	r1, r0, #1
 8005512:	d1c8      	bne.n	80054a6 <__sflush_r+0x36>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0c5      	beq.n	80054a6 <__sflush_r+0x36>
 800551a:	2b1d      	cmp	r3, #29
 800551c:	d001      	beq.n	8005522 <__sflush_r+0xb2>
 800551e:	2b16      	cmp	r3, #22
 8005520:	d101      	bne.n	8005526 <__sflush_r+0xb6>
 8005522:	602f      	str	r7, [r5, #0]
 8005524:	e7b1      	b.n	800548a <__sflush_r+0x1a>
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	e7ad      	b.n	800548c <__sflush_r+0x1c>
 8005530:	690f      	ldr	r7, [r1, #16]
 8005532:	2f00      	cmp	r7, #0
 8005534:	d0a9      	beq.n	800548a <__sflush_r+0x1a>
 8005536:	0793      	lsls	r3, r2, #30
 8005538:	680e      	ldr	r6, [r1, #0]
 800553a:	bf08      	it	eq
 800553c:	694b      	ldreq	r3, [r1, #20]
 800553e:	600f      	str	r7, [r1, #0]
 8005540:	bf18      	it	ne
 8005542:	2300      	movne	r3, #0
 8005544:	eba6 0807 	sub.w	r8, r6, r7
 8005548:	608b      	str	r3, [r1, #8]
 800554a:	f1b8 0f00 	cmp.w	r8, #0
 800554e:	dd9c      	ble.n	800548a <__sflush_r+0x1a>
 8005550:	6a21      	ldr	r1, [r4, #32]
 8005552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005554:	4643      	mov	r3, r8
 8005556:	463a      	mov	r2, r7
 8005558:	4628      	mov	r0, r5
 800555a:	47b0      	blx	r6
 800555c:	2800      	cmp	r0, #0
 800555e:	dc06      	bgt.n	800556e <__sflush_r+0xfe>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e78e      	b.n	800548c <__sflush_r+0x1c>
 800556e:	4407      	add	r7, r0
 8005570:	eba8 0800 	sub.w	r8, r8, r0
 8005574:	e7e9      	b.n	800554a <__sflush_r+0xda>
 8005576:	bf00      	nop
 8005578:	dfbffffe 	.word	0xdfbffffe

0800557c <_fflush_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	4605      	mov	r5, r0
 8005582:	460c      	mov	r4, r1
 8005584:	b913      	cbnz	r3, 800558c <_fflush_r+0x10>
 8005586:	2500      	movs	r5, #0
 8005588:	4628      	mov	r0, r5
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	b118      	cbz	r0, 8005596 <_fflush_r+0x1a>
 800558e:	6a03      	ldr	r3, [r0, #32]
 8005590:	b90b      	cbnz	r3, 8005596 <_fflush_r+0x1a>
 8005592:	f7fe ff17 	bl	80043c4 <__sinit>
 8005596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f3      	beq.n	8005586 <_fflush_r+0xa>
 800559e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055a0:	07d0      	lsls	r0, r2, #31
 80055a2:	d404      	bmi.n	80055ae <_fflush_r+0x32>
 80055a4:	0599      	lsls	r1, r3, #22
 80055a6:	d402      	bmi.n	80055ae <_fflush_r+0x32>
 80055a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055aa:	f7ff fa24 	bl	80049f6 <__retarget_lock_acquire_recursive>
 80055ae:	4628      	mov	r0, r5
 80055b0:	4621      	mov	r1, r4
 80055b2:	f7ff ff5d 	bl	8005470 <__sflush_r>
 80055b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b8:	07da      	lsls	r2, r3, #31
 80055ba:	4605      	mov	r5, r0
 80055bc:	d4e4      	bmi.n	8005588 <_fflush_r+0xc>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	059b      	lsls	r3, r3, #22
 80055c2:	d4e1      	bmi.n	8005588 <_fflush_r+0xc>
 80055c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055c6:	f7ff fa17 	bl	80049f8 <__retarget_lock_release_recursive>
 80055ca:	e7dd      	b.n	8005588 <_fflush_r+0xc>

080055cc <__swhatbuf_r>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	460c      	mov	r4, r1
 80055d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d4:	2900      	cmp	r1, #0
 80055d6:	b096      	sub	sp, #88	; 0x58
 80055d8:	4615      	mov	r5, r2
 80055da:	461e      	mov	r6, r3
 80055dc:	da0d      	bge.n	80055fa <__swhatbuf_r+0x2e>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	bf0c      	ite	eq
 80055ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055ee:	2340      	movne	r3, #64	; 0x40
 80055f0:	2000      	movs	r0, #0
 80055f2:	6031      	str	r1, [r6, #0]
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	b016      	add	sp, #88	; 0x58
 80055f8:	bd70      	pop	{r4, r5, r6, pc}
 80055fa:	466a      	mov	r2, sp
 80055fc:	f000 f862 	bl	80056c4 <_fstat_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	dbec      	blt.n	80055de <__swhatbuf_r+0x12>
 8005604:	9901      	ldr	r1, [sp, #4]
 8005606:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800560a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800560e:	4259      	negs	r1, r3
 8005610:	4159      	adcs	r1, r3
 8005612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005616:	e7eb      	b.n	80055f0 <__swhatbuf_r+0x24>

08005618 <__smakebuf_r>:
 8005618:	898b      	ldrh	r3, [r1, #12]
 800561a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800561c:	079d      	lsls	r5, r3, #30
 800561e:	4606      	mov	r6, r0
 8005620:	460c      	mov	r4, r1
 8005622:	d507      	bpl.n	8005634 <__smakebuf_r+0x1c>
 8005624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	2301      	movs	r3, #1
 800562e:	6163      	str	r3, [r4, #20]
 8005630:	b002      	add	sp, #8
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	ab01      	add	r3, sp, #4
 8005636:	466a      	mov	r2, sp
 8005638:	f7ff ffc8 	bl	80055cc <__swhatbuf_r>
 800563c:	9900      	ldr	r1, [sp, #0]
 800563e:	4605      	mov	r5, r0
 8005640:	4630      	mov	r0, r6
 8005642:	f7ff fa5d 	bl	8004b00 <_malloc_r>
 8005646:	b948      	cbnz	r0, 800565c <__smakebuf_r+0x44>
 8005648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564c:	059a      	lsls	r2, r3, #22
 800564e:	d4ef      	bmi.n	8005630 <__smakebuf_r+0x18>
 8005650:	f023 0303 	bic.w	r3, r3, #3
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	e7e3      	b.n	8005624 <__smakebuf_r+0xc>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	6020      	str	r0, [r4, #0]
 8005660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	6163      	str	r3, [r4, #20]
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	6120      	str	r0, [r4, #16]
 800566e:	b15b      	cbz	r3, 8005688 <__smakebuf_r+0x70>
 8005670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f837 	bl	80056e8 <_isatty_r>
 800567a:	b128      	cbz	r0, 8005688 <__smakebuf_r+0x70>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	431d      	orrs	r5, r3
 800568c:	81a5      	strh	r5, [r4, #12]
 800568e:	e7cf      	b.n	8005630 <__smakebuf_r+0x18>

08005690 <memmove>:
 8005690:	4288      	cmp	r0, r1
 8005692:	b510      	push	{r4, lr}
 8005694:	eb01 0402 	add.w	r4, r1, r2
 8005698:	d902      	bls.n	80056a0 <memmove+0x10>
 800569a:	4284      	cmp	r4, r0
 800569c:	4623      	mov	r3, r4
 800569e:	d807      	bhi.n	80056b0 <memmove+0x20>
 80056a0:	1e43      	subs	r3, r0, #1
 80056a2:	42a1      	cmp	r1, r4
 80056a4:	d008      	beq.n	80056b8 <memmove+0x28>
 80056a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ae:	e7f8      	b.n	80056a2 <memmove+0x12>
 80056b0:	4402      	add	r2, r0
 80056b2:	4601      	mov	r1, r0
 80056b4:	428a      	cmp	r2, r1
 80056b6:	d100      	bne.n	80056ba <memmove+0x2a>
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056c2:	e7f7      	b.n	80056b4 <memmove+0x24>

080056c4 <_fstat_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d07      	ldr	r5, [pc, #28]	; (80056e4 <_fstat_r+0x20>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	f7fb fbca 	bl	8000e6a <_fstat>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d102      	bne.n	80056e0 <_fstat_r+0x1c>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	b103      	cbz	r3, 80056e0 <_fstat_r+0x1c>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	20004264 	.word	0x20004264

080056e8 <_isatty_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	; (8005704 <_isatty_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fbc9 	bl	8000e8a <_isatty>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_isatty_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_isatty_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20004264 	.word	0x20004264

08005708 <_sbrk_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d06      	ldr	r5, [pc, #24]	; (8005724 <_sbrk_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fb fbd2 	bl	8000ebc <_sbrk>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_sbrk_r+0x1a>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_sbrk_r+0x1a>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20004264 	.word	0x20004264

08005728 <_realloc_r>:
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	4680      	mov	r8, r0
 800572e:	4614      	mov	r4, r2
 8005730:	460e      	mov	r6, r1
 8005732:	b921      	cbnz	r1, 800573e <_realloc_r+0x16>
 8005734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005738:	4611      	mov	r1, r2
 800573a:	f7ff b9e1 	b.w	8004b00 <_malloc_r>
 800573e:	b92a      	cbnz	r2, 800574c <_realloc_r+0x24>
 8005740:	f7ff f96a 	bl	8004a18 <_free_r>
 8005744:	4625      	mov	r5, r4
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	f000 f81b 	bl	8005786 <_malloc_usable_size_r>
 8005750:	4284      	cmp	r4, r0
 8005752:	4607      	mov	r7, r0
 8005754:	d802      	bhi.n	800575c <_realloc_r+0x34>
 8005756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800575a:	d812      	bhi.n	8005782 <_realloc_r+0x5a>
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f7ff f9ce 	bl	8004b00 <_malloc_r>
 8005764:	4605      	mov	r5, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d0ed      	beq.n	8005746 <_realloc_r+0x1e>
 800576a:	42bc      	cmp	r4, r7
 800576c:	4622      	mov	r2, r4
 800576e:	4631      	mov	r1, r6
 8005770:	bf28      	it	cs
 8005772:	463a      	movcs	r2, r7
 8005774:	f7ff f941 	bl	80049fa <memcpy>
 8005778:	4631      	mov	r1, r6
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff f94c 	bl	8004a18 <_free_r>
 8005780:	e7e1      	b.n	8005746 <_realloc_r+0x1e>
 8005782:	4635      	mov	r5, r6
 8005784:	e7df      	b.n	8005746 <_realloc_r+0x1e>

08005786 <_malloc_usable_size_r>:
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	1f18      	subs	r0, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbc      	itt	lt
 8005790:	580b      	ldrlt	r3, [r1, r0]
 8005792:	18c0      	addlt	r0, r0, r3
 8005794:	4770      	bx	lr
	...

08005798 <_init>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr

080057a4 <_fini>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr
