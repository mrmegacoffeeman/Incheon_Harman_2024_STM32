
Test006-uSonic-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08008b50  08008b50  00018b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009008  08009008  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009010  08009010  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d8  080091ec  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080091ec  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d399  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e08  00000000  00000000  0002d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009db  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017213  00000000  00000000  00030a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e29e  00000000  00000000  00047c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090066  00000000  00000000  00055f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b14  00000000  00000000  000e5f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eaa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b38 	.word	0x08008b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008b38 	.word	0x08008b38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int t1 = 0; t2 = 0;
double dist = 0.0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Echo_Pin)
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001010:	d121      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x56>
	{
		if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1) //rising edge
 8001012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <HAL_GPIO_EXTI_Callback+0x68>)
 8001018:	f001 f83a 	bl	8002090 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d104      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x2c>
		{
			// t1 = htim3.Instance->CNT;
			htim3.Instance->CNT = 0;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
			t2 = htim3.Instance->CNT;
			dist = t2 * 0.17;
			// dist = (t2 - t1) * 0.17;
		}
	}
}
 800102a:	e014      	b.n	8001056 <HAL_GPIO_EXTI_Callback+0x56>
			t2 = htim3.Instance->CNT;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_GPIO_EXTI_Callback+0x6c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	461a      	mov	r2, r3
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_GPIO_EXTI_Callback+0x70>)
 8001036:	601a      	str	r2, [r3, #0]
			dist = t2 * 0.17;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_GPIO_EXTI_Callback+0x70>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa79 	bl	8000534 <__aeabi_i2d>
 8001042:	a307      	add	r3, pc, #28	; (adr r3, 8001060 <HAL_GPIO_EXTI_Callback+0x60>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fade 	bl	8000608 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <HAL_GPIO_EXTI_Callback+0x74>)
 8001052:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	5c28f5c3 	.word	0x5c28f5c3
 8001064:	3fc5c28f 	.word	0x3fc5c28f
 8001068:	40020000 	.word	0x40020000
 800106c:	2000023c 	.word	0x2000023c
 8001070:	200002cc 	.word	0x200002cc
 8001074:	200002d0 	.word	0x200002d0

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fcdc 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f828 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f9a8 	bl	80013d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001088:	f000 f97c 	bl	8001384 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800108c:	f000 f88c 	bl	80011a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001090:	f000 f92a 	bl	80012e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("uSonic - PWM : Start");
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <main+0x48>)
 8001096:	f000 fa71 	bl	800157c <ProgramStart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800109a:	2100      	movs	r1, #0
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <main+0x4c>)
 800109e:	f001 fde5 	bl	8002c6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim3);
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <main+0x50>)
 80010a4:	f001 fd26 	bl	8002af4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  printf("Distance = %f\r\n" , dist);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <main+0x54>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <main+0x58>)
 80010b0:	f003 ff88 	bl	8004fc4 <iprintf>
	  HAL_Delay(500);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f000 fd30 	bl	8001b1c <HAL_Delay>
  {
 80010bc:	e7f4      	b.n	80010a8 <main+0x30>
 80010be:	bf00      	nop
 80010c0:	08008b50 	.word	0x08008b50
 80010c4:	200001f4 	.word	0x200001f4
 80010c8:	2000023c 	.word	0x2000023c
 80010cc:	200002d0 	.word	0x200002d0
 80010d0:	08008b68 	.word	0x08008b68

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	; 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f982 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <SystemClock_Config+0xcc>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <SystemClock_Config+0xcc>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <SystemClock_Config+0xcc>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <SystemClock_Config+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <SystemClock_Config+0xd0>)
 800111e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <SystemClock_Config+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001144:	2310      	movs	r3, #16
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001148:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800114e:	2304      	movs	r3, #4
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	4618      	mov	r0, r3
 800115c:	f000 ffe2 	bl	8002124 <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001166:	f000 f9bb 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2102      	movs	r1, #2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fa44 	bl	8002614 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001192:	f000 f9a5 	bl	80014e0 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	; 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b096      	sub	sp, #88	; 0x58
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	615a      	str	r2, [r3, #20]
 80011d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 f903 	bl	80053ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <MX_TIM1_Init+0x138>)
 80011e8:	4a3e      	ldr	r2, [pc, #248]	; (80012e4 <MX_TIM1_Init+0x13c>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80011ec:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <MX_TIM1_Init+0x138>)
 80011ee:	2253      	movs	r2, #83	; 0x53
 80011f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <MX_TIM1_Init+0x138>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <MX_TIM1_Init+0x138>)
 80011fa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80011fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <MX_TIM1_Init+0x138>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001212:	4833      	ldr	r0, [pc, #204]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001214:	f001 fc1e 	bl	8002a54 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800121e:	f000 f95f 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122c:	4619      	mov	r1, r3
 800122e:	482c      	ldr	r0, [pc, #176]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001230:	f001 fe8e 	bl	8002f50 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123a:	f000 f951 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123e:	4828      	ldr	r0, [pc, #160]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001240:	f001 fcba 	bl	8002bb8 <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124a:	f000 f949 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001256:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	; (80012e0 <MX_TIM1_Init+0x138>)
 800125e:	f002 fa17 	bl	8003690 <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001268:	f000 f93a 	bl	80014e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126c:	2360      	movs	r3, #96	; 0x60
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_TIM1_Init+0x138>)
 8001292:	f001 fd9b 	bl	8002dcc <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800129c:	f000 f920 	bl	80014e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM1_Init+0x138>)
 80012c4:	f002 fa52 	bl	800376c <HAL_TIMEx_ConfigBreakDeadTime>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012ce:	f000 f907 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM1_Init+0x138>)
 80012d4:	f000 f9fa 	bl	80016cc <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3758      	adds	r7, #88	; 0x58
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001f4 	.word	0x200001f4
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_TIM3_Init+0x94>)
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <MX_TIM3_Init+0x98>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_TIM3_Init+0x94>)
 800130c:	2253      	movs	r2, #83	; 0x53
 800130e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_TIM3_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_TIM3_Init+0x94>)
 8001318:	f242 720f 	movw	r2, #9999	; 0x270f
 800131c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_TIM3_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_TIM3_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <MX_TIM3_Init+0x94>)
 800132c:	f001 fb92 	bl	8002a54 <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f8d3 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_TIM3_Init+0x94>)
 8001348:	f001 fe02 	bl	8002f50 <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001352:	f000 f8c5 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_TIM3_Init+0x94>)
 8001364:	f002 f994 	bl	8003690 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800136e:	f000 f8b7 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000023c 	.word	0x2000023c
 8001380:	40000400 	.word	0x40000400

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f002 fa28 	bl	8003810 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 f88b 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000284 	.word	0x20000284
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <MX_GPIO_Init+0xfc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a37      	ldr	r2, [pc, #220]	; (80014d4 <MX_GPIO_Init+0xfc>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_GPIO_Init+0xfc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <MX_GPIO_Init+0xfc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <MX_GPIO_Init+0xfc>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_GPIO_Init+0xfc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <MX_GPIO_Init+0x100>)
 8001464:	f000 fe2c 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4817      	ldr	r0, [pc, #92]	; (80014dc <MX_GPIO_Init+0x104>)
 8001480:	f000 fc82 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001484:	2320      	movs	r3, #32
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <MX_GPIO_Init+0x100>)
 800149c:	f000 fc74 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80014a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014a6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <MX_GPIO_Init+0x100>)
 80014b8:	f000 fc66 	bl	8001d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2017      	movs	r0, #23
 80014c2:	f000 fc2a 	bl	8001d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c6:	2017      	movs	r0, #23
 80014c8:	f000 fc43 	bl	8001d52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020800 	.word	0x40020800

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <__io_getchar>:
extern UART_HandleTypeDef huart2;
//I2C_HandleTypeDef *hi2c = NULL;


int __io_getchar(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 80014f2:	bf00      	nop
 80014f4:	1df9      	adds	r1, r7, #7
 80014f6:	230a      	movs	r3, #10
 80014f8:	2201      	movs	r2, #1
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <__io_getchar+0x44>)
 80014fc:	f002 fa63 	bl	80039c6 <HAL_UART_Receive>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f6      	bne.n	80014f4 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10); //echo
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	230a      	movs	r3, #10
 800150a:	2201      	movs	r2, #1
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <__io_getchar+0x44>)
 800150e:	f002 f9cf 	bl	80038b0 <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b0d      	cmp	r3, #13
 8001516:	d105      	bne.n	8001524 <__io_getchar+0x38>
 8001518:	230a      	movs	r3, #10
 800151a:	2201      	movs	r2, #1
 800151c:	4905      	ldr	r1, [pc, #20]	; (8001534 <__io_getchar+0x48>)
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <__io_getchar+0x44>)
 8001520:	f002 f9c6 	bl	80038b0 <HAL_UART_Transmit>
	return ch;
 8001524:	79fb      	ldrb	r3, [r7, #7]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000284 	.word	0x20000284
 8001534:	08008b78 	.word	0x08008b78

08001538 <__io_putchar>:

int __io_putchar(int ch)  //4byte
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8001540:	1d39      	adds	r1, r7, #4
 8001542:	230a      	movs	r3, #10
 8001544:	2201      	movs	r2, #1
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <__io_putchar+0x20>)
 8001548:	f002 f9b2 	bl	80038b0 <HAL_UART_Transmit>
	return ch;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000284 	.word	0x20000284

0800155c <Standby>:

void Standby()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)); //wait until B1 == 0 (Press)
 8001560:	bf00      	nop
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <Standby+0x1c>)
 8001568:	f000 fd92 	bl	8002090 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f7      	bne.n	8001562 <Standby+0x6>
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020800 	.word	0x40020800

0800157c <ProgramStart>:

void ProgramStart (char* str)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]


	//printf("\033[2J\033[0;0H");
	cls();
 8001584:	f000 f820 	bl	80015c8 <cls>
	Cursor(0,0);
 8001588:	2100      	movs	r1, #0
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f826 	bl	80015dc <Cursor>
	printf("Program Name - %s\r\n", str);
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	480a      	ldr	r0, [pc, #40]	; (80015bc <ProgramStart+0x40>)
 8001594:	f003 fd16 	bl	8004fc4 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <ProgramStart+0x44>)
 800159a:	f003 fd79 	bl	8005090 <puts>
	setvbuf(stdin, NULL, _IONBF, 0);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <ProgramStart+0x48>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6858      	ldr	r0, [r3, #4]
 80015a4:	2300      	movs	r3, #0
 80015a6:	2202      	movs	r2, #2
 80015a8:	2100      	movs	r1, #0
 80015aa:	f003 fd79 	bl	80050a0 <setvbuf>
	Standby();
 80015ae:	f7ff ffd5 	bl	800155c <Standby>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08008b7c 	.word	0x08008b7c
 80015c0:	08008b90 	.word	0x08008b90
 80015c4:	20000064 	.word	0x20000064

080015c8 <cls>:

void cls()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	printf("\033[2J");
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <cls+0x10>)
 80015ce:	f003 fcf9 	bl	8004fc4 <iprintf>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08008bb4 	.word	0x08008bb4

080015dc <Cursor>:
void Cursor(int x, int y)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 80015e6:	f107 000c 	add.w	r0, r7, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4906      	ldr	r1, [pc, #24]	; (8001608 <Cursor+0x2c>)
 80015f0:	f003 fe04 	bl	80051fc <siprintf>
	puts(buf);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fd49 	bl	8005090 <puts>
}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08008bbc 	.word	0x08008bbc

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 fb5a 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_TIM_Base_MspInit+0x64>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10e      	bne.n	800168c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800168a:	e012      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d10d      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40000400 	.word	0x40000400

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11e      	bne.n	800172c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800171c:	2301      	movs	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_TIM_MspPostInit+0x70>)
 8001728:	f000 fb2e 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40010000 	.word	0x40010000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x88>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0x8c>)
 80017b6:	f000 fae7 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 f95e 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001828:	f44f 7000 	mov.w	r0, #512	; 0x200
 800182c:	f000 fc62 	bl	80020f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800184e:	f003 fe1f 	bl	8005490 <__errno>
 8001852:	4603      	mov	r3, r0
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
  return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_exit>:

void _exit (int status)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe7 	bl	8001844 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001876:	e7fe      	b.n	8001876 <_exit+0x12>

08001878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188a:	f7ff fe2f 	bl	80014ec <__io_getchar>
 800188e:	4601      	mov	r1, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf0      	blt.n	800188a <_read+0x12>
  }

  return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e009      	b.n	80018d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe33 	bl	8001538 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf1      	blt.n	80018c4 <_write+0x12>
  }
  return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_close>:

int _close(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_isatty>:

int _isatty(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f003 fd84 	bl	8005490 <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20020000 	.word	0x20020000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	200002d8 	.word	0x200002d8
 80019bc:	20000430 	.word	0x20000430

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e8:	f7ff ffea 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	; (8001a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	; (8001a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f003 fd43 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fb2f 	bl	8001078 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a28:	08009018 	.word	0x08009018
  ldr r2, =_sbss
 8001a2c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a30:	2000042c 	.word	0x2000042c

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f94f 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fdce 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f967 	bl	8001d6e <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f92f 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000008 	.word	0x20000008
 8001b00:	200002dc 	.word	0x200002dc

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200002dc 	.word	0x200002dc

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000008 	.word	0x20000008

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db0b      	blt.n	8001bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4907      	ldr	r1, [pc, #28]	; (8001c00 <__NVIC_EnableIRQ+0x38>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	2001      	movs	r0, #1
 8001bea:	fa00 f202 	lsl.w	r2, r0, r2
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff29 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff3e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff31 	bl	8001bc8 <__NVIC_EnableIRQ>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffa2 	bl	8001cc0 <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e159      	b.n	8002058 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 8148 	bne.w	8002052 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d005      	beq.n	8001dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d130      	bne.n	8001e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0201 	and.w	r2, r3, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d017      	beq.n	8001e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d123      	bne.n	8001ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a2 	beq.w	8002052 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_GPIO_Init+0x2e8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a56      	ldr	r2, [pc, #344]	; (8002070 <HAL_GPIO_Init+0x2e8>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_GPIO_Init+0x2e8>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2a:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_GPIO_Init+0x2ec>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a49      	ldr	r2, [pc, #292]	; (8002078 <HAL_GPIO_Init+0x2f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d019      	beq.n	8001f8a <HAL_GPIO_Init+0x202>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_GPIO_Init+0x2f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x1fe>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a47      	ldr	r2, [pc, #284]	; (8002080 <HAL_GPIO_Init+0x2f8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <HAL_GPIO_Init+0x1fa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a46      	ldr	r2, [pc, #280]	; (8002084 <HAL_GPIO_Init+0x2fc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x1f6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a45      	ldr	r2, [pc, #276]	; (8002088 <HAL_GPIO_Init+0x300>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_GPIO_Init+0x1f2>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x204>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	; (8002074 <HAL_GPIO_Init+0x2ec>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_GPIO_Init+0x304>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_GPIO_Init+0x304>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_GPIO_Init+0x304>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_GPIO_Init+0x304>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x304>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1a      	ldr	r2, [pc, #104]	; (800208c <HAL_GPIO_Init+0x304>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_GPIO_Init+0x304>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_GPIO_Init+0x304>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f aea2 	bls.w	8001da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ff74 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e267      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d075      	beq.n	800222e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d00c      	beq.n	8002168 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002156:	2b08      	cmp	r3, #8
 8002158:	d112      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215a:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002166:	d10b      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4b7e      	ldr	r3, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d05b      	beq.n	800222c <HAL_RCC_OscConfig+0x108>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d157      	bne.n	800222c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e242      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x74>
 800218a:	4b76      	ldr	r3, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a75      	ldr	r2, [pc, #468]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x98>
 80021a2:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6f      	ldr	r2, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6c      	ldr	r2, [pc, #432]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 80021bc:	4b69      	ldr	r3, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a68      	ldr	r2, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a65      	ldr	r2, [pc, #404]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fc92 	bl	8001b04 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fc8e 	bl	8001b04 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e207      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xc0>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fc7e 	bl	8001b04 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fc7a 	bl	8001b04 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1f3      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0xe8>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b44      	ldr	r3, [pc, #272]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x152>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1c7      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4937      	ldr	r1, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCC_OscConfig+0x244>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7ff fc33 	bl	8001b04 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff fc2f 	bl	8001b04 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1a8      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4925      	ldr	r1, [pc, #148]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x244>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff fc12 	bl	8001b04 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff fc0e 	bl	8001b04 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e187      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d036      	beq.n	800237c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_RCC_OscConfig+0x248>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7ff fbf2 	bl	8001b04 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fbee 	bl	8001b04 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e167      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x240>)
 8002338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x200>
 8002342:	e01b      	b.n	800237c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_OscConfig+0x248>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fbdb 	bl	8001b04 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	e00e      	b.n	8002370 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7ff fbd7 	bl	8001b04 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d907      	bls.n	8002370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e150      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
 8002364:	40023800 	.word	0x40023800
 8002368:	42470000 	.word	0x42470000
 800236c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ea      	bne.n	8002352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8097 	beq.w	80024b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b7d      	ldr	r3, [pc, #500]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a7c      	ldr	r2, [pc, #496]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x474>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b74      	ldr	r3, [pc, #464]	; (8002598 <HAL_RCC_OscConfig+0x474>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a73      	ldr	r2, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x474>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb97 	bl	8001b04 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7ff fb93 	bl	8001b04 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e10c      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x474>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x2ea>
 8002400:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a63      	ldr	r2, [pc, #396]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x324>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x30c>
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a5e      	ldr	r2, [pc, #376]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a5b      	ldr	r2, [pc, #364]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0x324>
 8002430:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a57      	ldr	r2, [pc, #348]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	4b55      	ldr	r3, [pc, #340]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a54      	ldr	r2, [pc, #336]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d015      	beq.n	800247c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7ff fb58 	bl	8001b04 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff fb54 	bl	8001b04 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0cb      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0ee      	beq.n	8002458 <HAL_RCC_OscConfig+0x334>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7ff fb42 	bl	8001b04 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7ff fb3e 	bl	8001b04 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0b5      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ee      	bne.n	8002484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a38      	ldr	r2, [pc, #224]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a1 	beq.w	8002604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d05c      	beq.n	8002588 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d141      	bne.n	800255a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCC_OscConfig+0x478>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb12 	bl	8001b04 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff fb0e 	bl	8001b04 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e087      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	491b      	ldr	r1, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x478>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff fae7 	bl	8001b04 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fae3 	bl	8001b04 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e05c      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x416>
 8002558:	e054      	b.n	8002604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_OscConfig+0x478>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fad0 	bl	8001b04 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff facc 	bl	8001b04 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e045      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_OscConfig+0x470>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x444>
 8002586:	e03d      	b.n	8002604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e038      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000
 800259c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x4ec>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d028      	beq.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d121      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11a      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	3b01      	subs	r3, #1
 80025ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0cc      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d90c      	bls.n	8002650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d044      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e067      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7ff f9fe 	bl	8001b04 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7ff f9fa 	bl	8001b04 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d20c      	bcs.n	800275c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f95e 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08008bc8 	.word	0x08008bc8
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b094      	sub	sp, #80	; 0x50
 80027e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f8:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d00d      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x40>
 8002804:	2b08      	cmp	r3, #8
 8002806:	f200 80e1 	bhi.w	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x34>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x3a>
 8002812:	e0db      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002818:	e0db      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281a:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800281c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281e:	e0d8      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002836:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	099b      	lsrs	r3, r3, #6
 800283c:	2200      	movs	r2, #0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002840:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
 800284e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	6139      	str	r1, [r7, #16]
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002884:	4659      	mov	r1, fp
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4651      	mov	r1, sl
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4651      	mov	r1, sl
 8002894:	ebb2 0801 	subs.w	r8, r2, r1
 8002898:	4659      	mov	r1, fp
 800289a:	eb63 0901 	sbc.w	r9, r3, r1
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b2:	4690      	mov	r8, r2
 80028b4:	4699      	mov	r9, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	eb18 0303 	adds.w	r3, r8, r3
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	462b      	mov	r3, r5
 80028c0:	eb49 0303 	adc.w	r3, r9, r3
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028d2:	4629      	mov	r1, r5
 80028d4:	024b      	lsls	r3, r1, #9
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028dc:	4621      	mov	r1, r4
 80028de:	024a      	lsls	r2, r1, #9
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f0:	f7fe f9d2 	bl	8000c98 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028fc:	e058      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	4618      	mov	r0, r3
 8002908:	4611      	mov	r1, r2
 800290a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002918:	4642      	mov	r2, r8
 800291a:	464b      	mov	r3, r9
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4641      	mov	r1, r8
 8002932:	ebb2 0a01 	subs.w	sl, r2, r1
 8002936:	4649      	mov	r1, r9
 8002938:	eb63 0b01 	sbc.w	fp, r3, r1
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800294c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002950:	ebb2 040a 	subs.w	r4, r2, sl
 8002954:	eb63 050b 	sbc.w	r5, r3, fp
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	00eb      	lsls	r3, r5, #3
 8002962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002966:	00e2      	lsls	r2, r4, #3
 8002968:	4614      	mov	r4, r2
 800296a:	461d      	mov	r5, r3
 800296c:	4643      	mov	r3, r8
 800296e:	18e3      	adds	r3, r4, r3
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	464b      	mov	r3, r9
 8002974:	eb45 0303 	adc.w	r3, r5, r3
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002986:	4629      	mov	r1, r5
 8002988:	028b      	lsls	r3, r1, #10
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002990:	4621      	mov	r1, r4
 8002992:	028a      	lsls	r2, r1, #10
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	61fa      	str	r2, [r7, #28]
 80029a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a4:	f7fe f978 	bl	8000c98 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3750      	adds	r7, #80	; 0x50
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	00f42400 	.word	0x00f42400
 80029e8:	007a1200 	.word	0x007a1200

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a08:	f7ff fff0 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08008bd8 	.word	0x08008bd8

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a30:	f7ff ffdc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0b5b      	lsrs	r3, r3, #13
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	08008bd8 	.word	0x08008bd8

08002a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e041      	b.n	8002aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fdee 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 fb24 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d001      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e044      	b.n	8002b96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d018      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x6c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d013      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x6c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x6c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_TIM_Base_Start_IT+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x6c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x6c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d010      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	e007      	b.n	8002b94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40000c00 	.word	0x40000c00
 8002bb4:	40014000 	.word	0x40014000

08002bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f839 	bl	8002c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fa72 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x24>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e022      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start+0x3e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e015      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0x58>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e008      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x6a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e068      	b.n	8002db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0x82>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	e013      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIM_PWM_Start+0x92>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	e00b      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0xa2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	e003      	b.n	8002d16 <HAL_TIM_PWM_Start+0xaa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fc90 	bl	8003644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_TIM_PWM_Start+0x14c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_TIM_PWM_Start+0x14c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d013      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <HAL_TIM_PWM_Start+0x150>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_TIM_PWM_Start+0x154>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_TIM_PWM_Start+0x158>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x10e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_TIM_PWM_Start+0x15c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d111      	bne.n	8002d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d010      	beq.n	8002dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	e007      	b.n	8002dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40014000 	.word	0x40014000

08002dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0ae      	b.n	8002f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	f200 809f 	bhi.w	8002f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e35 	.word	0x08002e35
 8002e04:	08002f39 	.word	0x08002f39
 8002e08:	08002f39 	.word	0x08002f39
 8002e0c:	08002f39 	.word	0x08002f39
 8002e10:	08002e75 	.word	0x08002e75
 8002e14:	08002f39 	.word	0x08002f39
 8002e18:	08002f39 	.word	0x08002f39
 8002e1c:	08002f39 	.word	0x08002f39
 8002e20:	08002eb7 	.word	0x08002eb7
 8002e24:	08002f39 	.word	0x08002f39
 8002e28:	08002f39 	.word	0x08002f39
 8002e2c:	08002f39 	.word	0x08002f39
 8002e30:	08002ef7 	.word	0x08002ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f9dc 	bl	80031f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0204 	bic.w	r2, r2, #4
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	619a      	str	r2, [r3, #24]
      break;
 8002e72:	e064      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fa22 	bl	80032c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	619a      	str	r2, [r3, #24]
      break;
 8002eb4:	e043      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fa6d 	bl	800339c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0208 	orr.w	r2, r2, #8
 8002ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0204 	bic.w	r2, r2, #4
 8002ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	61da      	str	r2, [r3, #28]
      break;
 8002ef4:	e023      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fab7 	bl	8003470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69d9      	ldr	r1, [r3, #28]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	021a      	lsls	r2, r3, #8
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	61da      	str	r2, [r3, #28]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_ConfigClockSource+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0b4      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x186>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa4:	d03e      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0xd4>
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	f200 8087 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	f000 8086 	beq.w	80030c2 <HAL_TIM_ConfigClockSource+0x172>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d87f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8002fc0:	2b70      	cmp	r3, #112	; 0x70
 8002fc2:	d87b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b60      	cmp	r3, #96	; 0x60
 8002fc6:	d050      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x11a>
 8002fc8:	2b60      	cmp	r3, #96	; 0x60
 8002fca:	d877      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fcc:	2b50      	cmp	r3, #80	; 0x50
 8002fce:	d03c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xfa>
 8002fd0:	2b50      	cmp	r3, #80	; 0x50
 8002fd2:	d873      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d058      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x13a>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d86f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b30      	cmp	r3, #48	; 0x30
 8002fde:	d064      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	d86b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d060      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d867      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d05a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	e062      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003006:	f000 fafd 	bl	8003604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
      break;
 8003022:	e04f      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	f000 fae6 	bl	8003604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e03c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	461a      	mov	r2, r3
 8003058:	f000 fa5a 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2150      	movs	r1, #80	; 0x50
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fab3 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 8003068:	e02c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	461a      	mov	r2, r3
 8003078:	f000 fa79 	bl	800356e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2160      	movs	r1, #96	; 0x60
 8003082:	4618      	mov	r0, r3
 8003084:	f000 faa3 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 8003088:	e01c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fa3a 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fa93 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 80030a8:	e00c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fa8a 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <TIM_Base_SetConfig+0x100>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a36      	ldr	r2, [pc, #216]	; (80031e4 <TIM_Base_SetConfig+0x104>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a35      	ldr	r2, [pc, #212]	; (80031e8 <TIM_Base_SetConfig+0x108>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d017      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <TIM_Base_SetConfig+0x100>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <TIM_Base_SetConfig+0x104>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0x108>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a25      	ldr	r2, [pc, #148]	; (80031ec <TIM_Base_SetConfig+0x10c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <TIM_Base_SetConfig+0x110>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <TIM_Base_SetConfig+0x114>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f023 0201 	bic.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]
  }
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	40000c00 	.word	0x40000c00
 80031ec:	40014000 	.word	0x40014000
 80031f0:	40014400 	.word	0x40014400
 80031f4:	40014800 	.word	0x40014800

080031f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f023 0201 	bic.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d10c      	bne.n	800326e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0308 	bic.w	r3, r3, #8
 800325a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40010000 	.word	0x40010000

080032c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0210 	bic.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <TIM_OC2_SetConfig+0xd4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10d      	bne.n	8003340 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <TIM_OC2_SetConfig+0xd4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d113      	bne.n	8003370 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000

0800339c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10d      	bne.n	8003416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <TIM_OC3_SetConfig+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40010000 	.word	0x40010000

08003470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <TIM_OC4_SetConfig+0x9c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d109      	bne.n	80034e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000

08003510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 030a 	bic.w	r3, r3, #10
 800354c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b087      	sub	sp, #28
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 0210 	bic.w	r2, r3, #16
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	031b      	lsls	r3, r3, #12
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f043 0307 	orr.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800361e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	431a      	orrs	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2201      	movs	r2, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e050      	b.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f4:	d013      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10c      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000

0800376c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003784:	2302      	movs	r3, #2
 8003786:	e03d      	b.n	8003804 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd ff82 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa09 	bl	8003c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d175      	bne.n	80039bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Transmit+0x2c>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e06e      	b.n	80039be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2221      	movs	r2, #33	; 0x21
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fe f909 	bl	8001b04 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x6c>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003924:	e02e      	b.n	8003984 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f8df 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e03a      	b.n	80039be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3302      	adds	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e007      	b.n	8003976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f8ab 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e006      	b.n	80039be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	; 0x28
 80039ca:	af02      	add	r7, sp, #8
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	f040 8081 	bne.w	8003aea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Receive+0x2e>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e079      	b.n	8003aec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2222      	movs	r2, #34	; 0x22
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe f87a 	bl	8001b04 <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	d108      	bne.n	8003a3a <HAL_UART_Receive+0x74>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e003      	b.n	8003a42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a42:	e047      	b.n	8003ad4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f850 	bl	8003af4 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e042      	b.n	8003aec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10c      	bne.n	8003a86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	3302      	adds	r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e01f      	b.n	8003ac6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8e:	d007      	beq.n	8003aa0 <HAL_UART_Receive+0xda>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_UART_Receive+0xe8>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e008      	b.n	8003ac0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1b2      	bne.n	8003a44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b04:	e03b      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d037      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fd fff9 	bl	8001b04 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e03a      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d020      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d01d      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d116      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f81d 	bl	8003ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e00f      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d0b4      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b095      	sub	sp, #84	; 0x54
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bce:	643a      	str	r2, [r7, #64]	; 0x40
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d119      	bne.n	8003c52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c60:	bf00      	nop
 8003c62:	3754      	adds	r7, #84	; 0x54
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b0c0      	sub	sp, #256	; 0x100
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	68d9      	ldr	r1, [r3, #12]
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	ea40 0301 	orr.w	r3, r0, r1
 8003c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cc4:	f021 010c 	bic.w	r1, r1, #12
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	6999      	ldr	r1, [r3, #24]
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	ea40 0301 	orr.w	r3, r0, r1
 8003cf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <UART_SetConfig+0x2cc>)
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d005      	beq.n	8003d0c <UART_SetConfig+0xa0>
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b8d      	ldr	r3, [pc, #564]	; (8003f3c <UART_SetConfig+0x2d0>)
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d104      	bne.n	8003d16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d0c:	f7fe fe8e 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 8003d10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d14:	e003      	b.n	8003d1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d16:	f7fe fe75 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8003d1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d28:	f040 810c 	bne.w	8003f44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	1891      	adds	r1, r2, r2
 8003d44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d46:	415b      	adcs	r3, r3
 8003d48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d4e:	4621      	mov	r1, r4
 8003d50:	eb12 0801 	adds.w	r8, r2, r1
 8003d54:	4629      	mov	r1, r5
 8003d56:	eb43 0901 	adc.w	r9, r3, r1
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6e:	4690      	mov	r8, r2
 8003d70:	4699      	mov	r9, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	eb18 0303 	adds.w	r3, r8, r3
 8003d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	eb49 0303 	adc.w	r3, r9, r3
 8003d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	18db      	adds	r3, r3, r3
 8003d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003da0:	4613      	mov	r3, r2
 8003da2:	eb42 0303 	adc.w	r3, r2, r3
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
 8003da8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003db0:	f7fc ff72 	bl	8000c98 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	011c      	lsls	r4, r3, #4
 8003dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003de4:	4641      	mov	r1, r8
 8003de6:	eb12 0a01 	adds.w	sl, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb43 0b01 	adc.w	fp, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e04:	4692      	mov	sl, r2
 8003e06:	469b      	mov	fp, r3
 8003e08:	4643      	mov	r3, r8
 8003e0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e12:	464b      	mov	r3, r9
 8003e14:	eb4b 0303 	adc.w	r3, fp, r3
 8003e18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e30:	460b      	mov	r3, r1
 8003e32:	18db      	adds	r3, r3, r3
 8003e34:	643b      	str	r3, [r7, #64]	; 0x40
 8003e36:	4613      	mov	r3, r2
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e46:	f7fc ff27 	bl	8000c98 <__aeabi_uldivmod>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003e52:	fba3 2301 	umull	r2, r3, r3, r1
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2264      	movs	r2, #100	; 0x64
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	1acb      	subs	r3, r1, r3
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003e68:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e74:	441c      	add	r4, r3
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e90:	415b      	adcs	r3, r3
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1851      	adds	r1, r2, r1
 8003e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	00cb      	lsls	r3, r1, #3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eba:	4651      	mov	r1, sl
 8003ebc:	00ca      	lsls	r2, r1, #3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ecc:	464b      	mov	r3, r9
 8003ece:	460a      	mov	r2, r1
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ee4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eec:	460b      	mov	r3, r1
 8003eee:	18db      	adds	r3, r3, r3
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003efe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f02:	f7fc fec9 	bl	8000c98 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <UART_SetConfig+0x2d4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4422      	add	r2, r4
 8003f32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f34:	e106      	b.n	8004144 <UART_SetConfig+0x4d8>
 8003f36:	bf00      	nop
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	40011400 	.word	0x40011400
 8003f40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f56:	4642      	mov	r2, r8
 8003f58:	464b      	mov	r3, r9
 8003f5a:	1891      	adds	r1, r2, r2
 8003f5c:	6239      	str	r1, [r7, #32]
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f66:	4641      	mov	r1, r8
 8003f68:	1854      	adds	r4, r2, r1
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	eb43 0501 	adc.w	r5, r3, r1
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7e:	00e2      	lsls	r2, r4, #3
 8003f80:	4614      	mov	r4, r2
 8003f82:	461d      	mov	r5, r3
 8003f84:	4643      	mov	r3, r8
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	008a      	lsls	r2, r1, #2
 8003fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fc4:	f7fc fe68 	bl	8000c98 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b60      	ldr	r3, [pc, #384]	; (8004150 <UART_SetConfig+0x4e4>)
 8003fce:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	011c      	lsls	r4, r3, #4
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fe0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	61b9      	str	r1, [r7, #24]
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6139      	str	r1, [r7, #16]
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800402c:	464b      	mov	r3, r9
 800402e:	460a      	mov	r2, r1
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	67bb      	str	r3, [r7, #120]	; 0x78
 8004042:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004050:	4649      	mov	r1, r9
 8004052:	008b      	lsls	r3, r1, #2
 8004054:	4641      	mov	r1, r8
 8004056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405a:	4641      	mov	r1, r8
 800405c:	008a      	lsls	r2, r1, #2
 800405e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004062:	f7fc fe19 	bl	8000c98 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4611      	mov	r1, r2
 800406c:	4b38      	ldr	r3, [pc, #224]	; (8004150 <UART_SetConfig+0x4e4>)
 800406e:	fba3 2301 	umull	r2, r3, r3, r1
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2264      	movs	r2, #100	; 0x64
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	1acb      	subs	r3, r1, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a33      	ldr	r2, [pc, #204]	; (8004150 <UART_SetConfig+0x4e4>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	441c      	add	r4, r3
 800408e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004092:	2200      	movs	r2, #0
 8004094:	673b      	str	r3, [r7, #112]	; 0x70
 8004096:	677a      	str	r2, [r7, #116]	; 0x74
 8004098:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ac:	4641      	mov	r1, r8
 80040ae:	1851      	adds	r1, r2, r1
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	4649      	mov	r1, r9
 80040b4:	414b      	adcs	r3, r1
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040c4:	4659      	mov	r1, fp
 80040c6:	00cb      	lsls	r3, r1, #3
 80040c8:	4651      	mov	r1, sl
 80040ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ce:	4651      	mov	r1, sl
 80040d0:	00ca      	lsls	r2, r1, #3
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	4642      	mov	r2, r8
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80040de:	464b      	mov	r3, r9
 80040e0:	460a      	mov	r2, r1
 80040e2:	eb42 0303 	adc.w	r3, r2, r3
 80040e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	663b      	str	r3, [r7, #96]	; 0x60
 80040f2:	667a      	str	r2, [r7, #100]	; 0x64
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004100:	4649      	mov	r1, r9
 8004102:	008b      	lsls	r3, r1, #2
 8004104:	4641      	mov	r1, r8
 8004106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410a:	4641      	mov	r1, r8
 800410c:	008a      	lsls	r2, r1, #2
 800410e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004112:	f7fc fdc1 	bl	8000c98 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <UART_SetConfig+0x4e4>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <UART_SetConfig+0x4e4>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4422      	add	r2, r4
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004150:	51eb851f 	.word	0x51eb851f

08004154 <__cvt>:
 8004154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	ec55 4b10 	vmov	r4, r5, d0
 800415c:	2d00      	cmp	r5, #0
 800415e:	460e      	mov	r6, r1
 8004160:	4619      	mov	r1, r3
 8004162:	462b      	mov	r3, r5
 8004164:	bfbb      	ittet	lt
 8004166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800416a:	461d      	movlt	r5, r3
 800416c:	2300      	movge	r3, #0
 800416e:	232d      	movlt	r3, #45	; 0x2d
 8004170:	700b      	strb	r3, [r1, #0]
 8004172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004174:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004178:	4691      	mov	r9, r2
 800417a:	f023 0820 	bic.w	r8, r3, #32
 800417e:	bfbc      	itt	lt
 8004180:	4622      	movlt	r2, r4
 8004182:	4614      	movlt	r4, r2
 8004184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004188:	d005      	beq.n	8004196 <__cvt+0x42>
 800418a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800418e:	d100      	bne.n	8004192 <__cvt+0x3e>
 8004190:	3601      	adds	r6, #1
 8004192:	2102      	movs	r1, #2
 8004194:	e000      	b.n	8004198 <__cvt+0x44>
 8004196:	2103      	movs	r1, #3
 8004198:	ab03      	add	r3, sp, #12
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	ab02      	add	r3, sp, #8
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	ec45 4b10 	vmov	d0, r4, r5
 80041a4:	4653      	mov	r3, sl
 80041a6:	4632      	mov	r2, r6
 80041a8:	f001 fa2e 	bl	8005608 <_dtoa_r>
 80041ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041b0:	4607      	mov	r7, r0
 80041b2:	d102      	bne.n	80041ba <__cvt+0x66>
 80041b4:	f019 0f01 	tst.w	r9, #1
 80041b8:	d022      	beq.n	8004200 <__cvt+0xac>
 80041ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041be:	eb07 0906 	add.w	r9, r7, r6
 80041c2:	d110      	bne.n	80041e6 <__cvt+0x92>
 80041c4:	783b      	ldrb	r3, [r7, #0]
 80041c6:	2b30      	cmp	r3, #48	; 0x30
 80041c8:	d10a      	bne.n	80041e0 <__cvt+0x8c>
 80041ca:	2200      	movs	r2, #0
 80041cc:	2300      	movs	r3, #0
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7fc fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 80041d6:	b918      	cbnz	r0, 80041e0 <__cvt+0x8c>
 80041d8:	f1c6 0601 	rsb	r6, r6, #1
 80041dc:	f8ca 6000 	str.w	r6, [sl]
 80041e0:	f8da 3000 	ldr.w	r3, [sl]
 80041e4:	4499      	add	r9, r3
 80041e6:	2200      	movs	r2, #0
 80041e8:	2300      	movs	r3, #0
 80041ea:	4620      	mov	r0, r4
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fc fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 80041f2:	b108      	cbz	r0, 80041f8 <__cvt+0xa4>
 80041f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80041f8:	2230      	movs	r2, #48	; 0x30
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	454b      	cmp	r3, r9
 80041fe:	d307      	bcc.n	8004210 <__cvt+0xbc>
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004204:	1bdb      	subs	r3, r3, r7
 8004206:	4638      	mov	r0, r7
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	b004      	add	sp, #16
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	1c59      	adds	r1, r3, #1
 8004212:	9103      	str	r1, [sp, #12]
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e7f0      	b.n	80041fa <__cvt+0xa6>

08004218 <__exponent>:
 8004218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421a:	4603      	mov	r3, r0
 800421c:	2900      	cmp	r1, #0
 800421e:	bfb8      	it	lt
 8004220:	4249      	neglt	r1, r1
 8004222:	f803 2b02 	strb.w	r2, [r3], #2
 8004226:	bfb4      	ite	lt
 8004228:	222d      	movlt	r2, #45	; 0x2d
 800422a:	222b      	movge	r2, #43	; 0x2b
 800422c:	2909      	cmp	r1, #9
 800422e:	7042      	strb	r2, [r0, #1]
 8004230:	dd2a      	ble.n	8004288 <__exponent+0x70>
 8004232:	f10d 0207 	add.w	r2, sp, #7
 8004236:	4617      	mov	r7, r2
 8004238:	260a      	movs	r6, #10
 800423a:	4694      	mov	ip, r2
 800423c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004240:	fb06 1415 	mls	r4, r6, r5, r1
 8004244:	3430      	adds	r4, #48	; 0x30
 8004246:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800424a:	460c      	mov	r4, r1
 800424c:	2c63      	cmp	r4, #99	; 0x63
 800424e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004252:	4629      	mov	r1, r5
 8004254:	dcf1      	bgt.n	800423a <__exponent+0x22>
 8004256:	3130      	adds	r1, #48	; 0x30
 8004258:	f1ac 0402 	sub.w	r4, ip, #2
 800425c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004260:	1c41      	adds	r1, r0, #1
 8004262:	4622      	mov	r2, r4
 8004264:	42ba      	cmp	r2, r7
 8004266:	d30a      	bcc.n	800427e <__exponent+0x66>
 8004268:	f10d 0209 	add.w	r2, sp, #9
 800426c:	eba2 020c 	sub.w	r2, r2, ip
 8004270:	42bc      	cmp	r4, r7
 8004272:	bf88      	it	hi
 8004274:	2200      	movhi	r2, #0
 8004276:	4413      	add	r3, r2
 8004278:	1a18      	subs	r0, r3, r0
 800427a:	b003      	add	sp, #12
 800427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004282:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004286:	e7ed      	b.n	8004264 <__exponent+0x4c>
 8004288:	2330      	movs	r3, #48	; 0x30
 800428a:	3130      	adds	r1, #48	; 0x30
 800428c:	7083      	strb	r3, [r0, #2]
 800428e:	70c1      	strb	r1, [r0, #3]
 8004290:	1d03      	adds	r3, r0, #4
 8004292:	e7f1      	b.n	8004278 <__exponent+0x60>

08004294 <_printf_float>:
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	ed2d 8b02 	vpush	{d8}
 800429c:	b08d      	sub	sp, #52	; 0x34
 800429e:	460c      	mov	r4, r1
 80042a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80042a4:	4616      	mov	r6, r2
 80042a6:	461f      	mov	r7, r3
 80042a8:	4605      	mov	r5, r0
 80042aa:	f001 f8a7 	bl	80053fc <_localeconv_r>
 80042ae:	f8d0 a000 	ldr.w	sl, [r0]
 80042b2:	4650      	mov	r0, sl
 80042b4:	f7fb ffe4 	bl	8000280 <strlen>
 80042b8:	2300      	movs	r3, #0
 80042ba:	930a      	str	r3, [sp, #40]	; 0x28
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	9305      	str	r3, [sp, #20]
 80042c0:	f8d8 3000 	ldr.w	r3, [r8]
 80042c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042c8:	3307      	adds	r3, #7
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	f103 0208 	add.w	r2, r3, #8
 80042d2:	f8c8 2000 	str.w	r2, [r8]
 80042d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042de:	9307      	str	r3, [sp, #28]
 80042e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80042e4:	ee08 0a10 	vmov	s16, r0
 80042e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80042ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042f0:	4b9e      	ldr	r3, [pc, #632]	; (800456c <_printf_float+0x2d8>)
 80042f2:	f04f 32ff 	mov.w	r2, #4294967295
 80042f6:	f7fc fc21 	bl	8000b3c <__aeabi_dcmpun>
 80042fa:	bb88      	cbnz	r0, 8004360 <_printf_float+0xcc>
 80042fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004300:	4b9a      	ldr	r3, [pc, #616]	; (800456c <_printf_float+0x2d8>)
 8004302:	f04f 32ff 	mov.w	r2, #4294967295
 8004306:	f7fc fbfb 	bl	8000b00 <__aeabi_dcmple>
 800430a:	bb48      	cbnz	r0, 8004360 <_printf_float+0xcc>
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	4640      	mov	r0, r8
 8004312:	4649      	mov	r1, r9
 8004314:	f7fc fbea 	bl	8000aec <__aeabi_dcmplt>
 8004318:	b110      	cbz	r0, 8004320 <_printf_float+0x8c>
 800431a:	232d      	movs	r3, #45	; 0x2d
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	4a93      	ldr	r2, [pc, #588]	; (8004570 <_printf_float+0x2dc>)
 8004322:	4b94      	ldr	r3, [pc, #592]	; (8004574 <_printf_float+0x2e0>)
 8004324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004328:	bf94      	ite	ls
 800432a:	4690      	movls	r8, r2
 800432c:	4698      	movhi	r8, r3
 800432e:	2303      	movs	r3, #3
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	9b05      	ldr	r3, [sp, #20]
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	f04f 0900 	mov.w	r9, #0
 800433e:	9700      	str	r7, [sp, #0]
 8004340:	4633      	mov	r3, r6
 8004342:	aa0b      	add	r2, sp, #44	; 0x2c
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f9da 	bl	8004700 <_printf_common>
 800434c:	3001      	adds	r0, #1
 800434e:	f040 8090 	bne.w	8004472 <_printf_float+0x1de>
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	b00d      	add	sp, #52	; 0x34
 8004358:	ecbd 8b02 	vpop	{d8}
 800435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	4640      	mov	r0, r8
 8004366:	4649      	mov	r1, r9
 8004368:	f7fc fbe8 	bl	8000b3c <__aeabi_dcmpun>
 800436c:	b140      	cbz	r0, 8004380 <_printf_float+0xec>
 800436e:	464b      	mov	r3, r9
 8004370:	2b00      	cmp	r3, #0
 8004372:	bfbc      	itt	lt
 8004374:	232d      	movlt	r3, #45	; 0x2d
 8004376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800437a:	4a7f      	ldr	r2, [pc, #508]	; (8004578 <_printf_float+0x2e4>)
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <_printf_float+0x2e8>)
 800437e:	e7d1      	b.n	8004324 <_printf_float+0x90>
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004386:	9206      	str	r2, [sp, #24]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	d13f      	bne.n	800440c <_printf_float+0x178>
 800438c:	2306      	movs	r3, #6
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	9b05      	ldr	r3, [sp, #20]
 8004392:	6861      	ldr	r1, [r4, #4]
 8004394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004398:	2300      	movs	r3, #0
 800439a:	9303      	str	r3, [sp, #12]
 800439c:	ab0a      	add	r3, sp, #40	; 0x28
 800439e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80043a2:	ab09      	add	r3, sp, #36	; 0x24
 80043a4:	ec49 8b10 	vmov	d0, r8, r9
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043b0:	4628      	mov	r0, r5
 80043b2:	f7ff fecf 	bl	8004154 <__cvt>
 80043b6:	9b06      	ldr	r3, [sp, #24]
 80043b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043ba:	2b47      	cmp	r3, #71	; 0x47
 80043bc:	4680      	mov	r8, r0
 80043be:	d108      	bne.n	80043d2 <_printf_float+0x13e>
 80043c0:	1cc8      	adds	r0, r1, #3
 80043c2:	db02      	blt.n	80043ca <_printf_float+0x136>
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	dd41      	ble.n	800444e <_printf_float+0x1ba>
 80043ca:	f1ab 0302 	sub.w	r3, fp, #2
 80043ce:	fa5f fb83 	uxtb.w	fp, r3
 80043d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043d6:	d820      	bhi.n	800441a <_printf_float+0x186>
 80043d8:	3901      	subs	r1, #1
 80043da:	465a      	mov	r2, fp
 80043dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043e0:	9109      	str	r1, [sp, #36]	; 0x24
 80043e2:	f7ff ff19 	bl	8004218 <__exponent>
 80043e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043e8:	1813      	adds	r3, r2, r0
 80043ea:	2a01      	cmp	r2, #1
 80043ec:	4681      	mov	r9, r0
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	dc02      	bgt.n	80043f8 <_printf_float+0x164>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	07d2      	lsls	r2, r2, #31
 80043f6:	d501      	bpl.n	80043fc <_printf_float+0x168>
 80043f8:	3301      	adds	r3, #1
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004400:	2b00      	cmp	r3, #0
 8004402:	d09c      	beq.n	800433e <_printf_float+0xaa>
 8004404:	232d      	movs	r3, #45	; 0x2d
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800440a:	e798      	b.n	800433e <_printf_float+0xaa>
 800440c:	9a06      	ldr	r2, [sp, #24]
 800440e:	2a47      	cmp	r2, #71	; 0x47
 8004410:	d1be      	bne.n	8004390 <_printf_float+0xfc>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1bc      	bne.n	8004390 <_printf_float+0xfc>
 8004416:	2301      	movs	r3, #1
 8004418:	e7b9      	b.n	800438e <_printf_float+0xfa>
 800441a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800441e:	d118      	bne.n	8004452 <_printf_float+0x1be>
 8004420:	2900      	cmp	r1, #0
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	dd0b      	ble.n	800443e <_printf_float+0x1aa>
 8004426:	6121      	str	r1, [r4, #16]
 8004428:	b913      	cbnz	r3, 8004430 <_printf_float+0x19c>
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	07d0      	lsls	r0, r2, #31
 800442e:	d502      	bpl.n	8004436 <_printf_float+0x1a2>
 8004430:	3301      	adds	r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	65a1      	str	r1, [r4, #88]	; 0x58
 8004438:	f04f 0900 	mov.w	r9, #0
 800443c:	e7de      	b.n	80043fc <_printf_float+0x168>
 800443e:	b913      	cbnz	r3, 8004446 <_printf_float+0x1b2>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	07d2      	lsls	r2, r2, #31
 8004444:	d501      	bpl.n	800444a <_printf_float+0x1b6>
 8004446:	3302      	adds	r3, #2
 8004448:	e7f4      	b.n	8004434 <_printf_float+0x1a0>
 800444a:	2301      	movs	r3, #1
 800444c:	e7f2      	b.n	8004434 <_printf_float+0x1a0>
 800444e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004454:	4299      	cmp	r1, r3
 8004456:	db05      	blt.n	8004464 <_printf_float+0x1d0>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	6121      	str	r1, [r4, #16]
 800445c:	07d8      	lsls	r0, r3, #31
 800445e:	d5ea      	bpl.n	8004436 <_printf_float+0x1a2>
 8004460:	1c4b      	adds	r3, r1, #1
 8004462:	e7e7      	b.n	8004434 <_printf_float+0x1a0>
 8004464:	2900      	cmp	r1, #0
 8004466:	bfd4      	ite	le
 8004468:	f1c1 0202 	rsble	r2, r1, #2
 800446c:	2201      	movgt	r2, #1
 800446e:	4413      	add	r3, r2
 8004470:	e7e0      	b.n	8004434 <_printf_float+0x1a0>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	055a      	lsls	r2, r3, #21
 8004476:	d407      	bmi.n	8004488 <_printf_float+0x1f4>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	4642      	mov	r2, r8
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d12c      	bne.n	80044e0 <_printf_float+0x24c>
 8004486:	e764      	b.n	8004352 <_printf_float+0xbe>
 8004488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800448c:	f240 80e0 	bls.w	8004650 <_printf_float+0x3bc>
 8004490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	f7fc fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800449c:	2800      	cmp	r0, #0
 800449e:	d034      	beq.n	800450a <_printf_float+0x276>
 80044a0:	4a37      	ldr	r2, [pc, #220]	; (8004580 <_printf_float+0x2ec>)
 80044a2:	2301      	movs	r3, #1
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f af51 	beq.w	8004352 <_printf_float+0xbe>
 80044b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b4:	429a      	cmp	r2, r3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x22a>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	07d8      	lsls	r0, r3, #31
 80044bc:	d510      	bpl.n	80044e0 <_printf_float+0x24c>
 80044be:	ee18 3a10 	vmov	r3, s16
 80044c2:	4652      	mov	r2, sl
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f af41 	beq.w	8004352 <_printf_float+0xbe>
 80044d0:	f04f 0800 	mov.w	r8, #0
 80044d4:	f104 091a 	add.w	r9, r4, #26
 80044d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	4543      	cmp	r3, r8
 80044de:	dc09      	bgt.n	80044f4 <_printf_float+0x260>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	079b      	lsls	r3, r3, #30
 80044e4:	f100 8107 	bmi.w	80046f6 <_printf_float+0x462>
 80044e8:	68e0      	ldr	r0, [r4, #12]
 80044ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ec:	4298      	cmp	r0, r3
 80044ee:	bfb8      	it	lt
 80044f0:	4618      	movlt	r0, r3
 80044f2:	e730      	b.n	8004356 <_printf_float+0xc2>
 80044f4:	2301      	movs	r3, #1
 80044f6:	464a      	mov	r2, r9
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f af27 	beq.w	8004352 <_printf_float+0xbe>
 8004504:	f108 0801 	add.w	r8, r8, #1
 8004508:	e7e6      	b.n	80044d8 <_printf_float+0x244>
 800450a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc39      	bgt.n	8004584 <_printf_float+0x2f0>
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <_printf_float+0x2ec>)
 8004512:	2301      	movs	r3, #1
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	f43f af19 	beq.w	8004352 <_printf_float+0xbe>
 8004520:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004524:	4313      	orrs	r3, r2
 8004526:	d102      	bne.n	800452e <_printf_float+0x29a>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07d9      	lsls	r1, r3, #31
 800452c:	d5d8      	bpl.n	80044e0 <_printf_float+0x24c>
 800452e:	ee18 3a10 	vmov	r3, s16
 8004532:	4652      	mov	r2, sl
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f af09 	beq.w	8004352 <_printf_float+0xbe>
 8004540:	f04f 0900 	mov.w	r9, #0
 8004544:	f104 0a1a 	add.w	sl, r4, #26
 8004548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454a:	425b      	negs	r3, r3
 800454c:	454b      	cmp	r3, r9
 800454e:	dc01      	bgt.n	8004554 <_printf_float+0x2c0>
 8004550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004552:	e792      	b.n	800447a <_printf_float+0x1e6>
 8004554:	2301      	movs	r3, #1
 8004556:	4652      	mov	r2, sl
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	f43f aef7 	beq.w	8004352 <_printf_float+0xbe>
 8004564:	f109 0901 	add.w	r9, r9, #1
 8004568:	e7ee      	b.n	8004548 <_printf_float+0x2b4>
 800456a:	bf00      	nop
 800456c:	7fefffff 	.word	0x7fefffff
 8004570:	08008be0 	.word	0x08008be0
 8004574:	08008be4 	.word	0x08008be4
 8004578:	08008be8 	.word	0x08008be8
 800457c:	08008bec 	.word	0x08008bec
 8004580:	08008bf0 	.word	0x08008bf0
 8004584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004588:	429a      	cmp	r2, r3
 800458a:	bfa8      	it	ge
 800458c:	461a      	movge	r2, r3
 800458e:	2a00      	cmp	r2, #0
 8004590:	4691      	mov	r9, r2
 8004592:	dc37      	bgt.n	8004604 <_printf_float+0x370>
 8004594:	f04f 0b00 	mov.w	fp, #0
 8004598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800459c:	f104 021a 	add.w	r2, r4, #26
 80045a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045a2:	9305      	str	r3, [sp, #20]
 80045a4:	eba3 0309 	sub.w	r3, r3, r9
 80045a8:	455b      	cmp	r3, fp
 80045aa:	dc33      	bgt.n	8004614 <_printf_float+0x380>
 80045ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b0:	429a      	cmp	r2, r3
 80045b2:	db3b      	blt.n	800462c <_printf_float+0x398>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07da      	lsls	r2, r3, #31
 80045b8:	d438      	bmi.n	800462c <_printf_float+0x398>
 80045ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045be:	eba2 0903 	sub.w	r9, r2, r3
 80045c2:	9b05      	ldr	r3, [sp, #20]
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	4591      	cmp	r9, r2
 80045c8:	bfa8      	it	ge
 80045ca:	4691      	movge	r9, r2
 80045cc:	f1b9 0f00 	cmp.w	r9, #0
 80045d0:	dc35      	bgt.n	800463e <_printf_float+0x3aa>
 80045d2:	f04f 0800 	mov.w	r8, #0
 80045d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045da:	f104 0a1a 	add.w	sl, r4, #26
 80045de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	eba3 0309 	sub.w	r3, r3, r9
 80045e8:	4543      	cmp	r3, r8
 80045ea:	f77f af79 	ble.w	80044e0 <_printf_float+0x24c>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f aeaa 	beq.w	8004352 <_printf_float+0xbe>
 80045fe:	f108 0801 	add.w	r8, r8, #1
 8004602:	e7ec      	b.n	80045de <_printf_float+0x34a>
 8004604:	4613      	mov	r3, r2
 8004606:	4631      	mov	r1, r6
 8004608:	4642      	mov	r2, r8
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d1c0      	bne.n	8004594 <_printf_float+0x300>
 8004612:	e69e      	b.n	8004352 <_printf_float+0xbe>
 8004614:	2301      	movs	r3, #1
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	9205      	str	r2, [sp, #20]
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f ae97 	beq.w	8004352 <_printf_float+0xbe>
 8004624:	9a05      	ldr	r2, [sp, #20]
 8004626:	f10b 0b01 	add.w	fp, fp, #1
 800462a:	e7b9      	b.n	80045a0 <_printf_float+0x30c>
 800462c:	ee18 3a10 	vmov	r3, s16
 8004630:	4652      	mov	r2, sl
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	d1be      	bne.n	80045ba <_printf_float+0x326>
 800463c:	e689      	b.n	8004352 <_printf_float+0xbe>
 800463e:	9a05      	ldr	r2, [sp, #20]
 8004640:	464b      	mov	r3, r9
 8004642:	4442      	add	r2, r8
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	d1c1      	bne.n	80045d2 <_printf_float+0x33e>
 800464e:	e680      	b.n	8004352 <_printf_float+0xbe>
 8004650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004652:	2a01      	cmp	r2, #1
 8004654:	dc01      	bgt.n	800465a <_printf_float+0x3c6>
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d53a      	bpl.n	80046d0 <_printf_float+0x43c>
 800465a:	2301      	movs	r3, #1
 800465c:	4642      	mov	r2, r8
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f ae74 	beq.w	8004352 <_printf_float+0xbe>
 800466a:	ee18 3a10 	vmov	r3, s16
 800466e:	4652      	mov	r2, sl
 8004670:	4631      	mov	r1, r6
 8004672:	4628      	mov	r0, r5
 8004674:	47b8      	blx	r7
 8004676:	3001      	adds	r0, #1
 8004678:	f43f ae6b 	beq.w	8004352 <_printf_float+0xbe>
 800467c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004688:	f7fc fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800468c:	b9d8      	cbnz	r0, 80046c6 <_printf_float+0x432>
 800468e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004692:	f108 0201 	add.w	r2, r8, #1
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	d10e      	bne.n	80046be <_printf_float+0x42a>
 80046a0:	e657      	b.n	8004352 <_printf_float+0xbe>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f ae50 	beq.w	8004352 <_printf_float+0xbe>
 80046b2:	f108 0801 	add.w	r8, r8, #1
 80046b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	4543      	cmp	r3, r8
 80046bc:	dcf1      	bgt.n	80046a2 <_printf_float+0x40e>
 80046be:	464b      	mov	r3, r9
 80046c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046c4:	e6da      	b.n	800447c <_printf_float+0x1e8>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	f104 0a1a 	add.w	sl, r4, #26
 80046ce:	e7f2      	b.n	80046b6 <_printf_float+0x422>
 80046d0:	2301      	movs	r3, #1
 80046d2:	4642      	mov	r2, r8
 80046d4:	e7df      	b.n	8004696 <_printf_float+0x402>
 80046d6:	2301      	movs	r3, #1
 80046d8:	464a      	mov	r2, r9
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f ae36 	beq.w	8004352 <_printf_float+0xbe>
 80046e6:	f108 0801 	add.w	r8, r8, #1
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ee:	1a5b      	subs	r3, r3, r1
 80046f0:	4543      	cmp	r3, r8
 80046f2:	dcf0      	bgt.n	80046d6 <_printf_float+0x442>
 80046f4:	e6f8      	b.n	80044e8 <_printf_float+0x254>
 80046f6:	f04f 0800 	mov.w	r8, #0
 80046fa:	f104 0919 	add.w	r9, r4, #25
 80046fe:	e7f4      	b.n	80046ea <_printf_float+0x456>

08004700 <_printf_common>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4616      	mov	r6, r2
 8004706:	4699      	mov	r9, r3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004710:	4293      	cmp	r3, r2
 8004712:	bfb8      	it	lt
 8004714:	4613      	movlt	r3, r2
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800471c:	4607      	mov	r7, r0
 800471e:	460c      	mov	r4, r1
 8004720:	b10a      	cbz	r2, 8004726 <_printf_common+0x26>
 8004722:	3301      	adds	r3, #1
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0699      	lsls	r1, r3, #26
 800472a:	bf42      	ittt	mi
 800472c:	6833      	ldrmi	r3, [r6, #0]
 800472e:	3302      	addmi	r3, #2
 8004730:	6033      	strmi	r3, [r6, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d106      	bne.n	8004748 <_printf_common+0x48>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	42ab      	cmp	r3, r5
 8004746:	dc26      	bgt.n	8004796 <_printf_common+0x96>
 8004748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800474c:	1e13      	subs	r3, r2, #0
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	2301      	movne	r3, #1
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d42b      	bmi.n	80047b0 <_printf_common+0xb0>
 8004758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800475c:	4649      	mov	r1, r9
 800475e:	4638      	mov	r0, r7
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d01e      	beq.n	80047a4 <_printf_common+0xa4>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	6922      	ldr	r2, [r4, #16]
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	2b04      	cmp	r3, #4
 8004770:	bf02      	ittt	eq
 8004772:	68e5      	ldreq	r5, [r4, #12]
 8004774:	6833      	ldreq	r3, [r6, #0]
 8004776:	1aed      	subeq	r5, r5, r3
 8004778:	68a3      	ldr	r3, [r4, #8]
 800477a:	bf0c      	ite	eq
 800477c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004780:	2500      	movne	r5, #0
 8004782:	4293      	cmp	r3, r2
 8004784:	bfc4      	itt	gt
 8004786:	1a9b      	subgt	r3, r3, r2
 8004788:	18ed      	addgt	r5, r5, r3
 800478a:	2600      	movs	r6, #0
 800478c:	341a      	adds	r4, #26
 800478e:	42b5      	cmp	r5, r6
 8004790:	d11a      	bne.n	80047c8 <_printf_common+0xc8>
 8004792:	2000      	movs	r0, #0
 8004794:	e008      	b.n	80047a8 <_printf_common+0xa8>
 8004796:	2301      	movs	r3, #1
 8004798:	4652      	mov	r2, sl
 800479a:	4649      	mov	r1, r9
 800479c:	4638      	mov	r0, r7
 800479e:	47c0      	blx	r8
 80047a0:	3001      	adds	r0, #1
 80047a2:	d103      	bne.n	80047ac <_printf_common+0xac>
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ac:	3501      	adds	r5, #1
 80047ae:	e7c6      	b.n	800473e <_printf_common+0x3e>
 80047b0:	18e1      	adds	r1, r4, r3
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	2030      	movs	r0, #48	; 0x30
 80047b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ba:	4422      	add	r2, r4
 80047bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047c4:	3302      	adds	r3, #2
 80047c6:	e7c7      	b.n	8004758 <_printf_common+0x58>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4622      	mov	r2, r4
 80047cc:	4649      	mov	r1, r9
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c0      	blx	r8
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0e6      	beq.n	80047a4 <_printf_common+0xa4>
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7d9      	b.n	800478e <_printf_common+0x8e>
	...

080047dc <_printf_i>:
 80047dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	7e0f      	ldrb	r7, [r1, #24]
 80047e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047e4:	2f78      	cmp	r7, #120	; 0x78
 80047e6:	4691      	mov	r9, r2
 80047e8:	4680      	mov	r8, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	469a      	mov	sl, r3
 80047ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047f2:	d807      	bhi.n	8004804 <_printf_i+0x28>
 80047f4:	2f62      	cmp	r7, #98	; 0x62
 80047f6:	d80a      	bhi.n	800480e <_printf_i+0x32>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	f000 80d4 	beq.w	80049a6 <_printf_i+0x1ca>
 80047fe:	2f58      	cmp	r7, #88	; 0x58
 8004800:	f000 80c0 	beq.w	8004984 <_printf_i+0x1a8>
 8004804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800480c:	e03a      	b.n	8004884 <_printf_i+0xa8>
 800480e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004812:	2b15      	cmp	r3, #21
 8004814:	d8f6      	bhi.n	8004804 <_printf_i+0x28>
 8004816:	a101      	add	r1, pc, #4	; (adr r1, 800481c <_printf_i+0x40>)
 8004818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800481c:	08004875 	.word	0x08004875
 8004820:	08004889 	.word	0x08004889
 8004824:	08004805 	.word	0x08004805
 8004828:	08004805 	.word	0x08004805
 800482c:	08004805 	.word	0x08004805
 8004830:	08004805 	.word	0x08004805
 8004834:	08004889 	.word	0x08004889
 8004838:	08004805 	.word	0x08004805
 800483c:	08004805 	.word	0x08004805
 8004840:	08004805 	.word	0x08004805
 8004844:	08004805 	.word	0x08004805
 8004848:	0800498d 	.word	0x0800498d
 800484c:	080048b5 	.word	0x080048b5
 8004850:	08004947 	.word	0x08004947
 8004854:	08004805 	.word	0x08004805
 8004858:	08004805 	.word	0x08004805
 800485c:	080049af 	.word	0x080049af
 8004860:	08004805 	.word	0x08004805
 8004864:	080048b5 	.word	0x080048b5
 8004868:	08004805 	.word	0x08004805
 800486c:	08004805 	.word	0x08004805
 8004870:	0800494f 	.word	0x0800494f
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	602a      	str	r2, [r5, #0]
 800487c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004884:	2301      	movs	r3, #1
 8004886:	e09f      	b.n	80049c8 <_printf_i+0x1ec>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	682b      	ldr	r3, [r5, #0]
 800488c:	0607      	lsls	r7, r0, #24
 800488e:	f103 0104 	add.w	r1, r3, #4
 8004892:	6029      	str	r1, [r5, #0]
 8004894:	d501      	bpl.n	800489a <_printf_i+0xbe>
 8004896:	681e      	ldr	r6, [r3, #0]
 8004898:	e003      	b.n	80048a2 <_printf_i+0xc6>
 800489a:	0646      	lsls	r6, r0, #25
 800489c:	d5fb      	bpl.n	8004896 <_printf_i+0xba>
 800489e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	da03      	bge.n	80048ae <_printf_i+0xd2>
 80048a6:	232d      	movs	r3, #45	; 0x2d
 80048a8:	4276      	negs	r6, r6
 80048aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ae:	485a      	ldr	r0, [pc, #360]	; (8004a18 <_printf_i+0x23c>)
 80048b0:	230a      	movs	r3, #10
 80048b2:	e012      	b.n	80048da <_printf_i+0xfe>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	6029      	str	r1, [r5, #0]
 80048bc:	0605      	lsls	r5, r0, #24
 80048be:	d501      	bpl.n	80048c4 <_printf_i+0xe8>
 80048c0:	681e      	ldr	r6, [r3, #0]
 80048c2:	e002      	b.n	80048ca <_printf_i+0xee>
 80048c4:	0641      	lsls	r1, r0, #25
 80048c6:	d5fb      	bpl.n	80048c0 <_printf_i+0xe4>
 80048c8:	881e      	ldrh	r6, [r3, #0]
 80048ca:	4853      	ldr	r0, [pc, #332]	; (8004a18 <_printf_i+0x23c>)
 80048cc:	2f6f      	cmp	r7, #111	; 0x6f
 80048ce:	bf0c      	ite	eq
 80048d0:	2308      	moveq	r3, #8
 80048d2:	230a      	movne	r3, #10
 80048d4:	2100      	movs	r1, #0
 80048d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048da:	6865      	ldr	r5, [r4, #4]
 80048dc:	60a5      	str	r5, [r4, #8]
 80048de:	2d00      	cmp	r5, #0
 80048e0:	bfa2      	ittt	ge
 80048e2:	6821      	ldrge	r1, [r4, #0]
 80048e4:	f021 0104 	bicge.w	r1, r1, #4
 80048e8:	6021      	strge	r1, [r4, #0]
 80048ea:	b90e      	cbnz	r6, 80048f0 <_printf_i+0x114>
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	d04b      	beq.n	8004988 <_printf_i+0x1ac>
 80048f0:	4615      	mov	r5, r2
 80048f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048f6:	fb03 6711 	mls	r7, r3, r1, r6
 80048fa:	5dc7      	ldrb	r7, [r0, r7]
 80048fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004900:	4637      	mov	r7, r6
 8004902:	42bb      	cmp	r3, r7
 8004904:	460e      	mov	r6, r1
 8004906:	d9f4      	bls.n	80048f2 <_printf_i+0x116>
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10b      	bne.n	8004924 <_printf_i+0x148>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	07de      	lsls	r6, r3, #31
 8004910:	d508      	bpl.n	8004924 <_printf_i+0x148>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	6861      	ldr	r1, [r4, #4]
 8004916:	4299      	cmp	r1, r3
 8004918:	bfde      	ittt	le
 800491a:	2330      	movle	r3, #48	; 0x30
 800491c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004924:	1b52      	subs	r2, r2, r5
 8004926:	6122      	str	r2, [r4, #16]
 8004928:	f8cd a000 	str.w	sl, [sp]
 800492c:	464b      	mov	r3, r9
 800492e:	aa03      	add	r2, sp, #12
 8004930:	4621      	mov	r1, r4
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff fee4 	bl	8004700 <_printf_common>
 8004938:	3001      	adds	r0, #1
 800493a:	d14a      	bne.n	80049d2 <_printf_i+0x1f6>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	b004      	add	sp, #16
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	4833      	ldr	r0, [pc, #204]	; (8004a1c <_printf_i+0x240>)
 8004950:	2778      	movs	r7, #120	; 0x78
 8004952:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	6829      	ldr	r1, [r5, #0]
 800495a:	061f      	lsls	r7, r3, #24
 800495c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004960:	d402      	bmi.n	8004968 <_printf_i+0x18c>
 8004962:	065f      	lsls	r7, r3, #25
 8004964:	bf48      	it	mi
 8004966:	b2b6      	uxthmi	r6, r6
 8004968:	07df      	lsls	r7, r3, #31
 800496a:	bf48      	it	mi
 800496c:	f043 0320 	orrmi.w	r3, r3, #32
 8004970:	6029      	str	r1, [r5, #0]
 8004972:	bf48      	it	mi
 8004974:	6023      	strmi	r3, [r4, #0]
 8004976:	b91e      	cbnz	r6, 8004980 <_printf_i+0x1a4>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	f023 0320 	bic.w	r3, r3, #32
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	2310      	movs	r3, #16
 8004982:	e7a7      	b.n	80048d4 <_printf_i+0xf8>
 8004984:	4824      	ldr	r0, [pc, #144]	; (8004a18 <_printf_i+0x23c>)
 8004986:	e7e4      	b.n	8004952 <_printf_i+0x176>
 8004988:	4615      	mov	r5, r2
 800498a:	e7bd      	b.n	8004908 <_printf_i+0x12c>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	6826      	ldr	r6, [r4, #0]
 8004990:	6961      	ldr	r1, [r4, #20]
 8004992:	1d18      	adds	r0, r3, #4
 8004994:	6028      	str	r0, [r5, #0]
 8004996:	0635      	lsls	r5, r6, #24
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0x1c4>
 800499c:	6019      	str	r1, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0x1ca>
 80049a0:	0670      	lsls	r0, r6, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0x1c0>
 80049a4:	8019      	strh	r1, [r3, #0]
 80049a6:	2300      	movs	r3, #0
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	4615      	mov	r5, r2
 80049ac:	e7bc      	b.n	8004928 <_printf_i+0x14c>
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	681d      	ldr	r5, [r3, #0]
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	2100      	movs	r1, #0
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7fb fc10 	bl	80001e0 <memchr>
 80049c0:	b108      	cbz	r0, 80049c6 <_printf_i+0x1ea>
 80049c2:	1b40      	subs	r0, r0, r5
 80049c4:	6060      	str	r0, [r4, #4]
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	2300      	movs	r3, #0
 80049cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d0:	e7aa      	b.n	8004928 <_printf_i+0x14c>
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4649      	mov	r1, r9
 80049d8:	4640      	mov	r0, r8
 80049da:	47d0      	blx	sl
 80049dc:	3001      	adds	r0, #1
 80049de:	d0ad      	beq.n	800493c <_printf_i+0x160>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	079b      	lsls	r3, r3, #30
 80049e4:	d413      	bmi.n	8004a0e <_printf_i+0x232>
 80049e6:	68e0      	ldr	r0, [r4, #12]
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	4298      	cmp	r0, r3
 80049ec:	bfb8      	it	lt
 80049ee:	4618      	movlt	r0, r3
 80049f0:	e7a6      	b.n	8004940 <_printf_i+0x164>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4632      	mov	r2, r6
 80049f6:	4649      	mov	r1, r9
 80049f8:	4640      	mov	r0, r8
 80049fa:	47d0      	blx	sl
 80049fc:	3001      	adds	r0, #1
 80049fe:	d09d      	beq.n	800493c <_printf_i+0x160>
 8004a00:	3501      	adds	r5, #1
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	9903      	ldr	r1, [sp, #12]
 8004a06:	1a5b      	subs	r3, r3, r1
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	dcf2      	bgt.n	80049f2 <_printf_i+0x216>
 8004a0c:	e7eb      	b.n	80049e6 <_printf_i+0x20a>
 8004a0e:	2500      	movs	r5, #0
 8004a10:	f104 0619 	add.w	r6, r4, #25
 8004a14:	e7f5      	b.n	8004a02 <_printf_i+0x226>
 8004a16:	bf00      	nop
 8004a18:	08008bf2 	.word	0x08008bf2
 8004a1c:	08008c03 	.word	0x08008c03

08004a20 <_scanf_float>:
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	b087      	sub	sp, #28
 8004a26:	4617      	mov	r7, r2
 8004a28:	9303      	str	r3, [sp, #12]
 8004a2a:	688b      	ldr	r3, [r1, #8]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a32:	bf83      	ittte	hi
 8004a34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a38:	195b      	addhi	r3, r3, r5
 8004a3a:	9302      	strhi	r3, [sp, #8]
 8004a3c:	2300      	movls	r3, #0
 8004a3e:	bf86      	itte	hi
 8004a40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a44:	608b      	strhi	r3, [r1, #8]
 8004a46:	9302      	strls	r3, [sp, #8]
 8004a48:	680b      	ldr	r3, [r1, #0]
 8004a4a:	468b      	mov	fp, r1
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004a52:	f84b 3b1c 	str.w	r3, [fp], #28
 8004a56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	465e      	mov	r6, fp
 8004a60:	46aa      	mov	sl, r5
 8004a62:	46a9      	mov	r9, r5
 8004a64:	9501      	str	r5, [sp, #4]
 8004a66:	68a2      	ldr	r2, [r4, #8]
 8004a68:	b152      	cbz	r2, 8004a80 <_scanf_float+0x60>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b4e      	cmp	r3, #78	; 0x4e
 8004a70:	d864      	bhi.n	8004b3c <_scanf_float+0x11c>
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d83c      	bhi.n	8004af0 <_scanf_float+0xd0>
 8004a76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004a7a:	b2c8      	uxtb	r0, r1
 8004a7c:	280e      	cmp	r0, #14
 8004a7e:	d93a      	bls.n	8004af6 <_scanf_float+0xd6>
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	d003      	beq.n	8004a8e <_scanf_float+0x6e>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a92:	f1ba 0f01 	cmp.w	sl, #1
 8004a96:	f200 8113 	bhi.w	8004cc0 <_scanf_float+0x2a0>
 8004a9a:	455e      	cmp	r6, fp
 8004a9c:	f200 8105 	bhi.w	8004caa <_scanf_float+0x28a>
 8004aa0:	2501      	movs	r5, #1
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	b007      	add	sp, #28
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aaa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004aae:	2a0d      	cmp	r2, #13
 8004ab0:	d8e6      	bhi.n	8004a80 <_scanf_float+0x60>
 8004ab2:	a101      	add	r1, pc, #4	; (adr r1, 8004ab8 <_scanf_float+0x98>)
 8004ab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ab8:	08004bf7 	.word	0x08004bf7
 8004abc:	08004a81 	.word	0x08004a81
 8004ac0:	08004a81 	.word	0x08004a81
 8004ac4:	08004a81 	.word	0x08004a81
 8004ac8:	08004c57 	.word	0x08004c57
 8004acc:	08004c2f 	.word	0x08004c2f
 8004ad0:	08004a81 	.word	0x08004a81
 8004ad4:	08004a81 	.word	0x08004a81
 8004ad8:	08004c05 	.word	0x08004c05
 8004adc:	08004a81 	.word	0x08004a81
 8004ae0:	08004a81 	.word	0x08004a81
 8004ae4:	08004a81 	.word	0x08004a81
 8004ae8:	08004a81 	.word	0x08004a81
 8004aec:	08004bbd 	.word	0x08004bbd
 8004af0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004af4:	e7db      	b.n	8004aae <_scanf_float+0x8e>
 8004af6:	290e      	cmp	r1, #14
 8004af8:	d8c2      	bhi.n	8004a80 <_scanf_float+0x60>
 8004afa:	a001      	add	r0, pc, #4	; (adr r0, 8004b00 <_scanf_float+0xe0>)
 8004afc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004b00:	08004baf 	.word	0x08004baf
 8004b04:	08004a81 	.word	0x08004a81
 8004b08:	08004baf 	.word	0x08004baf
 8004b0c:	08004c43 	.word	0x08004c43
 8004b10:	08004a81 	.word	0x08004a81
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b99 	.word	0x08004b99
 8004b1c:	08004b99 	.word	0x08004b99
 8004b20:	08004b99 	.word	0x08004b99
 8004b24:	08004b99 	.word	0x08004b99
 8004b28:	08004b99 	.word	0x08004b99
 8004b2c:	08004b99 	.word	0x08004b99
 8004b30:	08004b99 	.word	0x08004b99
 8004b34:	08004b99 	.word	0x08004b99
 8004b38:	08004b99 	.word	0x08004b99
 8004b3c:	2b6e      	cmp	r3, #110	; 0x6e
 8004b3e:	d809      	bhi.n	8004b54 <_scanf_float+0x134>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d8b2      	bhi.n	8004aaa <_scanf_float+0x8a>
 8004b44:	2b54      	cmp	r3, #84	; 0x54
 8004b46:	d077      	beq.n	8004c38 <_scanf_float+0x218>
 8004b48:	2b59      	cmp	r3, #89	; 0x59
 8004b4a:	d199      	bne.n	8004a80 <_scanf_float+0x60>
 8004b4c:	2d07      	cmp	r5, #7
 8004b4e:	d197      	bne.n	8004a80 <_scanf_float+0x60>
 8004b50:	2508      	movs	r5, #8
 8004b52:	e029      	b.n	8004ba8 <_scanf_float+0x188>
 8004b54:	2b74      	cmp	r3, #116	; 0x74
 8004b56:	d06f      	beq.n	8004c38 <_scanf_float+0x218>
 8004b58:	2b79      	cmp	r3, #121	; 0x79
 8004b5a:	e7f6      	b.n	8004b4a <_scanf_float+0x12a>
 8004b5c:	6821      	ldr	r1, [r4, #0]
 8004b5e:	05c8      	lsls	r0, r1, #23
 8004b60:	d51a      	bpl.n	8004b98 <_scanf_float+0x178>
 8004b62:	9b02      	ldr	r3, [sp, #8]
 8004b64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b68:	6021      	str	r1, [r4, #0]
 8004b6a:	f109 0901 	add.w	r9, r9, #1
 8004b6e:	b11b      	cbz	r3, 8004b78 <_scanf_float+0x158>
 8004b70:	3b01      	subs	r3, #1
 8004b72:	3201      	adds	r2, #1
 8004b74:	9302      	str	r3, [sp, #8]
 8004b76:	60a2      	str	r2, [r4, #8]
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	f340 8084 	ble.w	8004c98 <_scanf_float+0x278>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	e766      	b.n	8004a66 <_scanf_float+0x46>
 8004b98:	eb1a 0f05 	cmn.w	sl, r5
 8004b9c:	f47f af70 	bne.w	8004a80 <_scanf_float+0x60>
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	f806 3b01 	strb.w	r3, [r6], #1
 8004bac:	e7e4      	b.n	8004b78 <_scanf_float+0x158>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	0610      	lsls	r0, r2, #24
 8004bb2:	f57f af65 	bpl.w	8004a80 <_scanf_float+0x60>
 8004bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bba:	e7f4      	b.n	8004ba6 <_scanf_float+0x186>
 8004bbc:	f1ba 0f00 	cmp.w	sl, #0
 8004bc0:	d10e      	bne.n	8004be0 <_scanf_float+0x1c0>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	d10e      	bne.n	8004be6 <_scanf_float+0x1c6>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004bce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004bd2:	d108      	bne.n	8004be6 <_scanf_float+0x1c6>
 8004bd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	f04f 0a01 	mov.w	sl, #1
 8004bde:	e7e3      	b.n	8004ba8 <_scanf_float+0x188>
 8004be0:	f1ba 0f02 	cmp.w	sl, #2
 8004be4:	d055      	beq.n	8004c92 <_scanf_float+0x272>
 8004be6:	2d01      	cmp	r5, #1
 8004be8:	d002      	beq.n	8004bf0 <_scanf_float+0x1d0>
 8004bea:	2d04      	cmp	r5, #4
 8004bec:	f47f af48 	bne.w	8004a80 <_scanf_float+0x60>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	b2ed      	uxtb	r5, r5
 8004bf4:	e7d8      	b.n	8004ba8 <_scanf_float+0x188>
 8004bf6:	f1ba 0f01 	cmp.w	sl, #1
 8004bfa:	f47f af41 	bne.w	8004a80 <_scanf_float+0x60>
 8004bfe:	f04f 0a02 	mov.w	sl, #2
 8004c02:	e7d1      	b.n	8004ba8 <_scanf_float+0x188>
 8004c04:	b97d      	cbnz	r5, 8004c26 <_scanf_float+0x206>
 8004c06:	f1b9 0f00 	cmp.w	r9, #0
 8004c0a:	f47f af3c 	bne.w	8004a86 <_scanf_float+0x66>
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004c14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c18:	f47f af39 	bne.w	8004a8e <_scanf_float+0x6e>
 8004c1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c20:	6022      	str	r2, [r4, #0]
 8004c22:	2501      	movs	r5, #1
 8004c24:	e7c0      	b.n	8004ba8 <_scanf_float+0x188>
 8004c26:	2d03      	cmp	r5, #3
 8004c28:	d0e2      	beq.n	8004bf0 <_scanf_float+0x1d0>
 8004c2a:	2d05      	cmp	r5, #5
 8004c2c:	e7de      	b.n	8004bec <_scanf_float+0x1cc>
 8004c2e:	2d02      	cmp	r5, #2
 8004c30:	f47f af26 	bne.w	8004a80 <_scanf_float+0x60>
 8004c34:	2503      	movs	r5, #3
 8004c36:	e7b7      	b.n	8004ba8 <_scanf_float+0x188>
 8004c38:	2d06      	cmp	r5, #6
 8004c3a:	f47f af21 	bne.w	8004a80 <_scanf_float+0x60>
 8004c3e:	2507      	movs	r5, #7
 8004c40:	e7b2      	b.n	8004ba8 <_scanf_float+0x188>
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	0591      	lsls	r1, r2, #22
 8004c46:	f57f af1b 	bpl.w	8004a80 <_scanf_float+0x60>
 8004c4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c54:	e7a8      	b.n	8004ba8 <_scanf_float+0x188>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004c5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004c60:	d006      	beq.n	8004c70 <_scanf_float+0x250>
 8004c62:	0550      	lsls	r0, r2, #21
 8004c64:	f57f af0c 	bpl.w	8004a80 <_scanf_float+0x60>
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	f43f af0f 	beq.w	8004a8e <_scanf_float+0x6e>
 8004c70:	0591      	lsls	r1, r2, #22
 8004c72:	bf58      	it	pl
 8004c74:	9901      	ldrpl	r1, [sp, #4]
 8004c76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c7a:	bf58      	it	pl
 8004c7c:	eba9 0101 	subpl.w	r1, r9, r1
 8004c80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004c84:	bf58      	it	pl
 8004c86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c8a:	6022      	str	r2, [r4, #0]
 8004c8c:	f04f 0900 	mov.w	r9, #0
 8004c90:	e78a      	b.n	8004ba8 <_scanf_float+0x188>
 8004c92:	f04f 0a03 	mov.w	sl, #3
 8004c96:	e787      	b.n	8004ba8 <_scanf_float+0x188>
 8004c98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	4798      	blx	r3
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f aedf 	beq.w	8004a66 <_scanf_float+0x46>
 8004ca8:	e6ea      	b.n	8004a80 <_scanf_float+0x60>
 8004caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cb2:	463a      	mov	r2, r7
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	4798      	blx	r3
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	e6ec      	b.n	8004a9a <_scanf_float+0x7a>
 8004cc0:	1e6b      	subs	r3, r5, #1
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d825      	bhi.n	8004d12 <_scanf_float+0x2f2>
 8004cc6:	2d02      	cmp	r5, #2
 8004cc8:	d836      	bhi.n	8004d38 <_scanf_float+0x318>
 8004cca:	455e      	cmp	r6, fp
 8004ccc:	f67f aee8 	bls.w	8004aa0 <_scanf_float+0x80>
 8004cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4798      	blx	r3
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	e7f1      	b.n	8004cca <_scanf_float+0x2aa>
 8004ce6:	9802      	ldr	r0, [sp, #8]
 8004ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004cf0:	9002      	str	r0, [sp, #8]
 8004cf2:	463a      	mov	r2, r7
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	4798      	blx	r3
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d02:	fa5f fa8a 	uxtb.w	sl, sl
 8004d06:	f1ba 0f02 	cmp.w	sl, #2
 8004d0a:	d1ec      	bne.n	8004ce6 <_scanf_float+0x2c6>
 8004d0c:	3d03      	subs	r5, #3
 8004d0e:	b2ed      	uxtb	r5, r5
 8004d10:	1b76      	subs	r6, r6, r5
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	05da      	lsls	r2, r3, #23
 8004d16:	d52f      	bpl.n	8004d78 <_scanf_float+0x358>
 8004d18:	055b      	lsls	r3, r3, #21
 8004d1a:	d510      	bpl.n	8004d3e <_scanf_float+0x31e>
 8004d1c:	455e      	cmp	r6, fp
 8004d1e:	f67f aebf 	bls.w	8004aa0 <_scanf_float+0x80>
 8004d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d2a:	463a      	mov	r2, r7
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4798      	blx	r3
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7f1      	b.n	8004d1c <_scanf_float+0x2fc>
 8004d38:	46aa      	mov	sl, r5
 8004d3a:	9602      	str	r6, [sp, #8]
 8004d3c:	e7df      	b.n	8004cfe <_scanf_float+0x2de>
 8004d3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2965      	cmp	r1, #101	; 0x65
 8004d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	d00c      	beq.n	8004d6c <_scanf_float+0x34c>
 8004d52:	2945      	cmp	r1, #69	; 0x45
 8004d54:	d00a      	beq.n	8004d6c <_scanf_float+0x34c>
 8004d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d5a:	463a      	mov	r2, r7
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4798      	blx	r3
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	1eb5      	subs	r5, r6, #2
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d70:	463a      	mov	r2, r7
 8004d72:	4640      	mov	r0, r8
 8004d74:	4798      	blx	r3
 8004d76:	462e      	mov	r6, r5
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	f015 0510 	ands.w	r5, r5, #16
 8004d7e:	d158      	bne.n	8004e32 <_scanf_float+0x412>
 8004d80:	7035      	strb	r5, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d11c      	bne.n	8004dc8 <_scanf_float+0x3a8>
 8004d8e:	9b01      	ldr	r3, [sp, #4]
 8004d90:	454b      	cmp	r3, r9
 8004d92:	eba3 0209 	sub.w	r2, r3, r9
 8004d96:	d124      	bne.n	8004de2 <_scanf_float+0x3c2>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	f002 fddf 	bl	8007960 <_strtod_r>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f011 0f02 	tst.w	r1, #2
 8004dac:	ec57 6b10 	vmov	r6, r7, d0
 8004db0:	f103 0204 	add.w	r2, r3, #4
 8004db4:	d020      	beq.n	8004df8 <_scanf_float+0x3d8>
 8004db6:	9903      	ldr	r1, [sp, #12]
 8004db8:	600a      	str	r2, [r1, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	e9c3 6700 	strd	r6, r7, [r3]
 8004dc0:	68e3      	ldr	r3, [r4, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60e3      	str	r3, [r4, #12]
 8004dc6:	e66c      	b.n	8004aa2 <_scanf_float+0x82>
 8004dc8:	9b04      	ldr	r3, [sp, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0e4      	beq.n	8004d98 <_scanf_float+0x378>
 8004dce:	9905      	ldr	r1, [sp, #20]
 8004dd0:	230a      	movs	r3, #10
 8004dd2:	462a      	mov	r2, r5
 8004dd4:	3101      	adds	r1, #1
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f002 fe4a 	bl	8007a70 <_strtol_r>
 8004ddc:	9b04      	ldr	r3, [sp, #16]
 8004dde:	9e05      	ldr	r6, [sp, #20]
 8004de0:	1ac2      	subs	r2, r0, r3
 8004de2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004de6:	429e      	cmp	r6, r3
 8004de8:	bf28      	it	cs
 8004dea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004dee:	4912      	ldr	r1, [pc, #72]	; (8004e38 <_scanf_float+0x418>)
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 fa03 	bl	80051fc <siprintf>
 8004df6:	e7cf      	b.n	8004d98 <_scanf_float+0x378>
 8004df8:	f011 0f04 	tst.w	r1, #4
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	600a      	str	r2, [r1, #0]
 8004e00:	d1db      	bne.n	8004dba <_scanf_float+0x39a>
 8004e02:	f8d3 8000 	ldr.w	r8, [r3]
 8004e06:	ee10 2a10 	vmov	r2, s0
 8004e0a:	ee10 0a10 	vmov	r0, s0
 8004e0e:	463b      	mov	r3, r7
 8004e10:	4639      	mov	r1, r7
 8004e12:	f7fb fe93 	bl	8000b3c <__aeabi_dcmpun>
 8004e16:	b128      	cbz	r0, 8004e24 <_scanf_float+0x404>
 8004e18:	4808      	ldr	r0, [pc, #32]	; (8004e3c <_scanf_float+0x41c>)
 8004e1a:	f000 fb67 	bl	80054ec <nanf>
 8004e1e:	ed88 0a00 	vstr	s0, [r8]
 8004e22:	e7cd      	b.n	8004dc0 <_scanf_float+0x3a0>
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb fee6 	bl	8000bf8 <__aeabi_d2f>
 8004e2c:	f8c8 0000 	str.w	r0, [r8]
 8004e30:	e7c6      	b.n	8004dc0 <_scanf_float+0x3a0>
 8004e32:	2500      	movs	r5, #0
 8004e34:	e635      	b.n	8004aa2 <_scanf_float+0x82>
 8004e36:	bf00      	nop
 8004e38:	08008c14 	.word	0x08008c14
 8004e3c:	08008fa5 	.word	0x08008fa5

08004e40 <std>:
 8004e40:	2300      	movs	r3, #0
 8004e42:	b510      	push	{r4, lr}
 8004e44:	4604      	mov	r4, r0
 8004e46:	e9c0 3300 	strd	r3, r3, [r0]
 8004e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e4e:	6083      	str	r3, [r0, #8]
 8004e50:	8181      	strh	r1, [r0, #12]
 8004e52:	6643      	str	r3, [r0, #100]	; 0x64
 8004e54:	81c2      	strh	r2, [r0, #14]
 8004e56:	6183      	str	r3, [r0, #24]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	305c      	adds	r0, #92	; 0x5c
 8004e5e:	f000 fac5 	bl	80053ec <memset>
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <std+0x58>)
 8004e64:	6263      	str	r3, [r4, #36]	; 0x24
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <std+0x5c>)
 8004e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <std+0x60>)
 8004e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <std+0x64>)
 8004e70:	6323      	str	r3, [r4, #48]	; 0x30
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <std+0x68>)
 8004e74:	6224      	str	r4, [r4, #32]
 8004e76:	429c      	cmp	r4, r3
 8004e78:	d006      	beq.n	8004e88 <std+0x48>
 8004e7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e7e:	4294      	cmp	r4, r2
 8004e80:	d002      	beq.n	8004e88 <std+0x48>
 8004e82:	33d0      	adds	r3, #208	; 0xd0
 8004e84:	429c      	cmp	r4, r3
 8004e86:	d105      	bne.n	8004e94 <std+0x54>
 8004e88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e90:	f000 bb28 	b.w	80054e4 <__retarget_lock_init_recursive>
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	bf00      	nop
 8004e98:	0800523d 	.word	0x0800523d
 8004e9c:	0800525f 	.word	0x0800525f
 8004ea0:	08005297 	.word	0x08005297
 8004ea4:	080052bb 	.word	0x080052bb
 8004ea8:	200002e0 	.word	0x200002e0

08004eac <stdio_exit_handler>:
 8004eac:	4a02      	ldr	r2, [pc, #8]	; (8004eb8 <stdio_exit_handler+0xc>)
 8004eae:	4903      	ldr	r1, [pc, #12]	; (8004ebc <stdio_exit_handler+0x10>)
 8004eb0:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <stdio_exit_handler+0x14>)
 8004eb2:	f000 b869 	b.w	8004f88 <_fwalk_sglue>
 8004eb6:	bf00      	nop
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	080080b9 	.word	0x080080b9
 8004ec0:	20000018 	.word	0x20000018

08004ec4 <cleanup_stdio>:
 8004ec4:	6841      	ldr	r1, [r0, #4]
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <cleanup_stdio+0x34>)
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	4604      	mov	r4, r0
 8004ece:	d001      	beq.n	8004ed4 <cleanup_stdio+0x10>
 8004ed0:	f003 f8f2 	bl	80080b8 <_fflush_r>
 8004ed4:	68a1      	ldr	r1, [r4, #8]
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <cleanup_stdio+0x38>)
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	d002      	beq.n	8004ee2 <cleanup_stdio+0x1e>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f003 f8eb 	bl	80080b8 <_fflush_r>
 8004ee2:	68e1      	ldr	r1, [r4, #12]
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <cleanup_stdio+0x3c>)
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	d004      	beq.n	8004ef4 <cleanup_stdio+0x30>
 8004eea:	4620      	mov	r0, r4
 8004eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef0:	f003 b8e2 	b.w	80080b8 <_fflush_r>
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200002e0 	.word	0x200002e0
 8004efc:	20000348 	.word	0x20000348
 8004f00:	200003b0 	.word	0x200003b0

08004f04 <global_stdio_init.part.0>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <global_stdio_init.part.0+0x30>)
 8004f08:	4c0b      	ldr	r4, [pc, #44]	; (8004f38 <global_stdio_init.part.0+0x34>)
 8004f0a:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <global_stdio_init.part.0+0x38>)
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	2200      	movs	r2, #0
 8004f12:	2104      	movs	r1, #4
 8004f14:	f7ff ff94 	bl	8004e40 <std>
 8004f18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	2109      	movs	r1, #9
 8004f20:	f7ff ff8e 	bl	8004e40 <std>
 8004f24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f28:	2202      	movs	r2, #2
 8004f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2e:	2112      	movs	r1, #18
 8004f30:	f7ff bf86 	b.w	8004e40 <std>
 8004f34:	20000418 	.word	0x20000418
 8004f38:	200002e0 	.word	0x200002e0
 8004f3c:	08004ead 	.word	0x08004ead

08004f40 <__sfp_lock_acquire>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__sfp_lock_acquire+0x8>)
 8004f42:	f000 bad0 	b.w	80054e6 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	20000421 	.word	0x20000421

08004f4c <__sfp_lock_release>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__sfp_lock_release+0x8>)
 8004f4e:	f000 bacb 	b.w	80054e8 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	20000421 	.word	0x20000421

08004f58 <__sinit>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	f7ff fff0 	bl	8004f40 <__sfp_lock_acquire>
 8004f60:	6a23      	ldr	r3, [r4, #32]
 8004f62:	b11b      	cbz	r3, 8004f6c <__sinit+0x14>
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f7ff bff0 	b.w	8004f4c <__sfp_lock_release>
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <__sinit+0x28>)
 8004f6e:	6223      	str	r3, [r4, #32]
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__sinit+0x2c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f5      	bne.n	8004f64 <__sinit+0xc>
 8004f78:	f7ff ffc4 	bl	8004f04 <global_stdio_init.part.0>
 8004f7c:	e7f2      	b.n	8004f64 <__sinit+0xc>
 8004f7e:	bf00      	nop
 8004f80:	08004ec5 	.word	0x08004ec5
 8004f84:	20000418 	.word	0x20000418

08004f88 <_fwalk_sglue>:
 8004f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	4688      	mov	r8, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	2600      	movs	r6, #0
 8004f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f98:	f1b9 0901 	subs.w	r9, r9, #1
 8004f9c:	d505      	bpl.n	8004faa <_fwalk_sglue+0x22>
 8004f9e:	6824      	ldr	r4, [r4, #0]
 8004fa0:	2c00      	cmp	r4, #0
 8004fa2:	d1f7      	bne.n	8004f94 <_fwalk_sglue+0xc>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004faa:	89ab      	ldrh	r3, [r5, #12]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d907      	bls.n	8004fc0 <_fwalk_sglue+0x38>
 8004fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	d003      	beq.n	8004fc0 <_fwalk_sglue+0x38>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c0      	blx	r8
 8004fbe:	4306      	orrs	r6, r0
 8004fc0:	3568      	adds	r5, #104	; 0x68
 8004fc2:	e7e9      	b.n	8004f98 <_fwalk_sglue+0x10>

08004fc4 <iprintf>:
 8004fc4:	b40f      	push	{r0, r1, r2, r3}
 8004fc6:	b507      	push	{r0, r1, r2, lr}
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <iprintf+0x20>)
 8004fca:	ab04      	add	r3, sp, #16
 8004fcc:	6808      	ldr	r0, [r1, #0]
 8004fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd2:	6881      	ldr	r1, [r0, #8]
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	f002 fecf 	bl	8007d78 <_vfiprintf_r>
 8004fda:	b003      	add	sp, #12
 8004fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe0:	b004      	add	sp, #16
 8004fe2:	4770      	bx	lr
 8004fe4:	20000064 	.word	0x20000064

08004fe8 <_puts_r>:
 8004fe8:	6a03      	ldr	r3, [r0, #32]
 8004fea:	b570      	push	{r4, r5, r6, lr}
 8004fec:	6884      	ldr	r4, [r0, #8]
 8004fee:	4605      	mov	r5, r0
 8004ff0:	460e      	mov	r6, r1
 8004ff2:	b90b      	cbnz	r3, 8004ff8 <_puts_r+0x10>
 8004ff4:	f7ff ffb0 	bl	8004f58 <__sinit>
 8004ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d405      	bmi.n	800500a <_puts_r+0x22>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	0598      	lsls	r0, r3, #22
 8005002:	d402      	bmi.n	800500a <_puts_r+0x22>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f000 fa6e 	bl	80054e6 <__retarget_lock_acquire_recursive>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	0719      	lsls	r1, r3, #28
 800500e:	d513      	bpl.n	8005038 <_puts_r+0x50>
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	b18b      	cbz	r3, 8005038 <_puts_r+0x50>
 8005014:	3e01      	subs	r6, #1
 8005016:	68a3      	ldr	r3, [r4, #8]
 8005018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800501c:	3b01      	subs	r3, #1
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	b9e9      	cbnz	r1, 800505e <_puts_r+0x76>
 8005022:	2b00      	cmp	r3, #0
 8005024:	da2e      	bge.n	8005084 <_puts_r+0x9c>
 8005026:	4622      	mov	r2, r4
 8005028:	210a      	movs	r1, #10
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f949 	bl	80052c2 <__swbuf_r>
 8005030:	3001      	adds	r0, #1
 8005032:	d007      	beq.n	8005044 <_puts_r+0x5c>
 8005034:	250a      	movs	r5, #10
 8005036:	e007      	b.n	8005048 <_puts_r+0x60>
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f97e 	bl	800533c <__swsetup_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	d0e7      	beq.n	8005014 <_puts_r+0x2c>
 8005044:	f04f 35ff 	mov.w	r5, #4294967295
 8005048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504a:	07da      	lsls	r2, r3, #31
 800504c:	d405      	bmi.n	800505a <_puts_r+0x72>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	059b      	lsls	r3, r3, #22
 8005052:	d402      	bmi.n	800505a <_puts_r+0x72>
 8005054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005056:	f000 fa47 	bl	80054e8 <__retarget_lock_release_recursive>
 800505a:	4628      	mov	r0, r5
 800505c:	bd70      	pop	{r4, r5, r6, pc}
 800505e:	2b00      	cmp	r3, #0
 8005060:	da04      	bge.n	800506c <_puts_r+0x84>
 8005062:	69a2      	ldr	r2, [r4, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	dc06      	bgt.n	8005076 <_puts_r+0x8e>
 8005068:	290a      	cmp	r1, #10
 800506a:	d004      	beq.n	8005076 <_puts_r+0x8e>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	7019      	strb	r1, [r3, #0]
 8005074:	e7cf      	b.n	8005016 <_puts_r+0x2e>
 8005076:	4622      	mov	r2, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 f922 	bl	80052c2 <__swbuf_r>
 800507e:	3001      	adds	r0, #1
 8005080:	d1c9      	bne.n	8005016 <_puts_r+0x2e>
 8005082:	e7df      	b.n	8005044 <_puts_r+0x5c>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	250a      	movs	r5, #10
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6022      	str	r2, [r4, #0]
 800508c:	701d      	strb	r5, [r3, #0]
 800508e:	e7db      	b.n	8005048 <_puts_r+0x60>

08005090 <puts>:
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <puts+0xc>)
 8005092:	4601      	mov	r1, r0
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f7ff bfa7 	b.w	8004fe8 <_puts_r>
 800509a:	bf00      	nop
 800509c:	20000064 	.word	0x20000064

080050a0 <setvbuf>:
 80050a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050a4:	461d      	mov	r5, r3
 80050a6:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <setvbuf+0x158>)
 80050a8:	681f      	ldr	r7, [r3, #0]
 80050aa:	4604      	mov	r4, r0
 80050ac:	460e      	mov	r6, r1
 80050ae:	4690      	mov	r8, r2
 80050b0:	b127      	cbz	r7, 80050bc <setvbuf+0x1c>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	b913      	cbnz	r3, 80050bc <setvbuf+0x1c>
 80050b6:	4638      	mov	r0, r7
 80050b8:	f7ff ff4e 	bl	8004f58 <__sinit>
 80050bc:	f1b8 0f02 	cmp.w	r8, #2
 80050c0:	d006      	beq.n	80050d0 <setvbuf+0x30>
 80050c2:	f1b8 0f01 	cmp.w	r8, #1
 80050c6:	f200 8094 	bhi.w	80051f2 <setvbuf+0x152>
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	f2c0 8091 	blt.w	80051f2 <setvbuf+0x152>
 80050d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d2:	07da      	lsls	r2, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <setvbuf+0x42>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	059b      	lsls	r3, r3, #22
 80050da:	d402      	bmi.n	80050e2 <setvbuf+0x42>
 80050dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050de:	f000 fa02 	bl	80054e6 <__retarget_lock_acquire_recursive>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4638      	mov	r0, r7
 80050e6:	f002 ffe7 	bl	80080b8 <_fflush_r>
 80050ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ec:	b141      	cbz	r1, 8005100 <setvbuf+0x60>
 80050ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050f2:	4299      	cmp	r1, r3
 80050f4:	d002      	beq.n	80050fc <setvbuf+0x5c>
 80050f6:	4638      	mov	r0, r7
 80050f8:	f001 f878 	bl	80061ec <_free_r>
 80050fc:	2300      	movs	r3, #0
 80050fe:	6363      	str	r3, [r4, #52]	; 0x34
 8005100:	2300      	movs	r3, #0
 8005102:	61a3      	str	r3, [r4, #24]
 8005104:	6063      	str	r3, [r4, #4]
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	0618      	lsls	r0, r3, #24
 800510a:	d503      	bpl.n	8005114 <setvbuf+0x74>
 800510c:	6921      	ldr	r1, [r4, #16]
 800510e:	4638      	mov	r0, r7
 8005110:	f001 f86c 	bl	80061ec <_free_r>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	f1b8 0f02 	cmp.w	r8, #2
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	d05f      	beq.n	80051e6 <setvbuf+0x146>
 8005126:	ab01      	add	r3, sp, #4
 8005128:	466a      	mov	r2, sp
 800512a:	4621      	mov	r1, r4
 800512c:	4638      	mov	r0, r7
 800512e:	f002 ffeb 	bl	8008108 <__swhatbuf_r>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	4318      	orrs	r0, r3
 8005136:	81a0      	strh	r0, [r4, #12]
 8005138:	bb2d      	cbnz	r5, 8005186 <setvbuf+0xe6>
 800513a:	9d00      	ldr	r5, [sp, #0]
 800513c:	4628      	mov	r0, r5
 800513e:	f001 f8a1 	bl	8006284 <malloc>
 8005142:	4606      	mov	r6, r0
 8005144:	2800      	cmp	r0, #0
 8005146:	d150      	bne.n	80051ea <setvbuf+0x14a>
 8005148:	f8dd 9000 	ldr.w	r9, [sp]
 800514c:	45a9      	cmp	r9, r5
 800514e:	d13e      	bne.n	80051ce <setvbuf+0x12e>
 8005150:	f04f 35ff 	mov.w	r5, #4294967295
 8005154:	2200      	movs	r2, #0
 8005156:	60a2      	str	r2, [r4, #8]
 8005158:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800515c:	6022      	str	r2, [r4, #0]
 800515e:	6122      	str	r2, [r4, #16]
 8005160:	2201      	movs	r2, #1
 8005162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005166:	6162      	str	r2, [r4, #20]
 8005168:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	07d1      	lsls	r1, r2, #31
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	d404      	bmi.n	800517e <setvbuf+0xde>
 8005174:	059b      	lsls	r3, r3, #22
 8005176:	d402      	bmi.n	800517e <setvbuf+0xde>
 8005178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517a:	f000 f9b5 	bl	80054e8 <__retarget_lock_release_recursive>
 800517e:	4628      	mov	r0, r5
 8005180:	b003      	add	sp, #12
 8005182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005186:	2e00      	cmp	r6, #0
 8005188:	d0d8      	beq.n	800513c <setvbuf+0x9c>
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	b913      	cbnz	r3, 8005194 <setvbuf+0xf4>
 800518e:	4638      	mov	r0, r7
 8005190:	f7ff fee2 	bl	8004f58 <__sinit>
 8005194:	f1b8 0f01 	cmp.w	r8, #1
 8005198:	bf08      	it	eq
 800519a:	89a3      	ldrheq	r3, [r4, #12]
 800519c:	6026      	str	r6, [r4, #0]
 800519e:	bf04      	itt	eq
 80051a0:	f043 0301 	orreq.w	r3, r3, #1
 80051a4:	81a3      	strheq	r3, [r4, #12]
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f013 0208 	ands.w	r2, r3, #8
 80051ac:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80051b0:	d01d      	beq.n	80051ee <setvbuf+0x14e>
 80051b2:	07da      	lsls	r2, r3, #31
 80051b4:	bf41      	itttt	mi
 80051b6:	2200      	movmi	r2, #0
 80051b8:	426d      	negmi	r5, r5
 80051ba:	60a2      	strmi	r2, [r4, #8]
 80051bc:	61a5      	strmi	r5, [r4, #24]
 80051be:	bf58      	it	pl
 80051c0:	60a5      	strpl	r5, [r4, #8]
 80051c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80051c4:	f015 0501 	ands.w	r5, r5, #1
 80051c8:	d0d4      	beq.n	8005174 <setvbuf+0xd4>
 80051ca:	2500      	movs	r5, #0
 80051cc:	e7d7      	b.n	800517e <setvbuf+0xde>
 80051ce:	4648      	mov	r0, r9
 80051d0:	f001 f858 	bl	8006284 <malloc>
 80051d4:	4606      	mov	r6, r0
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d0ba      	beq.n	8005150 <setvbuf+0xb0>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	464d      	mov	r5, r9
 80051e4:	e7d1      	b.n	800518a <setvbuf+0xea>
 80051e6:	2500      	movs	r5, #0
 80051e8:	e7b4      	b.n	8005154 <setvbuf+0xb4>
 80051ea:	46a9      	mov	r9, r5
 80051ec:	e7f5      	b.n	80051da <setvbuf+0x13a>
 80051ee:	60a2      	str	r2, [r4, #8]
 80051f0:	e7e7      	b.n	80051c2 <setvbuf+0x122>
 80051f2:	f04f 35ff 	mov.w	r5, #4294967295
 80051f6:	e7c2      	b.n	800517e <setvbuf+0xde>
 80051f8:	20000064 	.word	0x20000064

080051fc <siprintf>:
 80051fc:	b40e      	push	{r1, r2, r3}
 80051fe:	b500      	push	{lr}
 8005200:	b09c      	sub	sp, #112	; 0x70
 8005202:	ab1d      	add	r3, sp, #116	; 0x74
 8005204:	9002      	str	r0, [sp, #8]
 8005206:	9006      	str	r0, [sp, #24]
 8005208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800520c:	4809      	ldr	r0, [pc, #36]	; (8005234 <siprintf+0x38>)
 800520e:	9107      	str	r1, [sp, #28]
 8005210:	9104      	str	r1, [sp, #16]
 8005212:	4909      	ldr	r1, [pc, #36]	; (8005238 <siprintf+0x3c>)
 8005214:	f853 2b04 	ldr.w	r2, [r3], #4
 8005218:	9105      	str	r1, [sp, #20]
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	a902      	add	r1, sp, #8
 8005220:	f002 fc82 	bl	8007b28 <_svfiprintf_r>
 8005224:	9b02      	ldr	r3, [sp, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	b01c      	add	sp, #112	; 0x70
 800522c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005230:	b003      	add	sp, #12
 8005232:	4770      	bx	lr
 8005234:	20000064 	.word	0x20000064
 8005238:	ffff0208 	.word	0xffff0208

0800523c <__sread>:
 800523c:	b510      	push	{r4, lr}
 800523e:	460c      	mov	r4, r1
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	f000 f900 	bl	8005448 <_read_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	bfab      	itete	ge
 800524c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800524e:	89a3      	ldrhlt	r3, [r4, #12]
 8005250:	181b      	addge	r3, r3, r0
 8005252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005256:	bfac      	ite	ge
 8005258:	6563      	strge	r3, [r4, #84]	; 0x54
 800525a:	81a3      	strhlt	r3, [r4, #12]
 800525c:	bd10      	pop	{r4, pc}

0800525e <__swrite>:
 800525e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	461f      	mov	r7, r3
 8005264:	898b      	ldrh	r3, [r1, #12]
 8005266:	05db      	lsls	r3, r3, #23
 8005268:	4605      	mov	r5, r0
 800526a:	460c      	mov	r4, r1
 800526c:	4616      	mov	r6, r2
 800526e:	d505      	bpl.n	800527c <__swrite+0x1e>
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	2302      	movs	r3, #2
 8005276:	2200      	movs	r2, #0
 8005278:	f000 f8d4 	bl	8005424 <_lseek_r>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	4632      	mov	r2, r6
 800528a:	463b      	mov	r3, r7
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005292:	f000 b8eb 	b.w	800546c <_write_r>

08005296 <__sseek>:
 8005296:	b510      	push	{r4, lr}
 8005298:	460c      	mov	r4, r1
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 f8c1 	bl	8005424 <_lseek_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	bf15      	itete	ne
 80052a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052b2:	81a3      	strheq	r3, [r4, #12]
 80052b4:	bf18      	it	ne
 80052b6:	81a3      	strhne	r3, [r4, #12]
 80052b8:	bd10      	pop	{r4, pc}

080052ba <__sclose>:
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 b8a1 	b.w	8005404 <_close_r>

080052c2 <__swbuf_r>:
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c4:	460e      	mov	r6, r1
 80052c6:	4614      	mov	r4, r2
 80052c8:	4605      	mov	r5, r0
 80052ca:	b118      	cbz	r0, 80052d4 <__swbuf_r+0x12>
 80052cc:	6a03      	ldr	r3, [r0, #32]
 80052ce:	b90b      	cbnz	r3, 80052d4 <__swbuf_r+0x12>
 80052d0:	f7ff fe42 	bl	8004f58 <__sinit>
 80052d4:	69a3      	ldr	r3, [r4, #24]
 80052d6:	60a3      	str	r3, [r4, #8]
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	071a      	lsls	r2, r3, #28
 80052dc:	d525      	bpl.n	800532a <__swbuf_r+0x68>
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	b31b      	cbz	r3, 800532a <__swbuf_r+0x68>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	6922      	ldr	r2, [r4, #16]
 80052e6:	1a98      	subs	r0, r3, r2
 80052e8:	6963      	ldr	r3, [r4, #20]
 80052ea:	b2f6      	uxtb	r6, r6
 80052ec:	4283      	cmp	r3, r0
 80052ee:	4637      	mov	r7, r6
 80052f0:	dc04      	bgt.n	80052fc <__swbuf_r+0x3a>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f002 fedf 	bl	80080b8 <_fflush_r>
 80052fa:	b9e0      	cbnz	r0, 8005336 <__swbuf_r+0x74>
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	3b01      	subs	r3, #1
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	6022      	str	r2, [r4, #0]
 8005308:	701e      	strb	r6, [r3, #0]
 800530a:	6962      	ldr	r2, [r4, #20]
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	429a      	cmp	r2, r3
 8005310:	d004      	beq.n	800531c <__swbuf_r+0x5a>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	07db      	lsls	r3, r3, #31
 8005316:	d506      	bpl.n	8005326 <__swbuf_r+0x64>
 8005318:	2e0a      	cmp	r6, #10
 800531a:	d104      	bne.n	8005326 <__swbuf_r+0x64>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f002 feca 	bl	80080b8 <_fflush_r>
 8005324:	b938      	cbnz	r0, 8005336 <__swbuf_r+0x74>
 8005326:	4638      	mov	r0, r7
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532a:	4621      	mov	r1, r4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f805 	bl	800533c <__swsetup_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	d0d5      	beq.n	80052e2 <__swbuf_r+0x20>
 8005336:	f04f 37ff 	mov.w	r7, #4294967295
 800533a:	e7f4      	b.n	8005326 <__swbuf_r+0x64>

0800533c <__swsetup_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <__swsetup_r+0xac>)
 8005340:	4605      	mov	r5, r0
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	460c      	mov	r4, r1
 8005346:	b118      	cbz	r0, 8005350 <__swsetup_r+0x14>
 8005348:	6a03      	ldr	r3, [r0, #32]
 800534a:	b90b      	cbnz	r3, 8005350 <__swsetup_r+0x14>
 800534c:	f7ff fe04 	bl	8004f58 <__sinit>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005356:	0718      	lsls	r0, r3, #28
 8005358:	d422      	bmi.n	80053a0 <__swsetup_r+0x64>
 800535a:	06d9      	lsls	r1, r3, #27
 800535c:	d407      	bmi.n	800536e <__swsetup_r+0x32>
 800535e:	2309      	movs	r3, #9
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005366:	81a3      	strh	r3, [r4, #12]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e034      	b.n	80053d8 <__swsetup_r+0x9c>
 800536e:	0758      	lsls	r0, r3, #29
 8005370:	d512      	bpl.n	8005398 <__swsetup_r+0x5c>
 8005372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005374:	b141      	cbz	r1, 8005388 <__swsetup_r+0x4c>
 8005376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800537a:	4299      	cmp	r1, r3
 800537c:	d002      	beq.n	8005384 <__swsetup_r+0x48>
 800537e:	4628      	mov	r0, r5
 8005380:	f000 ff34 	bl	80061ec <_free_r>
 8005384:	2300      	movs	r3, #0
 8005386:	6363      	str	r3, [r4, #52]	; 0x34
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	2300      	movs	r3, #0
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f043 0308 	orr.w	r3, r3, #8
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	b94b      	cbnz	r3, 80053b8 <__swsetup_r+0x7c>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ae:	d003      	beq.n	80053b8 <__swsetup_r+0x7c>
 80053b0:	4621      	mov	r1, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f002 fece 	bl	8008154 <__smakebuf_r>
 80053b8:	89a0      	ldrh	r0, [r4, #12]
 80053ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053be:	f010 0301 	ands.w	r3, r0, #1
 80053c2:	d00a      	beq.n	80053da <__swsetup_r+0x9e>
 80053c4:	2300      	movs	r3, #0
 80053c6:	60a3      	str	r3, [r4, #8]
 80053c8:	6963      	ldr	r3, [r4, #20]
 80053ca:	425b      	negs	r3, r3
 80053cc:	61a3      	str	r3, [r4, #24]
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	b943      	cbnz	r3, 80053e4 <__swsetup_r+0xa8>
 80053d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053d6:	d1c4      	bne.n	8005362 <__swsetup_r+0x26>
 80053d8:	bd38      	pop	{r3, r4, r5, pc}
 80053da:	0781      	lsls	r1, r0, #30
 80053dc:	bf58      	it	pl
 80053de:	6963      	ldrpl	r3, [r4, #20]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	e7f4      	b.n	80053ce <__swsetup_r+0x92>
 80053e4:	2000      	movs	r0, #0
 80053e6:	e7f7      	b.n	80053d8 <__swsetup_r+0x9c>
 80053e8:	20000064 	.word	0x20000064

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <_localeconv_r>:
 80053fc:	4800      	ldr	r0, [pc, #0]	; (8005400 <_localeconv_r+0x4>)
 80053fe:	4770      	bx	lr
 8005400:	20000158 	.word	0x20000158

08005404 <_close_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_close_r+0x1c>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fc fa6b 	bl	80018ea <_close>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_close_r+0x1a>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_close_r+0x1a>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	2000041c 	.word	0x2000041c

08005424 <_lseek_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	; (8005444 <_lseek_r+0x20>)
 8005428:	4604      	mov	r4, r0
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	2200      	movs	r2, #0
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fc fa80 	bl	8001938 <_lseek>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_lseek_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_lseek_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	2000041c 	.word	0x2000041c

08005448 <_read_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d07      	ldr	r5, [pc, #28]	; (8005468 <_read_r+0x20>)
 800544c:	4604      	mov	r4, r0
 800544e:	4608      	mov	r0, r1
 8005450:	4611      	mov	r1, r2
 8005452:	2200      	movs	r2, #0
 8005454:	602a      	str	r2, [r5, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f7fc fa0e 	bl	8001878 <_read>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_read_r+0x1e>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_read_r+0x1e>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	2000041c 	.word	0x2000041c

0800546c <_write_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	; (800548c <_write_r+0x20>)
 8005470:	4604      	mov	r4, r0
 8005472:	4608      	mov	r0, r1
 8005474:	4611      	mov	r1, r2
 8005476:	2200      	movs	r2, #0
 8005478:	602a      	str	r2, [r5, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	f7fc fa19 	bl	80018b2 <_write>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_write_r+0x1e>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_write_r+0x1e>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	2000041c 	.word	0x2000041c

08005490 <__errno>:
 8005490:	4b01      	ldr	r3, [pc, #4]	; (8005498 <__errno+0x8>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000064 	.word	0x20000064

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4d0d      	ldr	r5, [pc, #52]	; (80054d4 <__libc_init_array+0x38>)
 80054a0:	4c0d      	ldr	r4, [pc, #52]	; (80054d8 <__libc_init_array+0x3c>)
 80054a2:	1b64      	subs	r4, r4, r5
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	2600      	movs	r6, #0
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	4d0b      	ldr	r5, [pc, #44]	; (80054dc <__libc_init_array+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	; (80054e0 <__libc_init_array+0x44>)
 80054b0:	f003 fb42 	bl	8008b38 <_init>
 80054b4:	1b64      	subs	r4, r4, r5
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	2600      	movs	r6, #0
 80054ba:	42a6      	cmp	r6, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c4:	4798      	blx	r3
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ce:	4798      	blx	r3
 80054d0:	3601      	adds	r6, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08009010 	.word	0x08009010
 80054d8:	08009010 	.word	0x08009010
 80054dc:	08009010 	.word	0x08009010
 80054e0:	08009014 	.word	0x08009014

080054e4 <__retarget_lock_init_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_acquire_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <__retarget_lock_release_recursive>:
 80054e8:	4770      	bx	lr
	...

080054ec <nanf>:
 80054ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80054f4 <nanf+0x8>
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	7fc00000 	.word	0x7fc00000

080054f8 <quorem>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	6903      	ldr	r3, [r0, #16]
 80054fe:	690c      	ldr	r4, [r1, #16]
 8005500:	42a3      	cmp	r3, r4
 8005502:	4607      	mov	r7, r0
 8005504:	db7e      	blt.n	8005604 <quorem+0x10c>
 8005506:	3c01      	subs	r4, #1
 8005508:	f101 0814 	add.w	r8, r1, #20
 800550c:	f100 0514 	add.w	r5, r0, #20
 8005510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800551a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800551e:	3301      	adds	r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005526:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800552a:	fbb2 f6f3 	udiv	r6, r2, r3
 800552e:	d331      	bcc.n	8005594 <quorem+0x9c>
 8005530:	f04f 0e00 	mov.w	lr, #0
 8005534:	4640      	mov	r0, r8
 8005536:	46ac      	mov	ip, r5
 8005538:	46f2      	mov	sl, lr
 800553a:	f850 2b04 	ldr.w	r2, [r0], #4
 800553e:	b293      	uxth	r3, r2
 8005540:	fb06 e303 	mla	r3, r6, r3, lr
 8005544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005548:	0c1a      	lsrs	r2, r3, #16
 800554a:	b29b      	uxth	r3, r3
 800554c:	ebaa 0303 	sub.w	r3, sl, r3
 8005550:	f8dc a000 	ldr.w	sl, [ip]
 8005554:	fa13 f38a 	uxtah	r3, r3, sl
 8005558:	fb06 220e 	mla	r2, r6, lr, r2
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	9b00      	ldr	r3, [sp, #0]
 8005560:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005564:	b292      	uxth	r2, r2
 8005566:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800556a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800556e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005572:	4581      	cmp	r9, r0
 8005574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005578:	f84c 3b04 	str.w	r3, [ip], #4
 800557c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005580:	d2db      	bcs.n	800553a <quorem+0x42>
 8005582:	f855 300b 	ldr.w	r3, [r5, fp]
 8005586:	b92b      	cbnz	r3, 8005594 <quorem+0x9c>
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	3b04      	subs	r3, #4
 800558c:	429d      	cmp	r5, r3
 800558e:	461a      	mov	r2, r3
 8005590:	d32c      	bcc.n	80055ec <quorem+0xf4>
 8005592:	613c      	str	r4, [r7, #16]
 8005594:	4638      	mov	r0, r7
 8005596:	f001 f9ef 	bl	8006978 <__mcmp>
 800559a:	2800      	cmp	r0, #0
 800559c:	db22      	blt.n	80055e4 <quorem+0xec>
 800559e:	3601      	adds	r6, #1
 80055a0:	4629      	mov	r1, r5
 80055a2:	2000      	movs	r0, #0
 80055a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80055a8:	f8d1 c000 	ldr.w	ip, [r1]
 80055ac:	b293      	uxth	r3, r2
 80055ae:	1ac3      	subs	r3, r0, r3
 80055b0:	0c12      	lsrs	r2, r2, #16
 80055b2:	fa13 f38c 	uxtah	r3, r3, ip
 80055b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80055ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c4:	45c1      	cmp	r9, r8
 80055c6:	f841 3b04 	str.w	r3, [r1], #4
 80055ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055ce:	d2e9      	bcs.n	80055a4 <quorem+0xac>
 80055d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d8:	b922      	cbnz	r2, 80055e4 <quorem+0xec>
 80055da:	3b04      	subs	r3, #4
 80055dc:	429d      	cmp	r5, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	d30a      	bcc.n	80055f8 <quorem+0x100>
 80055e2:	613c      	str	r4, [r7, #16]
 80055e4:	4630      	mov	r0, r6
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	3b04      	subs	r3, #4
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d1ce      	bne.n	8005592 <quorem+0x9a>
 80055f4:	3c01      	subs	r4, #1
 80055f6:	e7c9      	b.n	800558c <quorem+0x94>
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	3b04      	subs	r3, #4
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	d1f0      	bne.n	80055e2 <quorem+0xea>
 8005600:	3c01      	subs	r4, #1
 8005602:	e7eb      	b.n	80055dc <quorem+0xe4>
 8005604:	2000      	movs	r0, #0
 8005606:	e7ee      	b.n	80055e6 <quorem+0xee>

08005608 <_dtoa_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	ed2d 8b04 	vpush	{d8-d9}
 8005610:	69c5      	ldr	r5, [r0, #28]
 8005612:	b093      	sub	sp, #76	; 0x4c
 8005614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005618:	ec57 6b10 	vmov	r6, r7, d0
 800561c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005620:	9107      	str	r1, [sp, #28]
 8005622:	4604      	mov	r4, r0
 8005624:	920a      	str	r2, [sp, #40]	; 0x28
 8005626:	930d      	str	r3, [sp, #52]	; 0x34
 8005628:	b975      	cbnz	r5, 8005648 <_dtoa_r+0x40>
 800562a:	2010      	movs	r0, #16
 800562c:	f000 fe2a 	bl	8006284 <malloc>
 8005630:	4602      	mov	r2, r0
 8005632:	61e0      	str	r0, [r4, #28]
 8005634:	b920      	cbnz	r0, 8005640 <_dtoa_r+0x38>
 8005636:	4bae      	ldr	r3, [pc, #696]	; (80058f0 <_dtoa_r+0x2e8>)
 8005638:	21ef      	movs	r1, #239	; 0xef
 800563a:	48ae      	ldr	r0, [pc, #696]	; (80058f4 <_dtoa_r+0x2ec>)
 800563c:	f002 fe3c 	bl	80082b8 <__assert_func>
 8005640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005644:	6005      	str	r5, [r0, #0]
 8005646:	60c5      	str	r5, [r0, #12]
 8005648:	69e3      	ldr	r3, [r4, #28]
 800564a:	6819      	ldr	r1, [r3, #0]
 800564c:	b151      	cbz	r1, 8005664 <_dtoa_r+0x5c>
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	604a      	str	r2, [r1, #4]
 8005652:	2301      	movs	r3, #1
 8005654:	4093      	lsls	r3, r2
 8005656:	608b      	str	r3, [r1, #8]
 8005658:	4620      	mov	r0, r4
 800565a:	f000 ff07 	bl	800646c <_Bfree>
 800565e:	69e3      	ldr	r3, [r4, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	1e3b      	subs	r3, r7, #0
 8005666:	bfbb      	ittet	lt
 8005668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800566c:	9303      	strlt	r3, [sp, #12]
 800566e:	2300      	movge	r3, #0
 8005670:	2201      	movlt	r2, #1
 8005672:	bfac      	ite	ge
 8005674:	f8c8 3000 	strge.w	r3, [r8]
 8005678:	f8c8 2000 	strlt.w	r2, [r8]
 800567c:	4b9e      	ldr	r3, [pc, #632]	; (80058f8 <_dtoa_r+0x2f0>)
 800567e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005682:	ea33 0308 	bics.w	r3, r3, r8
 8005686:	d11b      	bne.n	80056c0 <_dtoa_r+0xb8>
 8005688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800568a:	f242 730f 	movw	r3, #9999	; 0x270f
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005694:	4333      	orrs	r3, r6
 8005696:	f000 8593 	beq.w	80061c0 <_dtoa_r+0xbb8>
 800569a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800569c:	b963      	cbnz	r3, 80056b8 <_dtoa_r+0xb0>
 800569e:	4b97      	ldr	r3, [pc, #604]	; (80058fc <_dtoa_r+0x2f4>)
 80056a0:	e027      	b.n	80056f2 <_dtoa_r+0xea>
 80056a2:	4b97      	ldr	r3, [pc, #604]	; (8005900 <_dtoa_r+0x2f8>)
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	9800      	ldr	r0, [sp, #0]
 80056ae:	b013      	add	sp, #76	; 0x4c
 80056b0:	ecbd 8b04 	vpop	{d8-d9}
 80056b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b8:	4b90      	ldr	r3, [pc, #576]	; (80058fc <_dtoa_r+0x2f4>)
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	3303      	adds	r3, #3
 80056be:	e7f3      	b.n	80056a8 <_dtoa_r+0xa0>
 80056c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056c4:	2200      	movs	r2, #0
 80056c6:	ec51 0b17 	vmov	r0, r1, d7
 80056ca:	eeb0 8a47 	vmov.f32	s16, s14
 80056ce:	eef0 8a67 	vmov.f32	s17, s15
 80056d2:	2300      	movs	r3, #0
 80056d4:	f7fb fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d8:	4681      	mov	r9, r0
 80056da:	b160      	cbz	r0, 80056f6 <_dtoa_r+0xee>
 80056dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056de:	2301      	movs	r3, #1
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8568 	beq.w	80061ba <_dtoa_r+0xbb2>
 80056ea:	4b86      	ldr	r3, [pc, #536]	; (8005904 <_dtoa_r+0x2fc>)
 80056ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	e7da      	b.n	80056ac <_dtoa_r+0xa4>
 80056f6:	aa10      	add	r2, sp, #64	; 0x40
 80056f8:	a911      	add	r1, sp, #68	; 0x44
 80056fa:	4620      	mov	r0, r4
 80056fc:	eeb0 0a48 	vmov.f32	s0, s16
 8005700:	eef0 0a68 	vmov.f32	s1, s17
 8005704:	f001 fa4e 	bl	8006ba4 <__d2b>
 8005708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800570c:	4682      	mov	sl, r0
 800570e:	2d00      	cmp	r5, #0
 8005710:	d07f      	beq.n	8005812 <_dtoa_r+0x20a>
 8005712:	ee18 3a90 	vmov	r3, s17
 8005716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800571e:	ec51 0b18 	vmov	r0, r1, d8
 8005722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800572a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800572e:	4619      	mov	r1, r3
 8005730:	2200      	movs	r2, #0
 8005732:	4b75      	ldr	r3, [pc, #468]	; (8005908 <_dtoa_r+0x300>)
 8005734:	f7fa fdb0 	bl	8000298 <__aeabi_dsub>
 8005738:	a367      	add	r3, pc, #412	; (adr r3, 80058d8 <_dtoa_r+0x2d0>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff63 	bl	8000608 <__aeabi_dmul>
 8005742:	a367      	add	r3, pc, #412	; (adr r3, 80058e0 <_dtoa_r+0x2d8>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa fda8 	bl	800029c <__adddf3>
 800574c:	4606      	mov	r6, r0
 800574e:	4628      	mov	r0, r5
 8005750:	460f      	mov	r7, r1
 8005752:	f7fa feef 	bl	8000534 <__aeabi_i2d>
 8005756:	a364      	add	r3, pc, #400	; (adr r3, 80058e8 <_dtoa_r+0x2e0>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa ff54 	bl	8000608 <__aeabi_dmul>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4630      	mov	r0, r6
 8005766:	4639      	mov	r1, r7
 8005768:	f7fa fd98 	bl	800029c <__adddf3>
 800576c:	4606      	mov	r6, r0
 800576e:	460f      	mov	r7, r1
 8005770:	f7fb f9fa 	bl	8000b68 <__aeabi_d2iz>
 8005774:	2200      	movs	r2, #0
 8005776:	4683      	mov	fp, r0
 8005778:	2300      	movs	r3, #0
 800577a:	4630      	mov	r0, r6
 800577c:	4639      	mov	r1, r7
 800577e:	f7fb f9b5 	bl	8000aec <__aeabi_dcmplt>
 8005782:	b148      	cbz	r0, 8005798 <_dtoa_r+0x190>
 8005784:	4658      	mov	r0, fp
 8005786:	f7fa fed5 	bl	8000534 <__aeabi_i2d>
 800578a:	4632      	mov	r2, r6
 800578c:	463b      	mov	r3, r7
 800578e:	f7fb f9a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005792:	b908      	cbnz	r0, 8005798 <_dtoa_r+0x190>
 8005794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005798:	f1bb 0f16 	cmp.w	fp, #22
 800579c:	d857      	bhi.n	800584e <_dtoa_r+0x246>
 800579e:	4b5b      	ldr	r3, [pc, #364]	; (800590c <_dtoa_r+0x304>)
 80057a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	ec51 0b18 	vmov	r0, r1, d8
 80057ac:	f7fb f99e 	bl	8000aec <__aeabi_dcmplt>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d04e      	beq.n	8005852 <_dtoa_r+0x24a>
 80057b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057b8:	2300      	movs	r3, #0
 80057ba:	930c      	str	r3, [sp, #48]	; 0x30
 80057bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057be:	1b5b      	subs	r3, r3, r5
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	bf45      	ittet	mi
 80057c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80057c8:	9305      	strmi	r3, [sp, #20]
 80057ca:	2300      	movpl	r3, #0
 80057cc:	2300      	movmi	r3, #0
 80057ce:	9206      	str	r2, [sp, #24]
 80057d0:	bf54      	ite	pl
 80057d2:	9305      	strpl	r3, [sp, #20]
 80057d4:	9306      	strmi	r3, [sp, #24]
 80057d6:	f1bb 0f00 	cmp.w	fp, #0
 80057da:	db3c      	blt.n	8005856 <_dtoa_r+0x24e>
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80057e2:	445b      	add	r3, fp
 80057e4:	9306      	str	r3, [sp, #24]
 80057e6:	2300      	movs	r3, #0
 80057e8:	9308      	str	r3, [sp, #32]
 80057ea:	9b07      	ldr	r3, [sp, #28]
 80057ec:	2b09      	cmp	r3, #9
 80057ee:	d868      	bhi.n	80058c2 <_dtoa_r+0x2ba>
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	bfc4      	itt	gt
 80057f4:	3b04      	subgt	r3, #4
 80057f6:	9307      	strgt	r3, [sp, #28]
 80057f8:	9b07      	ldr	r3, [sp, #28]
 80057fa:	f1a3 0302 	sub.w	r3, r3, #2
 80057fe:	bfcc      	ite	gt
 8005800:	2500      	movgt	r5, #0
 8005802:	2501      	movle	r5, #1
 8005804:	2b03      	cmp	r3, #3
 8005806:	f200 8085 	bhi.w	8005914 <_dtoa_r+0x30c>
 800580a:	e8df f003 	tbb	[pc, r3]
 800580e:	3b2e      	.short	0x3b2e
 8005810:	5839      	.short	0x5839
 8005812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005816:	441d      	add	r5, r3
 8005818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800581c:	2b20      	cmp	r3, #32
 800581e:	bfc1      	itttt	gt
 8005820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005824:	fa08 f803 	lslgt.w	r8, r8, r3
 8005828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800582c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005830:	bfd6      	itet	le
 8005832:	f1c3 0320 	rsble	r3, r3, #32
 8005836:	ea48 0003 	orrgt.w	r0, r8, r3
 800583a:	fa06 f003 	lslle.w	r0, r6, r3
 800583e:	f7fa fe69 	bl	8000514 <__aeabi_ui2d>
 8005842:	2201      	movs	r2, #1
 8005844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005848:	3d01      	subs	r5, #1
 800584a:	920e      	str	r2, [sp, #56]	; 0x38
 800584c:	e76f      	b.n	800572e <_dtoa_r+0x126>
 800584e:	2301      	movs	r3, #1
 8005850:	e7b3      	b.n	80057ba <_dtoa_r+0x1b2>
 8005852:	900c      	str	r0, [sp, #48]	; 0x30
 8005854:	e7b2      	b.n	80057bc <_dtoa_r+0x1b4>
 8005856:	9b05      	ldr	r3, [sp, #20]
 8005858:	eba3 030b 	sub.w	r3, r3, fp
 800585c:	9305      	str	r3, [sp, #20]
 800585e:	f1cb 0300 	rsb	r3, fp, #0
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	2300      	movs	r3, #0
 8005866:	930b      	str	r3, [sp, #44]	; 0x2c
 8005868:	e7bf      	b.n	80057ea <_dtoa_r+0x1e2>
 800586a:	2300      	movs	r3, #0
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc52      	bgt.n	800591a <_dtoa_r+0x312>
 8005874:	2301      	movs	r3, #1
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	461a      	mov	r2, r3
 800587c:	920a      	str	r2, [sp, #40]	; 0x28
 800587e:	e00b      	b.n	8005898 <_dtoa_r+0x290>
 8005880:	2301      	movs	r3, #1
 8005882:	e7f3      	b.n	800586c <_dtoa_r+0x264>
 8005884:	2300      	movs	r3, #0
 8005886:	9309      	str	r3, [sp, #36]	; 0x24
 8005888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588a:	445b      	add	r3, fp
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	3301      	adds	r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	bfb8      	it	lt
 8005896:	2301      	movlt	r3, #1
 8005898:	69e0      	ldr	r0, [r4, #28]
 800589a:	2100      	movs	r1, #0
 800589c:	2204      	movs	r2, #4
 800589e:	f102 0614 	add.w	r6, r2, #20
 80058a2:	429e      	cmp	r6, r3
 80058a4:	d93d      	bls.n	8005922 <_dtoa_r+0x31a>
 80058a6:	6041      	str	r1, [r0, #4]
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fd9f 	bl	80063ec <_Balloc>
 80058ae:	9000      	str	r0, [sp, #0]
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d139      	bne.n	8005928 <_dtoa_r+0x320>
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <_dtoa_r+0x308>)
 80058b6:	4602      	mov	r2, r0
 80058b8:	f240 11af 	movw	r1, #431	; 0x1af
 80058bc:	e6bd      	b.n	800563a <_dtoa_r+0x32>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7e1      	b.n	8005886 <_dtoa_r+0x27e>
 80058c2:	2501      	movs	r5, #1
 80058c4:	2300      	movs	r3, #0
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	9509      	str	r5, [sp, #36]	; 0x24
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	9304      	str	r3, [sp, #16]
 80058d2:	2200      	movs	r2, #0
 80058d4:	2312      	movs	r3, #18
 80058d6:	e7d1      	b.n	800587c <_dtoa_r+0x274>
 80058d8:	636f4361 	.word	0x636f4361
 80058dc:	3fd287a7 	.word	0x3fd287a7
 80058e0:	8b60c8b3 	.word	0x8b60c8b3
 80058e4:	3fc68a28 	.word	0x3fc68a28
 80058e8:	509f79fb 	.word	0x509f79fb
 80058ec:	3fd34413 	.word	0x3fd34413
 80058f0:	08008c26 	.word	0x08008c26
 80058f4:	08008c3d 	.word	0x08008c3d
 80058f8:	7ff00000 	.word	0x7ff00000
 80058fc:	08008c22 	.word	0x08008c22
 8005900:	08008c19 	.word	0x08008c19
 8005904:	08008bf1 	.word	0x08008bf1
 8005908:	3ff80000 	.word	0x3ff80000
 800590c:	08008d28 	.word	0x08008d28
 8005910:	08008c95 	.word	0x08008c95
 8005914:	2301      	movs	r3, #1
 8005916:	9309      	str	r3, [sp, #36]	; 0x24
 8005918:	e7d7      	b.n	80058ca <_dtoa_r+0x2c2>
 800591a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	e7ba      	b.n	8005898 <_dtoa_r+0x290>
 8005922:	3101      	adds	r1, #1
 8005924:	0052      	lsls	r2, r2, #1
 8005926:	e7ba      	b.n	800589e <_dtoa_r+0x296>
 8005928:	69e3      	ldr	r3, [r4, #28]
 800592a:	9a00      	ldr	r2, [sp, #0]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	2b0e      	cmp	r3, #14
 8005932:	f200 80a8 	bhi.w	8005a86 <_dtoa_r+0x47e>
 8005936:	2d00      	cmp	r5, #0
 8005938:	f000 80a5 	beq.w	8005a86 <_dtoa_r+0x47e>
 800593c:	f1bb 0f00 	cmp.w	fp, #0
 8005940:	dd38      	ble.n	80059b4 <_dtoa_r+0x3ac>
 8005942:	4bc0      	ldr	r3, [pc, #768]	; (8005c44 <_dtoa_r+0x63c>)
 8005944:	f00b 020f 	and.w	r2, fp, #15
 8005948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800594c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005958:	d019      	beq.n	800598e <_dtoa_r+0x386>
 800595a:	4bbb      	ldr	r3, [pc, #748]	; (8005c48 <_dtoa_r+0x640>)
 800595c:	ec51 0b18 	vmov	r0, r1, d8
 8005960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005964:	f7fa ff7a 	bl	800085c <__aeabi_ddiv>
 8005968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596c:	f008 080f 	and.w	r8, r8, #15
 8005970:	2503      	movs	r5, #3
 8005972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c48 <_dtoa_r+0x640>
 8005976:	f1b8 0f00 	cmp.w	r8, #0
 800597a:	d10a      	bne.n	8005992 <_dtoa_r+0x38a>
 800597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	f7fa ff6a 	bl	800085c <__aeabi_ddiv>
 8005988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800598c:	e02b      	b.n	80059e6 <_dtoa_r+0x3de>
 800598e:	2502      	movs	r5, #2
 8005990:	e7ef      	b.n	8005972 <_dtoa_r+0x36a>
 8005992:	f018 0f01 	tst.w	r8, #1
 8005996:	d008      	beq.n	80059aa <_dtoa_r+0x3a2>
 8005998:	4630      	mov	r0, r6
 800599a:	4639      	mov	r1, r7
 800599c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80059a0:	f7fa fe32 	bl	8000608 <__aeabi_dmul>
 80059a4:	3501      	adds	r5, #1
 80059a6:	4606      	mov	r6, r0
 80059a8:	460f      	mov	r7, r1
 80059aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80059ae:	f109 0908 	add.w	r9, r9, #8
 80059b2:	e7e0      	b.n	8005976 <_dtoa_r+0x36e>
 80059b4:	f000 809f 	beq.w	8005af6 <_dtoa_r+0x4ee>
 80059b8:	f1cb 0600 	rsb	r6, fp, #0
 80059bc:	4ba1      	ldr	r3, [pc, #644]	; (8005c44 <_dtoa_r+0x63c>)
 80059be:	4fa2      	ldr	r7, [pc, #648]	; (8005c48 <_dtoa_r+0x640>)
 80059c0:	f006 020f 	and.w	r2, r6, #15
 80059c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	ec51 0b18 	vmov	r0, r1, d8
 80059d0:	f7fa fe1a 	bl	8000608 <__aeabi_dmul>
 80059d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d8:	1136      	asrs	r6, r6, #4
 80059da:	2300      	movs	r3, #0
 80059dc:	2502      	movs	r5, #2
 80059de:	2e00      	cmp	r6, #0
 80059e0:	d17e      	bne.n	8005ae0 <_dtoa_r+0x4d8>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1d0      	bne.n	8005988 <_dtoa_r+0x380>
 80059e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8084 	beq.w	8005afa <_dtoa_r+0x4f2>
 80059f2:	4b96      	ldr	r3, [pc, #600]	; (8005c4c <_dtoa_r+0x644>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	4640      	mov	r0, r8
 80059f8:	4649      	mov	r1, r9
 80059fa:	f7fb f877 	bl	8000aec <__aeabi_dcmplt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d07b      	beq.n	8005afa <_dtoa_r+0x4f2>
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d078      	beq.n	8005afa <_dtoa_r+0x4f2>
 8005a08:	9b01      	ldr	r3, [sp, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dd39      	ble.n	8005a82 <_dtoa_r+0x47a>
 8005a0e:	4b90      	ldr	r3, [pc, #576]	; (8005c50 <_dtoa_r+0x648>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	4640      	mov	r0, r8
 8005a14:	4649      	mov	r1, r9
 8005a16:	f7fa fdf7 	bl	8000608 <__aeabi_dmul>
 8005a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1e:	9e01      	ldr	r6, [sp, #4]
 8005a20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005a24:	3501      	adds	r5, #1
 8005a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7fa fd82 	bl	8000534 <__aeabi_i2d>
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	f7fa fde8 	bl	8000608 <__aeabi_dmul>
 8005a38:	4b86      	ldr	r3, [pc, #536]	; (8005c54 <_dtoa_r+0x64c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f7fa fc2e 	bl	800029c <__adddf3>
 8005a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a48:	9303      	str	r3, [sp, #12]
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	d158      	bne.n	8005b00 <_dtoa_r+0x4f8>
 8005a4e:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <_dtoa_r+0x650>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	4640      	mov	r0, r8
 8005a54:	4649      	mov	r1, r9
 8005a56:	f7fa fc1f 	bl	8000298 <__aeabi_dsub>
 8005a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a5e:	4680      	mov	r8, r0
 8005a60:	4689      	mov	r9, r1
 8005a62:	f7fb f861 	bl	8000b28 <__aeabi_dcmpgt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f040 8296 	bne.w	8005f98 <_dtoa_r+0x990>
 8005a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a70:	4640      	mov	r0, r8
 8005a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a76:	4649      	mov	r1, r9
 8005a78:	f7fb f838 	bl	8000aec <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f040 8289 	bne.w	8005f94 <_dtoa_r+0x98c>
 8005a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f2c0 814e 	blt.w	8005d2a <_dtoa_r+0x722>
 8005a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8005a92:	f300 814a 	bgt.w	8005d2a <_dtoa_r+0x722>
 8005a96:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <_dtoa_r+0x63c>)
 8005a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f280 80dc 	bge.w	8005c60 <_dtoa_r+0x658>
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f300 80d8 	bgt.w	8005c60 <_dtoa_r+0x658>
 8005ab0:	f040 826f 	bne.w	8005f92 <_dtoa_r+0x98a>
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <_dtoa_r+0x650>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fa fda4 	bl	8000608 <__aeabi_dmul>
 8005ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ac4:	f7fb f826 	bl	8000b14 <__aeabi_dcmpge>
 8005ac8:	9e04      	ldr	r6, [sp, #16]
 8005aca:	4637      	mov	r7, r6
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f040 8245 	bne.w	8005f5c <_dtoa_r+0x954>
 8005ad2:	9d00      	ldr	r5, [sp, #0]
 8005ad4:	2331      	movs	r3, #49	; 0x31
 8005ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8005ada:	f10b 0b01 	add.w	fp, fp, #1
 8005ade:	e241      	b.n	8005f64 <_dtoa_r+0x95c>
 8005ae0:	07f2      	lsls	r2, r6, #31
 8005ae2:	d505      	bpl.n	8005af0 <_dtoa_r+0x4e8>
 8005ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae8:	f7fa fd8e 	bl	8000608 <__aeabi_dmul>
 8005aec:	3501      	adds	r5, #1
 8005aee:	2301      	movs	r3, #1
 8005af0:	1076      	asrs	r6, r6, #1
 8005af2:	3708      	adds	r7, #8
 8005af4:	e773      	b.n	80059de <_dtoa_r+0x3d6>
 8005af6:	2502      	movs	r5, #2
 8005af8:	e775      	b.n	80059e6 <_dtoa_r+0x3de>
 8005afa:	9e04      	ldr	r6, [sp, #16]
 8005afc:	465f      	mov	r7, fp
 8005afe:	e792      	b.n	8005a26 <_dtoa_r+0x41e>
 8005b00:	9900      	ldr	r1, [sp, #0]
 8005b02:	4b50      	ldr	r3, [pc, #320]	; (8005c44 <_dtoa_r+0x63c>)
 8005b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b08:	4431      	add	r1, r6
 8005b0a:	9102      	str	r1, [sp, #8]
 8005b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8005b12:	eef0 9a67 	vmov.f32	s19, s15
 8005b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d044      	beq.n	8005bac <_dtoa_r+0x5a4>
 8005b22:	494e      	ldr	r1, [pc, #312]	; (8005c5c <_dtoa_r+0x654>)
 8005b24:	2000      	movs	r0, #0
 8005b26:	f7fa fe99 	bl	800085c <__aeabi_ddiv>
 8005b2a:	ec53 2b19 	vmov	r2, r3, d9
 8005b2e:	f7fa fbb3 	bl	8000298 <__aeabi_dsub>
 8005b32:	9d00      	ldr	r5, [sp, #0]
 8005b34:	ec41 0b19 	vmov	d9, r0, r1
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f7fb f814 	bl	8000b68 <__aeabi_d2iz>
 8005b40:	4606      	mov	r6, r0
 8005b42:	f7fa fcf7 	bl	8000534 <__aeabi_i2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	f7fa fba3 	bl	8000298 <__aeabi_dsub>
 8005b52:	3630      	adds	r6, #48	; 0x30
 8005b54:	f805 6b01 	strb.w	r6, [r5], #1
 8005b58:	ec53 2b19 	vmov	r2, r3, d9
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4689      	mov	r9, r1
 8005b60:	f7fa ffc4 	bl	8000aec <__aeabi_dcmplt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d164      	bne.n	8005c32 <_dtoa_r+0x62a>
 8005b68:	4642      	mov	r2, r8
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	4937      	ldr	r1, [pc, #220]	; (8005c4c <_dtoa_r+0x644>)
 8005b6e:	2000      	movs	r0, #0
 8005b70:	f7fa fb92 	bl	8000298 <__aeabi_dsub>
 8005b74:	ec53 2b19 	vmov	r2, r3, d9
 8005b78:	f7fa ffb8 	bl	8000aec <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f040 80b6 	bne.w	8005cee <_dtoa_r+0x6e6>
 8005b82:	9b02      	ldr	r3, [sp, #8]
 8005b84:	429d      	cmp	r5, r3
 8005b86:	f43f af7c 	beq.w	8005a82 <_dtoa_r+0x47a>
 8005b8a:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <_dtoa_r+0x648>)
 8005b8c:	ec51 0b19 	vmov	r0, r1, d9
 8005b90:	2200      	movs	r2, #0
 8005b92:	f7fa fd39 	bl	8000608 <__aeabi_dmul>
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <_dtoa_r+0x648>)
 8005b98:	ec41 0b19 	vmov	d9, r0, r1
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa fd31 	bl	8000608 <__aeabi_dmul>
 8005ba6:	4680      	mov	r8, r0
 8005ba8:	4689      	mov	r9, r1
 8005baa:	e7c5      	b.n	8005b38 <_dtoa_r+0x530>
 8005bac:	ec51 0b17 	vmov	r0, r1, d7
 8005bb0:	f7fa fd2a 	bl	8000608 <__aeabi_dmul>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	9d00      	ldr	r5, [sp, #0]
 8005bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bba:	ec41 0b19 	vmov	d9, r0, r1
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	f7fa ffd1 	bl	8000b68 <__aeabi_d2iz>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	f7fa fcb4 	bl	8000534 <__aeabi_i2d>
 8005bcc:	3630      	adds	r6, #48	; 0x30
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	f805 6b01 	strb.w	r6, [r5], #1
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	429d      	cmp	r5, r3
 8005be2:	4680      	mov	r8, r0
 8005be4:	4689      	mov	r9, r1
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	d124      	bne.n	8005c36 <_dtoa_r+0x62e>
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <_dtoa_r+0x654>)
 8005bee:	ec51 0b19 	vmov	r0, r1, d9
 8005bf2:	f7fa fb53 	bl	800029c <__adddf3>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	f7fa ff93 	bl	8000b28 <__aeabi_dcmpgt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d173      	bne.n	8005cee <_dtoa_r+0x6e6>
 8005c06:	ec53 2b19 	vmov	r2, r3, d9
 8005c0a:	4914      	ldr	r1, [pc, #80]	; (8005c5c <_dtoa_r+0x654>)
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f7fa fb43 	bl	8000298 <__aeabi_dsub>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4640      	mov	r0, r8
 8005c18:	4649      	mov	r1, r9
 8005c1a:	f7fa ff67 	bl	8000aec <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f af2f 	beq.w	8005a82 <_dtoa_r+0x47a>
 8005c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c26:	1e6b      	subs	r3, r5, #1
 8005c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d0f8      	beq.n	8005c24 <_dtoa_r+0x61c>
 8005c32:	46bb      	mov	fp, r7
 8005c34:	e04a      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <_dtoa_r+0x648>)
 8005c38:	f7fa fce6 	bl	8000608 <__aeabi_dmul>
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
 8005c40:	e7bd      	b.n	8005bbe <_dtoa_r+0x5b6>
 8005c42:	bf00      	nop
 8005c44:	08008d28 	.word	0x08008d28
 8005c48:	08008d00 	.word	0x08008d00
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	40240000 	.word	0x40240000
 8005c54:	401c0000 	.word	0x401c0000
 8005c58:	40140000 	.word	0x40140000
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c64:	9d00      	ldr	r5, [sp, #0]
 8005c66:	4642      	mov	r2, r8
 8005c68:	464b      	mov	r3, r9
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fdf5 	bl	800085c <__aeabi_ddiv>
 8005c72:	f7fa ff79 	bl	8000b68 <__aeabi_d2iz>
 8005c76:	9001      	str	r0, [sp, #4]
 8005c78:	f7fa fc5c 	bl	8000534 <__aeabi_i2d>
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	f7fa fcc2 	bl	8000608 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa fb04 	bl	8000298 <__aeabi_dsub>
 8005c90:	9e01      	ldr	r6, [sp, #4]
 8005c92:	9f04      	ldr	r7, [sp, #16]
 8005c94:	3630      	adds	r6, #48	; 0x30
 8005c96:	f805 6b01 	strb.w	r6, [r5], #1
 8005c9a:	9e00      	ldr	r6, [sp, #0]
 8005c9c:	1bae      	subs	r6, r5, r6
 8005c9e:	42b7      	cmp	r7, r6
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	d134      	bne.n	8005d10 <_dtoa_r+0x708>
 8005ca6:	f7fa faf9 	bl	800029c <__adddf3>
 8005caa:	4642      	mov	r2, r8
 8005cac:	464b      	mov	r3, r9
 8005cae:	4606      	mov	r6, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	f7fa ff39 	bl	8000b28 <__aeabi_dcmpgt>
 8005cb6:	b9c8      	cbnz	r0, 8005cec <_dtoa_r+0x6e4>
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cc4:	b110      	cbz	r0, 8005ccc <_dtoa_r+0x6c4>
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d40f      	bmi.n	8005cec <_dtoa_r+0x6e4>
 8005ccc:	4651      	mov	r1, sl
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 fbcc 	bl	800646c <_Bfree>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cd8:	702b      	strb	r3, [r5, #0]
 8005cda:	f10b 0301 	add.w	r3, fp, #1
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f43f ace2 	beq.w	80056ac <_dtoa_r+0xa4>
 8005ce8:	601d      	str	r5, [r3, #0]
 8005cea:	e4df      	b.n	80056ac <_dtoa_r+0xa4>
 8005cec:	465f      	mov	r7, fp
 8005cee:	462b      	mov	r3, r5
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf6:	2a39      	cmp	r2, #57	; 0x39
 8005cf8:	d106      	bne.n	8005d08 <_dtoa_r+0x700>
 8005cfa:	9a00      	ldr	r2, [sp, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1f7      	bne.n	8005cf0 <_dtoa_r+0x6e8>
 8005d00:	9900      	ldr	r1, [sp, #0]
 8005d02:	2230      	movs	r2, #48	; 0x30
 8005d04:	3701      	adds	r7, #1
 8005d06:	700a      	strb	r2, [r1, #0]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e790      	b.n	8005c32 <_dtoa_r+0x62a>
 8005d10:	4ba3      	ldr	r3, [pc, #652]	; (8005fa0 <_dtoa_r+0x998>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	f7fa fc78 	bl	8000608 <__aeabi_dmul>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	f7fa feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d09e      	beq.n	8005c66 <_dtoa_r+0x65e>
 8005d28:	e7d0      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	f000 80ca 	beq.w	8005ec6 <_dtoa_r+0x8be>
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	2a01      	cmp	r2, #1
 8005d36:	f300 80ad 	bgt.w	8005e94 <_dtoa_r+0x88c>
 8005d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	f000 80a5 	beq.w	8005e8c <_dtoa_r+0x884>
 8005d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d46:	9e08      	ldr	r6, [sp, #32]
 8005d48:	9d05      	ldr	r5, [sp, #20]
 8005d4a:	9a05      	ldr	r2, [sp, #20]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	9205      	str	r2, [sp, #20]
 8005d50:	9a06      	ldr	r2, [sp, #24]
 8005d52:	2101      	movs	r1, #1
 8005d54:	441a      	add	r2, r3
 8005d56:	4620      	mov	r0, r4
 8005d58:	9206      	str	r2, [sp, #24]
 8005d5a:	f000 fc87 	bl	800666c <__i2b>
 8005d5e:	4607      	mov	r7, r0
 8005d60:	b165      	cbz	r5, 8005d7c <_dtoa_r+0x774>
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dd09      	ble.n	8005d7c <_dtoa_r+0x774>
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	9a05      	ldr	r2, [sp, #20]
 8005d6c:	bfa8      	it	ge
 8005d6e:	462b      	movge	r3, r5
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	9205      	str	r2, [sp, #20]
 8005d74:	9a06      	ldr	r2, [sp, #24]
 8005d76:	1aed      	subs	r5, r5, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	9306      	str	r3, [sp, #24]
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	b1f3      	cbz	r3, 8005dbe <_dtoa_r+0x7b6>
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80a3 	beq.w	8005ece <_dtoa_r+0x8c6>
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	dd10      	ble.n	8005dae <_dtoa_r+0x7a6>
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fd2b 	bl	80067ec <__pow5mult>
 8005d96:	4652      	mov	r2, sl
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fc7b 	bl	8006698 <__multiply>
 8005da2:	4651      	mov	r1, sl
 8005da4:	4680      	mov	r8, r0
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fb60 	bl	800646c <_Bfree>
 8005dac:	46c2      	mov	sl, r8
 8005dae:	9b08      	ldr	r3, [sp, #32]
 8005db0:	1b9a      	subs	r2, r3, r6
 8005db2:	d004      	beq.n	8005dbe <_dtoa_r+0x7b6>
 8005db4:	4651      	mov	r1, sl
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fd18 	bl	80067ec <__pow5mult>
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fc53 	bl	800666c <__i2b>
 8005dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	f340 8081 	ble.w	8005ed2 <_dtoa_r+0x8ca>
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 fd09 	bl	80067ec <__pow5mult>
 8005dda:	9b07      	ldr	r3, [sp, #28]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	4606      	mov	r6, r0
 8005de0:	dd7a      	ble.n	8005ed8 <_dtoa_r+0x8d0>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	6933      	ldr	r3, [r6, #16]
 8005de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dec:	6918      	ldr	r0, [r3, #16]
 8005dee:	f000 fbef 	bl	80065d0 <__hi0bits>
 8005df2:	f1c0 0020 	rsb	r0, r0, #32
 8005df6:	9b06      	ldr	r3, [sp, #24]
 8005df8:	4418      	add	r0, r3
 8005dfa:	f010 001f 	ands.w	r0, r0, #31
 8005dfe:	f000 8094 	beq.w	8005f2a <_dtoa_r+0x922>
 8005e02:	f1c0 0320 	rsb	r3, r0, #32
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	f340 8085 	ble.w	8005f16 <_dtoa_r+0x90e>
 8005e0c:	9b05      	ldr	r3, [sp, #20]
 8005e0e:	f1c0 001c 	rsb	r0, r0, #28
 8005e12:	4403      	add	r3, r0
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	9b06      	ldr	r3, [sp, #24]
 8005e18:	4403      	add	r3, r0
 8005e1a:	4405      	add	r5, r0
 8005e1c:	9306      	str	r3, [sp, #24]
 8005e1e:	9b05      	ldr	r3, [sp, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dd05      	ble.n	8005e30 <_dtoa_r+0x828>
 8005e24:	4651      	mov	r1, sl
 8005e26:	461a      	mov	r2, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fd39 	bl	80068a0 <__lshift>
 8005e2e:	4682      	mov	sl, r0
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dd05      	ble.n	8005e42 <_dtoa_r+0x83a>
 8005e36:	4631      	mov	r1, r6
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fd30 	bl	80068a0 <__lshift>
 8005e40:	4606      	mov	r6, r0
 8005e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d072      	beq.n	8005f2e <_dtoa_r+0x926>
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	f000 fd94 	bl	8006978 <__mcmp>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	da6c      	bge.n	8005f2e <_dtoa_r+0x926>
 8005e54:	2300      	movs	r3, #0
 8005e56:	4651      	mov	r1, sl
 8005e58:	220a      	movs	r2, #10
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fb28 	bl	80064b0 <__multadd>
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e66:	4682      	mov	sl, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 81b0 	beq.w	80061ce <_dtoa_r+0xbc6>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4639      	mov	r1, r7
 8005e72:	220a      	movs	r2, #10
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 fb1b 	bl	80064b0 <__multadd>
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	4607      	mov	r7, r0
 8005e80:	f300 8096 	bgt.w	8005fb0 <_dtoa_r+0x9a8>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	dc59      	bgt.n	8005f3e <_dtoa_r+0x936>
 8005e8a:	e091      	b.n	8005fb0 <_dtoa_r+0x9a8>
 8005e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e92:	e758      	b.n	8005d46 <_dtoa_r+0x73e>
 8005e94:	9b04      	ldr	r3, [sp, #16]
 8005e96:	1e5e      	subs	r6, r3, #1
 8005e98:	9b08      	ldr	r3, [sp, #32]
 8005e9a:	42b3      	cmp	r3, r6
 8005e9c:	bfbf      	itttt	lt
 8005e9e:	9b08      	ldrlt	r3, [sp, #32]
 8005ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005ea2:	9608      	strlt	r6, [sp, #32]
 8005ea4:	1af3      	sublt	r3, r6, r3
 8005ea6:	bfb4      	ite	lt
 8005ea8:	18d2      	addlt	r2, r2, r3
 8005eaa:	1b9e      	subge	r6, r3, r6
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	bfbc      	itt	lt
 8005eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005eb2:	2600      	movlt	r6, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb7      	itett	lt
 8005eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005ec0:	1a9d      	sublt	r5, r3, r2
 8005ec2:	2300      	movlt	r3, #0
 8005ec4:	e741      	b.n	8005d4a <_dtoa_r+0x742>
 8005ec6:	9e08      	ldr	r6, [sp, #32]
 8005ec8:	9d05      	ldr	r5, [sp, #20]
 8005eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ecc:	e748      	b.n	8005d60 <_dtoa_r+0x758>
 8005ece:	9a08      	ldr	r2, [sp, #32]
 8005ed0:	e770      	b.n	8005db4 <_dtoa_r+0x7ac>
 8005ed2:	9b07      	ldr	r3, [sp, #28]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	dc19      	bgt.n	8005f0c <_dtoa_r+0x904>
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	b9bb      	cbnz	r3, 8005f0c <_dtoa_r+0x904>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee2:	b99b      	cbnz	r3, 8005f0c <_dtoa_r+0x904>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eea:	0d1b      	lsrs	r3, r3, #20
 8005eec:	051b      	lsls	r3, r3, #20
 8005eee:	b183      	cbz	r3, 8005f12 <_dtoa_r+0x90a>
 8005ef0:	9b05      	ldr	r3, [sp, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	9306      	str	r3, [sp, #24]
 8005efc:	f04f 0801 	mov.w	r8, #1
 8005f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f47f af6f 	bne.w	8005de6 <_dtoa_r+0x7de>
 8005f08:	2001      	movs	r0, #1
 8005f0a:	e774      	b.n	8005df6 <_dtoa_r+0x7ee>
 8005f0c:	f04f 0800 	mov.w	r8, #0
 8005f10:	e7f6      	b.n	8005f00 <_dtoa_r+0x8f8>
 8005f12:	4698      	mov	r8, r3
 8005f14:	e7f4      	b.n	8005f00 <_dtoa_r+0x8f8>
 8005f16:	d082      	beq.n	8005e1e <_dtoa_r+0x816>
 8005f18:	9a05      	ldr	r2, [sp, #20]
 8005f1a:	331c      	adds	r3, #28
 8005f1c:	441a      	add	r2, r3
 8005f1e:	9205      	str	r2, [sp, #20]
 8005f20:	9a06      	ldr	r2, [sp, #24]
 8005f22:	441a      	add	r2, r3
 8005f24:	441d      	add	r5, r3
 8005f26:	9206      	str	r2, [sp, #24]
 8005f28:	e779      	b.n	8005e1e <_dtoa_r+0x816>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e7f4      	b.n	8005f18 <_dtoa_r+0x910>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	dc37      	bgt.n	8005fa4 <_dtoa_r+0x99c>
 8005f34:	9b07      	ldr	r3, [sp, #28]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	dd34      	ble.n	8005fa4 <_dtoa_r+0x99c>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	b963      	cbnz	r3, 8005f5c <_dtoa_r+0x954>
 8005f42:	4631      	mov	r1, r6
 8005f44:	2205      	movs	r2, #5
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 fab2 	bl	80064b0 <__multadd>
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	4606      	mov	r6, r0
 8005f50:	4650      	mov	r0, sl
 8005f52:	f000 fd11 	bl	8006978 <__mcmp>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f73f adbb 	bgt.w	8005ad2 <_dtoa_r+0x4ca>
 8005f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5e:	9d00      	ldr	r5, [sp, #0]
 8005f60:	ea6f 0b03 	mvn.w	fp, r3
 8005f64:	f04f 0800 	mov.w	r8, #0
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fa7e 	bl	800646c <_Bfree>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f43f aeab 	beq.w	8005ccc <_dtoa_r+0x6c4>
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	d005      	beq.n	8005f88 <_dtoa_r+0x980>
 8005f7c:	45b8      	cmp	r8, r7
 8005f7e:	d003      	beq.n	8005f88 <_dtoa_r+0x980>
 8005f80:	4641      	mov	r1, r8
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 fa72 	bl	800646c <_Bfree>
 8005f88:	4639      	mov	r1, r7
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 fa6e 	bl	800646c <_Bfree>
 8005f90:	e69c      	b.n	8005ccc <_dtoa_r+0x6c4>
 8005f92:	2600      	movs	r6, #0
 8005f94:	4637      	mov	r7, r6
 8005f96:	e7e1      	b.n	8005f5c <_dtoa_r+0x954>
 8005f98:	46bb      	mov	fp, r7
 8005f9a:	4637      	mov	r7, r6
 8005f9c:	e599      	b.n	8005ad2 <_dtoa_r+0x4ca>
 8005f9e:	bf00      	nop
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80c8 	beq.w	800613c <_dtoa_r+0xb34>
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	dd05      	ble.n	8005fc0 <_dtoa_r+0x9b8>
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fc71 	bl	80068a0 <__lshift>
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	f1b8 0f00 	cmp.w	r8, #0
 8005fc4:	d05b      	beq.n	800607e <_dtoa_r+0xa76>
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fa0f 	bl	80063ec <_Balloc>
 8005fce:	4605      	mov	r5, r0
 8005fd0:	b928      	cbnz	r0, 8005fde <_dtoa_r+0x9d6>
 8005fd2:	4b83      	ldr	r3, [pc, #524]	; (80061e0 <_dtoa_r+0xbd8>)
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005fda:	f7ff bb2e 	b.w	800563a <_dtoa_r+0x32>
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	3202      	adds	r2, #2
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	f107 010c 	add.w	r1, r7, #12
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f002 f94d 	bl	8008288 <memcpy>
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fc54 	bl	80068a0 <__lshift>
 8005ff8:	9b00      	ldr	r3, [sp, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006002:	4413      	add	r3, r2
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9b02      	ldr	r3, [sp, #8]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	46b8      	mov	r8, r7
 800600e:	9306      	str	r3, [sp, #24]
 8006010:	4607      	mov	r7, r0
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	4631      	mov	r1, r6
 8006016:	3b01      	subs	r3, #1
 8006018:	4650      	mov	r0, sl
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	f7ff fa6c 	bl	80054f8 <quorem>
 8006020:	4641      	mov	r1, r8
 8006022:	9002      	str	r0, [sp, #8]
 8006024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006028:	4650      	mov	r0, sl
 800602a:	f000 fca5 	bl	8006978 <__mcmp>
 800602e:	463a      	mov	r2, r7
 8006030:	9005      	str	r0, [sp, #20]
 8006032:	4631      	mov	r1, r6
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fcbb 	bl	80069b0 <__mdiff>
 800603a:	68c2      	ldr	r2, [r0, #12]
 800603c:	4605      	mov	r5, r0
 800603e:	bb02      	cbnz	r2, 8006082 <_dtoa_r+0xa7a>
 8006040:	4601      	mov	r1, r0
 8006042:	4650      	mov	r0, sl
 8006044:	f000 fc98 	bl	8006978 <__mcmp>
 8006048:	4602      	mov	r2, r0
 800604a:	4629      	mov	r1, r5
 800604c:	4620      	mov	r0, r4
 800604e:	9209      	str	r2, [sp, #36]	; 0x24
 8006050:	f000 fa0c 	bl	800646c <_Bfree>
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006058:	9d04      	ldr	r5, [sp, #16]
 800605a:	ea43 0102 	orr.w	r1, r3, r2
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	4319      	orrs	r1, r3
 8006062:	d110      	bne.n	8006086 <_dtoa_r+0xa7e>
 8006064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006068:	d029      	beq.n	80060be <_dtoa_r+0xab6>
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd02      	ble.n	8006076 <_dtoa_r+0xa6e>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006076:	9b01      	ldr	r3, [sp, #4]
 8006078:	f883 9000 	strb.w	r9, [r3]
 800607c:	e774      	b.n	8005f68 <_dtoa_r+0x960>
 800607e:	4638      	mov	r0, r7
 8006080:	e7ba      	b.n	8005ff8 <_dtoa_r+0x9f0>
 8006082:	2201      	movs	r2, #1
 8006084:	e7e1      	b.n	800604a <_dtoa_r+0xa42>
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	db04      	blt.n	8006096 <_dtoa_r+0xa8e>
 800608c:	9907      	ldr	r1, [sp, #28]
 800608e:	430b      	orrs	r3, r1
 8006090:	9906      	ldr	r1, [sp, #24]
 8006092:	430b      	orrs	r3, r1
 8006094:	d120      	bne.n	80060d8 <_dtoa_r+0xad0>
 8006096:	2a00      	cmp	r2, #0
 8006098:	dded      	ble.n	8006076 <_dtoa_r+0xa6e>
 800609a:	4651      	mov	r1, sl
 800609c:	2201      	movs	r2, #1
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fbfe 	bl	80068a0 <__lshift>
 80060a4:	4631      	mov	r1, r6
 80060a6:	4682      	mov	sl, r0
 80060a8:	f000 fc66 	bl	8006978 <__mcmp>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	dc03      	bgt.n	80060b8 <_dtoa_r+0xab0>
 80060b0:	d1e1      	bne.n	8006076 <_dtoa_r+0xa6e>
 80060b2:	f019 0f01 	tst.w	r9, #1
 80060b6:	d0de      	beq.n	8006076 <_dtoa_r+0xa6e>
 80060b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060bc:	d1d8      	bne.n	8006070 <_dtoa_r+0xa68>
 80060be:	9a01      	ldr	r2, [sp, #4]
 80060c0:	2339      	movs	r3, #57	; 0x39
 80060c2:	7013      	strb	r3, [r2, #0]
 80060c4:	462b      	mov	r3, r5
 80060c6:	461d      	mov	r5, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060ce:	2a39      	cmp	r2, #57	; 0x39
 80060d0:	d06c      	beq.n	80061ac <_dtoa_r+0xba4>
 80060d2:	3201      	adds	r2, #1
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e747      	b.n	8005f68 <_dtoa_r+0x960>
 80060d8:	2a00      	cmp	r2, #0
 80060da:	dd07      	ble.n	80060ec <_dtoa_r+0xae4>
 80060dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060e0:	d0ed      	beq.n	80060be <_dtoa_r+0xab6>
 80060e2:	9a01      	ldr	r2, [sp, #4]
 80060e4:	f109 0301 	add.w	r3, r9, #1
 80060e8:	7013      	strb	r3, [r2, #0]
 80060ea:	e73d      	b.n	8005f68 <_dtoa_r+0x960>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	9a08      	ldr	r2, [sp, #32]
 80060f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d043      	beq.n	8006180 <_dtoa_r+0xb78>
 80060f8:	4651      	mov	r1, sl
 80060fa:	2300      	movs	r3, #0
 80060fc:	220a      	movs	r2, #10
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f9d6 	bl	80064b0 <__multadd>
 8006104:	45b8      	cmp	r8, r7
 8006106:	4682      	mov	sl, r0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	f04f 020a 	mov.w	r2, #10
 8006110:	4641      	mov	r1, r8
 8006112:	4620      	mov	r0, r4
 8006114:	d107      	bne.n	8006126 <_dtoa_r+0xb1e>
 8006116:	f000 f9cb 	bl	80064b0 <__multadd>
 800611a:	4680      	mov	r8, r0
 800611c:	4607      	mov	r7, r0
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	3301      	adds	r3, #1
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	e775      	b.n	8006012 <_dtoa_r+0xa0a>
 8006126:	f000 f9c3 	bl	80064b0 <__multadd>
 800612a:	4639      	mov	r1, r7
 800612c:	4680      	mov	r8, r0
 800612e:	2300      	movs	r3, #0
 8006130:	220a      	movs	r2, #10
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f9bc 	bl	80064b0 <__multadd>
 8006138:	4607      	mov	r7, r0
 800613a:	e7f0      	b.n	800611e <_dtoa_r+0xb16>
 800613c:	9b04      	ldr	r3, [sp, #16]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	9d00      	ldr	r5, [sp, #0]
 8006142:	4631      	mov	r1, r6
 8006144:	4650      	mov	r0, sl
 8006146:	f7ff f9d7 	bl	80054f8 <quorem>
 800614a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800614e:	9b00      	ldr	r3, [sp, #0]
 8006150:	f805 9b01 	strb.w	r9, [r5], #1
 8006154:	1aea      	subs	r2, r5, r3
 8006156:	9b01      	ldr	r3, [sp, #4]
 8006158:	4293      	cmp	r3, r2
 800615a:	dd07      	ble.n	800616c <_dtoa_r+0xb64>
 800615c:	4651      	mov	r1, sl
 800615e:	2300      	movs	r3, #0
 8006160:	220a      	movs	r2, #10
 8006162:	4620      	mov	r0, r4
 8006164:	f000 f9a4 	bl	80064b0 <__multadd>
 8006168:	4682      	mov	sl, r0
 800616a:	e7ea      	b.n	8006142 <_dtoa_r+0xb3a>
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfc8      	it	gt
 8006172:	461d      	movgt	r5, r3
 8006174:	9b00      	ldr	r3, [sp, #0]
 8006176:	bfd8      	it	le
 8006178:	2501      	movle	r5, #1
 800617a:	441d      	add	r5, r3
 800617c:	f04f 0800 	mov.w	r8, #0
 8006180:	4651      	mov	r1, sl
 8006182:	2201      	movs	r2, #1
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fb8b 	bl	80068a0 <__lshift>
 800618a:	4631      	mov	r1, r6
 800618c:	4682      	mov	sl, r0
 800618e:	f000 fbf3 	bl	8006978 <__mcmp>
 8006192:	2800      	cmp	r0, #0
 8006194:	dc96      	bgt.n	80060c4 <_dtoa_r+0xabc>
 8006196:	d102      	bne.n	800619e <_dtoa_r+0xb96>
 8006198:	f019 0f01 	tst.w	r9, #1
 800619c:	d192      	bne.n	80060c4 <_dtoa_r+0xabc>
 800619e:	462b      	mov	r3, r5
 80061a0:	461d      	mov	r5, r3
 80061a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061a6:	2a30      	cmp	r2, #48	; 0x30
 80061a8:	d0fa      	beq.n	80061a0 <_dtoa_r+0xb98>
 80061aa:	e6dd      	b.n	8005f68 <_dtoa_r+0x960>
 80061ac:	9a00      	ldr	r2, [sp, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d189      	bne.n	80060c6 <_dtoa_r+0xabe>
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	2331      	movs	r3, #49	; 0x31
 80061b8:	e796      	b.n	80060e8 <_dtoa_r+0xae0>
 80061ba:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <_dtoa_r+0xbdc>)
 80061bc:	f7ff ba99 	b.w	80056f2 <_dtoa_r+0xea>
 80061c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f47f aa6d 	bne.w	80056a2 <_dtoa_r+0x9a>
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <_dtoa_r+0xbe0>)
 80061ca:	f7ff ba92 	b.w	80056f2 <_dtoa_r+0xea>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dcb5      	bgt.n	8006140 <_dtoa_r+0xb38>
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	f73f aeb1 	bgt.w	8005f3e <_dtoa_r+0x936>
 80061dc:	e7b0      	b.n	8006140 <_dtoa_r+0xb38>
 80061de:	bf00      	nop
 80061e0:	08008c95 	.word	0x08008c95
 80061e4:	08008bf0 	.word	0x08008bf0
 80061e8:	08008c19 	.word	0x08008c19

080061ec <_free_r>:
 80061ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d044      	beq.n	800627c <_free_r+0x90>
 80061f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f6:	9001      	str	r0, [sp, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f1a1 0404 	sub.w	r4, r1, #4
 80061fe:	bfb8      	it	lt
 8006200:	18e4      	addlt	r4, r4, r3
 8006202:	f000 f8e7 	bl	80063d4 <__malloc_lock>
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <_free_r+0x94>)
 8006208:	9801      	ldr	r0, [sp, #4]
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	b933      	cbnz	r3, 800621c <_free_r+0x30>
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	6014      	str	r4, [r2, #0]
 8006212:	b003      	add	sp, #12
 8006214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006218:	f000 b8e2 	b.w	80063e0 <__malloc_unlock>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d908      	bls.n	8006232 <_free_r+0x46>
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	1961      	adds	r1, r4, r5
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1949      	addeq	r1, r1, r5
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	e7ed      	b.n	800620e <_free_r+0x22>
 8006232:	461a      	mov	r2, r3
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b10b      	cbz	r3, 800623c <_free_r+0x50>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d9fa      	bls.n	8006232 <_free_r+0x46>
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	1855      	adds	r5, r2, r1
 8006240:	42a5      	cmp	r5, r4
 8006242:	d10b      	bne.n	800625c <_free_r+0x70>
 8006244:	6824      	ldr	r4, [r4, #0]
 8006246:	4421      	add	r1, r4
 8006248:	1854      	adds	r4, r2, r1
 800624a:	42a3      	cmp	r3, r4
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	d1e0      	bne.n	8006212 <_free_r+0x26>
 8006250:	681c      	ldr	r4, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	6053      	str	r3, [r2, #4]
 8006256:	440c      	add	r4, r1
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	e7da      	b.n	8006212 <_free_r+0x26>
 800625c:	d902      	bls.n	8006264 <_free_r+0x78>
 800625e:	230c      	movs	r3, #12
 8006260:	6003      	str	r3, [r0, #0]
 8006262:	e7d6      	b.n	8006212 <_free_r+0x26>
 8006264:	6825      	ldr	r5, [r4, #0]
 8006266:	1961      	adds	r1, r4, r5
 8006268:	428b      	cmp	r3, r1
 800626a:	bf04      	itt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	bf04      	itt	eq
 8006274:	1949      	addeq	r1, r1, r5
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	6054      	str	r4, [r2, #4]
 800627a:	e7ca      	b.n	8006212 <_free_r+0x26>
 800627c:	b003      	add	sp, #12
 800627e:	bd30      	pop	{r4, r5, pc}
 8006280:	20000424 	.word	0x20000424

08006284 <malloc>:
 8006284:	4b02      	ldr	r3, [pc, #8]	; (8006290 <malloc+0xc>)
 8006286:	4601      	mov	r1, r0
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	f000 b823 	b.w	80062d4 <_malloc_r>
 800628e:	bf00      	nop
 8006290:	20000064 	.word	0x20000064

08006294 <sbrk_aligned>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4e0e      	ldr	r6, [pc, #56]	; (80062d0 <sbrk_aligned+0x3c>)
 8006298:	460c      	mov	r4, r1
 800629a:	6831      	ldr	r1, [r6, #0]
 800629c:	4605      	mov	r5, r0
 800629e:	b911      	cbnz	r1, 80062a6 <sbrk_aligned+0x12>
 80062a0:	f001 ffe2 	bl	8008268 <_sbrk_r>
 80062a4:	6030      	str	r0, [r6, #0]
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f001 ffdd 	bl	8008268 <_sbrk_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d00a      	beq.n	80062c8 <sbrk_aligned+0x34>
 80062b2:	1cc4      	adds	r4, r0, #3
 80062b4:	f024 0403 	bic.w	r4, r4, #3
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d007      	beq.n	80062cc <sbrk_aligned+0x38>
 80062bc:	1a21      	subs	r1, r4, r0
 80062be:	4628      	mov	r0, r5
 80062c0:	f001 ffd2 	bl	8008268 <_sbrk_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d101      	bne.n	80062cc <sbrk_aligned+0x38>
 80062c8:	f04f 34ff 	mov.w	r4, #4294967295
 80062cc:	4620      	mov	r0, r4
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	20000428 	.word	0x20000428

080062d4 <_malloc_r>:
 80062d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d8:	1ccd      	adds	r5, r1, #3
 80062da:	f025 0503 	bic.w	r5, r5, #3
 80062de:	3508      	adds	r5, #8
 80062e0:	2d0c      	cmp	r5, #12
 80062e2:	bf38      	it	cc
 80062e4:	250c      	movcc	r5, #12
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	4607      	mov	r7, r0
 80062ea:	db01      	blt.n	80062f0 <_malloc_r+0x1c>
 80062ec:	42a9      	cmp	r1, r5
 80062ee:	d905      	bls.n	80062fc <_malloc_r+0x28>
 80062f0:	230c      	movs	r3, #12
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	2600      	movs	r6, #0
 80062f6:	4630      	mov	r0, r6
 80062f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063d0 <_malloc_r+0xfc>
 8006300:	f000 f868 	bl	80063d4 <__malloc_lock>
 8006304:	f8d8 3000 	ldr.w	r3, [r8]
 8006308:	461c      	mov	r4, r3
 800630a:	bb5c      	cbnz	r4, 8006364 <_malloc_r+0x90>
 800630c:	4629      	mov	r1, r5
 800630e:	4638      	mov	r0, r7
 8006310:	f7ff ffc0 	bl	8006294 <sbrk_aligned>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	4604      	mov	r4, r0
 8006318:	d155      	bne.n	80063c6 <_malloc_r+0xf2>
 800631a:	f8d8 4000 	ldr.w	r4, [r8]
 800631e:	4626      	mov	r6, r4
 8006320:	2e00      	cmp	r6, #0
 8006322:	d145      	bne.n	80063b0 <_malloc_r+0xdc>
 8006324:	2c00      	cmp	r4, #0
 8006326:	d048      	beq.n	80063ba <_malloc_r+0xe6>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	4631      	mov	r1, r6
 800632c:	4638      	mov	r0, r7
 800632e:	eb04 0903 	add.w	r9, r4, r3
 8006332:	f001 ff99 	bl	8008268 <_sbrk_r>
 8006336:	4581      	cmp	r9, r0
 8006338:	d13f      	bne.n	80063ba <_malloc_r+0xe6>
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	1a6d      	subs	r5, r5, r1
 800633e:	4629      	mov	r1, r5
 8006340:	4638      	mov	r0, r7
 8006342:	f7ff ffa7 	bl	8006294 <sbrk_aligned>
 8006346:	3001      	adds	r0, #1
 8006348:	d037      	beq.n	80063ba <_malloc_r+0xe6>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	442b      	add	r3, r5
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	f8d8 3000 	ldr.w	r3, [r8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d038      	beq.n	80063ca <_malloc_r+0xf6>
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	42a2      	cmp	r2, r4
 800635c:	d12b      	bne.n	80063b6 <_malloc_r+0xe2>
 800635e:	2200      	movs	r2, #0
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e00f      	b.n	8006384 <_malloc_r+0xb0>
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	1b52      	subs	r2, r2, r5
 8006368:	d41f      	bmi.n	80063aa <_malloc_r+0xd6>
 800636a:	2a0b      	cmp	r2, #11
 800636c:	d917      	bls.n	800639e <_malloc_r+0xca>
 800636e:	1961      	adds	r1, r4, r5
 8006370:	42a3      	cmp	r3, r4
 8006372:	6025      	str	r5, [r4, #0]
 8006374:	bf18      	it	ne
 8006376:	6059      	strne	r1, [r3, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	bf08      	it	eq
 800637c:	f8c8 1000 	streq.w	r1, [r8]
 8006380:	5162      	str	r2, [r4, r5]
 8006382:	604b      	str	r3, [r1, #4]
 8006384:	4638      	mov	r0, r7
 8006386:	f104 060b 	add.w	r6, r4, #11
 800638a:	f000 f829 	bl	80063e0 <__malloc_unlock>
 800638e:	f026 0607 	bic.w	r6, r6, #7
 8006392:	1d23      	adds	r3, r4, #4
 8006394:	1af2      	subs	r2, r6, r3
 8006396:	d0ae      	beq.n	80062f6 <_malloc_r+0x22>
 8006398:	1b9b      	subs	r3, r3, r6
 800639a:	50a3      	str	r3, [r4, r2]
 800639c:	e7ab      	b.n	80062f6 <_malloc_r+0x22>
 800639e:	42a3      	cmp	r3, r4
 80063a0:	6862      	ldr	r2, [r4, #4]
 80063a2:	d1dd      	bne.n	8006360 <_malloc_r+0x8c>
 80063a4:	f8c8 2000 	str.w	r2, [r8]
 80063a8:	e7ec      	b.n	8006384 <_malloc_r+0xb0>
 80063aa:	4623      	mov	r3, r4
 80063ac:	6864      	ldr	r4, [r4, #4]
 80063ae:	e7ac      	b.n	800630a <_malloc_r+0x36>
 80063b0:	4634      	mov	r4, r6
 80063b2:	6876      	ldr	r6, [r6, #4]
 80063b4:	e7b4      	b.n	8006320 <_malloc_r+0x4c>
 80063b6:	4613      	mov	r3, r2
 80063b8:	e7cc      	b.n	8006354 <_malloc_r+0x80>
 80063ba:	230c      	movs	r3, #12
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4638      	mov	r0, r7
 80063c0:	f000 f80e 	bl	80063e0 <__malloc_unlock>
 80063c4:	e797      	b.n	80062f6 <_malloc_r+0x22>
 80063c6:	6025      	str	r5, [r4, #0]
 80063c8:	e7dc      	b.n	8006384 <_malloc_r+0xb0>
 80063ca:	605b      	str	r3, [r3, #4]
 80063cc:	deff      	udf	#255	; 0xff
 80063ce:	bf00      	nop
 80063d0:	20000424 	.word	0x20000424

080063d4 <__malloc_lock>:
 80063d4:	4801      	ldr	r0, [pc, #4]	; (80063dc <__malloc_lock+0x8>)
 80063d6:	f7ff b886 	b.w	80054e6 <__retarget_lock_acquire_recursive>
 80063da:	bf00      	nop
 80063dc:	20000420 	.word	0x20000420

080063e0 <__malloc_unlock>:
 80063e0:	4801      	ldr	r0, [pc, #4]	; (80063e8 <__malloc_unlock+0x8>)
 80063e2:	f7ff b881 	b.w	80054e8 <__retarget_lock_release_recursive>
 80063e6:	bf00      	nop
 80063e8:	20000420 	.word	0x20000420

080063ec <_Balloc>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	69c6      	ldr	r6, [r0, #28]
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	b976      	cbnz	r6, 8006414 <_Balloc+0x28>
 80063f6:	2010      	movs	r0, #16
 80063f8:	f7ff ff44 	bl	8006284 <malloc>
 80063fc:	4602      	mov	r2, r0
 80063fe:	61e0      	str	r0, [r4, #28]
 8006400:	b920      	cbnz	r0, 800640c <_Balloc+0x20>
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <_Balloc+0x78>)
 8006404:	4818      	ldr	r0, [pc, #96]	; (8006468 <_Balloc+0x7c>)
 8006406:	216b      	movs	r1, #107	; 0x6b
 8006408:	f001 ff56 	bl	80082b8 <__assert_func>
 800640c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006410:	6006      	str	r6, [r0, #0]
 8006412:	60c6      	str	r6, [r0, #12]
 8006414:	69e6      	ldr	r6, [r4, #28]
 8006416:	68f3      	ldr	r3, [r6, #12]
 8006418:	b183      	cbz	r3, 800643c <_Balloc+0x50>
 800641a:	69e3      	ldr	r3, [r4, #28]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006422:	b9b8      	cbnz	r0, 8006454 <_Balloc+0x68>
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f605 	lsl.w	r6, r1, r5
 800642a:	1d72      	adds	r2, r6, #5
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	4620      	mov	r0, r4
 8006430:	f001 ff60 	bl	80082f4 <_calloc_r>
 8006434:	b160      	cbz	r0, 8006450 <_Balloc+0x64>
 8006436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800643a:	e00e      	b.n	800645a <_Balloc+0x6e>
 800643c:	2221      	movs	r2, #33	; 0x21
 800643e:	2104      	movs	r1, #4
 8006440:	4620      	mov	r0, r4
 8006442:	f001 ff57 	bl	80082f4 <_calloc_r>
 8006446:	69e3      	ldr	r3, [r4, #28]
 8006448:	60f0      	str	r0, [r6, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <_Balloc+0x2e>
 8006450:	2000      	movs	r0, #0
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800645a:	2300      	movs	r3, #0
 800645c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006460:	e7f7      	b.n	8006452 <_Balloc+0x66>
 8006462:	bf00      	nop
 8006464:	08008c26 	.word	0x08008c26
 8006468:	08008ca6 	.word	0x08008ca6

0800646c <_Bfree>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	69c6      	ldr	r6, [r0, #28]
 8006470:	4605      	mov	r5, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b976      	cbnz	r6, 8006494 <_Bfree+0x28>
 8006476:	2010      	movs	r0, #16
 8006478:	f7ff ff04 	bl	8006284 <malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	61e8      	str	r0, [r5, #28]
 8006480:	b920      	cbnz	r0, 800648c <_Bfree+0x20>
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <_Bfree+0x3c>)
 8006484:	4809      	ldr	r0, [pc, #36]	; (80064ac <_Bfree+0x40>)
 8006486:	218f      	movs	r1, #143	; 0x8f
 8006488:	f001 ff16 	bl	80082b8 <__assert_func>
 800648c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006490:	6006      	str	r6, [r0, #0]
 8006492:	60c6      	str	r6, [r0, #12]
 8006494:	b13c      	cbz	r4, 80064a6 <_Bfree+0x3a>
 8006496:	69eb      	ldr	r3, [r5, #28]
 8006498:	6862      	ldr	r2, [r4, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a0:	6021      	str	r1, [r4, #0]
 80064a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	08008c26 	.word	0x08008c26
 80064ac:	08008ca6 	.word	0x08008ca6

080064b0 <__multadd>:
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	690d      	ldr	r5, [r1, #16]
 80064b6:	4607      	mov	r7, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	461e      	mov	r6, r3
 80064bc:	f101 0c14 	add.w	ip, r1, #20
 80064c0:	2000      	movs	r0, #0
 80064c2:	f8dc 3000 	ldr.w	r3, [ip]
 80064c6:	b299      	uxth	r1, r3
 80064c8:	fb02 6101 	mla	r1, r2, r1, r6
 80064cc:	0c1e      	lsrs	r6, r3, #16
 80064ce:	0c0b      	lsrs	r3, r1, #16
 80064d0:	fb02 3306 	mla	r3, r2, r6, r3
 80064d4:	b289      	uxth	r1, r1
 80064d6:	3001      	adds	r0, #1
 80064d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064dc:	4285      	cmp	r5, r0
 80064de:	f84c 1b04 	str.w	r1, [ip], #4
 80064e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064e6:	dcec      	bgt.n	80064c2 <__multadd+0x12>
 80064e8:	b30e      	cbz	r6, 800652e <__multadd+0x7e>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dc19      	bgt.n	8006524 <__multadd+0x74>
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4638      	mov	r0, r7
 80064f4:	3101      	adds	r1, #1
 80064f6:	f7ff ff79 	bl	80063ec <_Balloc>
 80064fa:	4680      	mov	r8, r0
 80064fc:	b928      	cbnz	r0, 800650a <__multadd+0x5a>
 80064fe:	4602      	mov	r2, r0
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <__multadd+0x84>)
 8006502:	480d      	ldr	r0, [pc, #52]	; (8006538 <__multadd+0x88>)
 8006504:	21ba      	movs	r1, #186	; 0xba
 8006506:	f001 fed7 	bl	80082b8 <__assert_func>
 800650a:	6922      	ldr	r2, [r4, #16]
 800650c:	3202      	adds	r2, #2
 800650e:	f104 010c 	add.w	r1, r4, #12
 8006512:	0092      	lsls	r2, r2, #2
 8006514:	300c      	adds	r0, #12
 8006516:	f001 feb7 	bl	8008288 <memcpy>
 800651a:	4621      	mov	r1, r4
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ffa5 	bl	800646c <_Bfree>
 8006522:	4644      	mov	r4, r8
 8006524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006528:	3501      	adds	r5, #1
 800652a:	615e      	str	r6, [r3, #20]
 800652c:	6125      	str	r5, [r4, #16]
 800652e:	4620      	mov	r0, r4
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006534:	08008c95 	.word	0x08008c95
 8006538:	08008ca6 	.word	0x08008ca6

0800653c <__s2b>:
 800653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006540:	460c      	mov	r4, r1
 8006542:	4615      	mov	r5, r2
 8006544:	461f      	mov	r7, r3
 8006546:	2209      	movs	r2, #9
 8006548:	3308      	adds	r3, #8
 800654a:	4606      	mov	r6, r0
 800654c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006550:	2100      	movs	r1, #0
 8006552:	2201      	movs	r2, #1
 8006554:	429a      	cmp	r2, r3
 8006556:	db09      	blt.n	800656c <__s2b+0x30>
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ff47 	bl	80063ec <_Balloc>
 800655e:	b940      	cbnz	r0, 8006572 <__s2b+0x36>
 8006560:	4602      	mov	r2, r0
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <__s2b+0x8c>)
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <__s2b+0x90>)
 8006566:	21d3      	movs	r1, #211	; 0xd3
 8006568:	f001 fea6 	bl	80082b8 <__assert_func>
 800656c:	0052      	lsls	r2, r2, #1
 800656e:	3101      	adds	r1, #1
 8006570:	e7f0      	b.n	8006554 <__s2b+0x18>
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	6143      	str	r3, [r0, #20]
 8006576:	2d09      	cmp	r5, #9
 8006578:	f04f 0301 	mov.w	r3, #1
 800657c:	6103      	str	r3, [r0, #16]
 800657e:	dd16      	ble.n	80065ae <__s2b+0x72>
 8006580:	f104 0909 	add.w	r9, r4, #9
 8006584:	46c8      	mov	r8, r9
 8006586:	442c      	add	r4, r5
 8006588:	f818 3b01 	ldrb.w	r3, [r8], #1
 800658c:	4601      	mov	r1, r0
 800658e:	3b30      	subs	r3, #48	; 0x30
 8006590:	220a      	movs	r2, #10
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ff8c 	bl	80064b0 <__multadd>
 8006598:	45a0      	cmp	r8, r4
 800659a:	d1f5      	bne.n	8006588 <__s2b+0x4c>
 800659c:	f1a5 0408 	sub.w	r4, r5, #8
 80065a0:	444c      	add	r4, r9
 80065a2:	1b2d      	subs	r5, r5, r4
 80065a4:	1963      	adds	r3, r4, r5
 80065a6:	42bb      	cmp	r3, r7
 80065a8:	db04      	blt.n	80065b4 <__s2b+0x78>
 80065aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ae:	340a      	adds	r4, #10
 80065b0:	2509      	movs	r5, #9
 80065b2:	e7f6      	b.n	80065a2 <__s2b+0x66>
 80065b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065b8:	4601      	mov	r1, r0
 80065ba:	3b30      	subs	r3, #48	; 0x30
 80065bc:	220a      	movs	r2, #10
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff ff76 	bl	80064b0 <__multadd>
 80065c4:	e7ee      	b.n	80065a4 <__s2b+0x68>
 80065c6:	bf00      	nop
 80065c8:	08008c95 	.word	0x08008c95
 80065cc:	08008ca6 	.word	0x08008ca6

080065d0 <__hi0bits>:
 80065d0:	0c03      	lsrs	r3, r0, #16
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	b9d3      	cbnz	r3, 800660c <__hi0bits+0x3c>
 80065d6:	0400      	lsls	r0, r0, #16
 80065d8:	2310      	movs	r3, #16
 80065da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065de:	bf04      	itt	eq
 80065e0:	0200      	lsleq	r0, r0, #8
 80065e2:	3308      	addeq	r3, #8
 80065e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065e8:	bf04      	itt	eq
 80065ea:	0100      	lsleq	r0, r0, #4
 80065ec:	3304      	addeq	r3, #4
 80065ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065f2:	bf04      	itt	eq
 80065f4:	0080      	lsleq	r0, r0, #2
 80065f6:	3302      	addeq	r3, #2
 80065f8:	2800      	cmp	r0, #0
 80065fa:	db05      	blt.n	8006608 <__hi0bits+0x38>
 80065fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006600:	f103 0301 	add.w	r3, r3, #1
 8006604:	bf08      	it	eq
 8006606:	2320      	moveq	r3, #32
 8006608:	4618      	mov	r0, r3
 800660a:	4770      	bx	lr
 800660c:	2300      	movs	r3, #0
 800660e:	e7e4      	b.n	80065da <__hi0bits+0xa>

08006610 <__lo0bits>:
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	f013 0207 	ands.w	r2, r3, #7
 8006616:	d00c      	beq.n	8006632 <__lo0bits+0x22>
 8006618:	07d9      	lsls	r1, r3, #31
 800661a:	d422      	bmi.n	8006662 <__lo0bits+0x52>
 800661c:	079a      	lsls	r2, r3, #30
 800661e:	bf49      	itett	mi
 8006620:	085b      	lsrmi	r3, r3, #1
 8006622:	089b      	lsrpl	r3, r3, #2
 8006624:	6003      	strmi	r3, [r0, #0]
 8006626:	2201      	movmi	r2, #1
 8006628:	bf5c      	itt	pl
 800662a:	6003      	strpl	r3, [r0, #0]
 800662c:	2202      	movpl	r2, #2
 800662e:	4610      	mov	r0, r2
 8006630:	4770      	bx	lr
 8006632:	b299      	uxth	r1, r3
 8006634:	b909      	cbnz	r1, 800663a <__lo0bits+0x2a>
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	2210      	movs	r2, #16
 800663a:	b2d9      	uxtb	r1, r3
 800663c:	b909      	cbnz	r1, 8006642 <__lo0bits+0x32>
 800663e:	3208      	adds	r2, #8
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	0719      	lsls	r1, r3, #28
 8006644:	bf04      	itt	eq
 8006646:	091b      	lsreq	r3, r3, #4
 8006648:	3204      	addeq	r2, #4
 800664a:	0799      	lsls	r1, r3, #30
 800664c:	bf04      	itt	eq
 800664e:	089b      	lsreq	r3, r3, #2
 8006650:	3202      	addeq	r2, #2
 8006652:	07d9      	lsls	r1, r3, #31
 8006654:	d403      	bmi.n	800665e <__lo0bits+0x4e>
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	f102 0201 	add.w	r2, r2, #1
 800665c:	d003      	beq.n	8006666 <__lo0bits+0x56>
 800665e:	6003      	str	r3, [r0, #0]
 8006660:	e7e5      	b.n	800662e <__lo0bits+0x1e>
 8006662:	2200      	movs	r2, #0
 8006664:	e7e3      	b.n	800662e <__lo0bits+0x1e>
 8006666:	2220      	movs	r2, #32
 8006668:	e7e1      	b.n	800662e <__lo0bits+0x1e>
	...

0800666c <__i2b>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	2101      	movs	r1, #1
 8006672:	f7ff febb 	bl	80063ec <_Balloc>
 8006676:	4602      	mov	r2, r0
 8006678:	b928      	cbnz	r0, 8006686 <__i2b+0x1a>
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <__i2b+0x24>)
 800667c:	4805      	ldr	r0, [pc, #20]	; (8006694 <__i2b+0x28>)
 800667e:	f240 1145 	movw	r1, #325	; 0x145
 8006682:	f001 fe19 	bl	80082b8 <__assert_func>
 8006686:	2301      	movs	r3, #1
 8006688:	6144      	str	r4, [r0, #20]
 800668a:	6103      	str	r3, [r0, #16]
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	08008c95 	.word	0x08008c95
 8006694:	08008ca6 	.word	0x08008ca6

08006698 <__multiply>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4691      	mov	r9, r2
 800669e:	690a      	ldr	r2, [r1, #16]
 80066a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfb8      	it	lt
 80066a8:	460b      	movlt	r3, r1
 80066aa:	460c      	mov	r4, r1
 80066ac:	bfbc      	itt	lt
 80066ae:	464c      	movlt	r4, r9
 80066b0:	4699      	movlt	r9, r3
 80066b2:	6927      	ldr	r7, [r4, #16]
 80066b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	6861      	ldr	r1, [r4, #4]
 80066bc:	eb07 060a 	add.w	r6, r7, sl
 80066c0:	42b3      	cmp	r3, r6
 80066c2:	b085      	sub	sp, #20
 80066c4:	bfb8      	it	lt
 80066c6:	3101      	addlt	r1, #1
 80066c8:	f7ff fe90 	bl	80063ec <_Balloc>
 80066cc:	b930      	cbnz	r0, 80066dc <__multiply+0x44>
 80066ce:	4602      	mov	r2, r0
 80066d0:	4b44      	ldr	r3, [pc, #272]	; (80067e4 <__multiply+0x14c>)
 80066d2:	4845      	ldr	r0, [pc, #276]	; (80067e8 <__multiply+0x150>)
 80066d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066d8:	f001 fdee 	bl	80082b8 <__assert_func>
 80066dc:	f100 0514 	add.w	r5, r0, #20
 80066e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066e4:	462b      	mov	r3, r5
 80066e6:	2200      	movs	r2, #0
 80066e8:	4543      	cmp	r3, r8
 80066ea:	d321      	bcc.n	8006730 <__multiply+0x98>
 80066ec:	f104 0314 	add.w	r3, r4, #20
 80066f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066f4:	f109 0314 	add.w	r3, r9, #20
 80066f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066fc:	9202      	str	r2, [sp, #8]
 80066fe:	1b3a      	subs	r2, r7, r4
 8006700:	3a15      	subs	r2, #21
 8006702:	f022 0203 	bic.w	r2, r2, #3
 8006706:	3204      	adds	r2, #4
 8006708:	f104 0115 	add.w	r1, r4, #21
 800670c:	428f      	cmp	r7, r1
 800670e:	bf38      	it	cc
 8006710:	2204      	movcc	r2, #4
 8006712:	9201      	str	r2, [sp, #4]
 8006714:	9a02      	ldr	r2, [sp, #8]
 8006716:	9303      	str	r3, [sp, #12]
 8006718:	429a      	cmp	r2, r3
 800671a:	d80c      	bhi.n	8006736 <__multiply+0x9e>
 800671c:	2e00      	cmp	r6, #0
 800671e:	dd03      	ble.n	8006728 <__multiply+0x90>
 8006720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006724:	2b00      	cmp	r3, #0
 8006726:	d05b      	beq.n	80067e0 <__multiply+0x148>
 8006728:	6106      	str	r6, [r0, #16]
 800672a:	b005      	add	sp, #20
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006730:	f843 2b04 	str.w	r2, [r3], #4
 8006734:	e7d8      	b.n	80066e8 <__multiply+0x50>
 8006736:	f8b3 a000 	ldrh.w	sl, [r3]
 800673a:	f1ba 0f00 	cmp.w	sl, #0
 800673e:	d024      	beq.n	800678a <__multiply+0xf2>
 8006740:	f104 0e14 	add.w	lr, r4, #20
 8006744:	46a9      	mov	r9, r5
 8006746:	f04f 0c00 	mov.w	ip, #0
 800674a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800674e:	f8d9 1000 	ldr.w	r1, [r9]
 8006752:	fa1f fb82 	uxth.w	fp, r2
 8006756:	b289      	uxth	r1, r1
 8006758:	fb0a 110b 	mla	r1, sl, fp, r1
 800675c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006760:	f8d9 2000 	ldr.w	r2, [r9]
 8006764:	4461      	add	r1, ip
 8006766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800676a:	fb0a c20b 	mla	r2, sl, fp, ip
 800676e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006772:	b289      	uxth	r1, r1
 8006774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006778:	4577      	cmp	r7, lr
 800677a:	f849 1b04 	str.w	r1, [r9], #4
 800677e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006782:	d8e2      	bhi.n	800674a <__multiply+0xb2>
 8006784:	9a01      	ldr	r2, [sp, #4]
 8006786:	f845 c002 	str.w	ip, [r5, r2]
 800678a:	9a03      	ldr	r2, [sp, #12]
 800678c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006790:	3304      	adds	r3, #4
 8006792:	f1b9 0f00 	cmp.w	r9, #0
 8006796:	d021      	beq.n	80067dc <__multiply+0x144>
 8006798:	6829      	ldr	r1, [r5, #0]
 800679a:	f104 0c14 	add.w	ip, r4, #20
 800679e:	46ae      	mov	lr, r5
 80067a0:	f04f 0a00 	mov.w	sl, #0
 80067a4:	f8bc b000 	ldrh.w	fp, [ip]
 80067a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067ac:	fb09 220b 	mla	r2, r9, fp, r2
 80067b0:	4452      	add	r2, sl
 80067b2:	b289      	uxth	r1, r1
 80067b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067b8:	f84e 1b04 	str.w	r1, [lr], #4
 80067bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067c4:	f8be 1000 	ldrh.w	r1, [lr]
 80067c8:	fb09 110a 	mla	r1, r9, sl, r1
 80067cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067d0:	4567      	cmp	r7, ip
 80067d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067d6:	d8e5      	bhi.n	80067a4 <__multiply+0x10c>
 80067d8:	9a01      	ldr	r2, [sp, #4]
 80067da:	50a9      	str	r1, [r5, r2]
 80067dc:	3504      	adds	r5, #4
 80067de:	e799      	b.n	8006714 <__multiply+0x7c>
 80067e0:	3e01      	subs	r6, #1
 80067e2:	e79b      	b.n	800671c <__multiply+0x84>
 80067e4:	08008c95 	.word	0x08008c95
 80067e8:	08008ca6 	.word	0x08008ca6

080067ec <__pow5mult>:
 80067ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f0:	4615      	mov	r5, r2
 80067f2:	f012 0203 	ands.w	r2, r2, #3
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	d007      	beq.n	800680c <__pow5mult+0x20>
 80067fc:	4c25      	ldr	r4, [pc, #148]	; (8006894 <__pow5mult+0xa8>)
 80067fe:	3a01      	subs	r2, #1
 8006800:	2300      	movs	r3, #0
 8006802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006806:	f7ff fe53 	bl	80064b0 <__multadd>
 800680a:	4607      	mov	r7, r0
 800680c:	10ad      	asrs	r5, r5, #2
 800680e:	d03d      	beq.n	800688c <__pow5mult+0xa0>
 8006810:	69f4      	ldr	r4, [r6, #28]
 8006812:	b97c      	cbnz	r4, 8006834 <__pow5mult+0x48>
 8006814:	2010      	movs	r0, #16
 8006816:	f7ff fd35 	bl	8006284 <malloc>
 800681a:	4602      	mov	r2, r0
 800681c:	61f0      	str	r0, [r6, #28]
 800681e:	b928      	cbnz	r0, 800682c <__pow5mult+0x40>
 8006820:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <__pow5mult+0xac>)
 8006822:	481e      	ldr	r0, [pc, #120]	; (800689c <__pow5mult+0xb0>)
 8006824:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006828:	f001 fd46 	bl	80082b8 <__assert_func>
 800682c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006830:	6004      	str	r4, [r0, #0]
 8006832:	60c4      	str	r4, [r0, #12]
 8006834:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800683c:	b94c      	cbnz	r4, 8006852 <__pow5mult+0x66>
 800683e:	f240 2171 	movw	r1, #625	; 0x271
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff ff12 	bl	800666c <__i2b>
 8006848:	2300      	movs	r3, #0
 800684a:	f8c8 0008 	str.w	r0, [r8, #8]
 800684e:	4604      	mov	r4, r0
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	f04f 0900 	mov.w	r9, #0
 8006856:	07eb      	lsls	r3, r5, #31
 8006858:	d50a      	bpl.n	8006870 <__pow5mult+0x84>
 800685a:	4639      	mov	r1, r7
 800685c:	4622      	mov	r2, r4
 800685e:	4630      	mov	r0, r6
 8006860:	f7ff ff1a 	bl	8006698 <__multiply>
 8006864:	4639      	mov	r1, r7
 8006866:	4680      	mov	r8, r0
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff fdff 	bl	800646c <_Bfree>
 800686e:	4647      	mov	r7, r8
 8006870:	106d      	asrs	r5, r5, #1
 8006872:	d00b      	beq.n	800688c <__pow5mult+0xa0>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	b938      	cbnz	r0, 8006888 <__pow5mult+0x9c>
 8006878:	4622      	mov	r2, r4
 800687a:	4621      	mov	r1, r4
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff ff0b 	bl	8006698 <__multiply>
 8006882:	6020      	str	r0, [r4, #0]
 8006884:	f8c0 9000 	str.w	r9, [r0]
 8006888:	4604      	mov	r4, r0
 800688a:	e7e4      	b.n	8006856 <__pow5mult+0x6a>
 800688c:	4638      	mov	r0, r7
 800688e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006892:	bf00      	nop
 8006894:	08008df0 	.word	0x08008df0
 8006898:	08008c26 	.word	0x08008c26
 800689c:	08008ca6 	.word	0x08008ca6

080068a0 <__lshift>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	460c      	mov	r4, r1
 80068a6:	6849      	ldr	r1, [r1, #4]
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	4607      	mov	r7, r0
 80068b2:	4691      	mov	r9, r2
 80068b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068b8:	f108 0601 	add.w	r6, r8, #1
 80068bc:	42b3      	cmp	r3, r6
 80068be:	db0b      	blt.n	80068d8 <__lshift+0x38>
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7ff fd93 	bl	80063ec <_Balloc>
 80068c6:	4605      	mov	r5, r0
 80068c8:	b948      	cbnz	r0, 80068de <__lshift+0x3e>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b28      	ldr	r3, [pc, #160]	; (8006970 <__lshift+0xd0>)
 80068ce:	4829      	ldr	r0, [pc, #164]	; (8006974 <__lshift+0xd4>)
 80068d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068d4:	f001 fcf0 	bl	80082b8 <__assert_func>
 80068d8:	3101      	adds	r1, #1
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	e7ee      	b.n	80068bc <__lshift+0x1c>
 80068de:	2300      	movs	r3, #0
 80068e0:	f100 0114 	add.w	r1, r0, #20
 80068e4:	f100 0210 	add.w	r2, r0, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	4553      	cmp	r3, sl
 80068ec:	db33      	blt.n	8006956 <__lshift+0xb6>
 80068ee:	6920      	ldr	r0, [r4, #16]
 80068f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068f4:	f104 0314 	add.w	r3, r4, #20
 80068f8:	f019 091f 	ands.w	r9, r9, #31
 80068fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006904:	d02b      	beq.n	800695e <__lshift+0xbe>
 8006906:	f1c9 0e20 	rsb	lr, r9, #32
 800690a:	468a      	mov	sl, r1
 800690c:	2200      	movs	r2, #0
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	fa00 f009 	lsl.w	r0, r0, r9
 8006914:	4310      	orrs	r0, r2
 8006916:	f84a 0b04 	str.w	r0, [sl], #4
 800691a:	f853 2b04 	ldr.w	r2, [r3], #4
 800691e:	459c      	cmp	ip, r3
 8006920:	fa22 f20e 	lsr.w	r2, r2, lr
 8006924:	d8f3      	bhi.n	800690e <__lshift+0x6e>
 8006926:	ebac 0304 	sub.w	r3, ip, r4
 800692a:	3b15      	subs	r3, #21
 800692c:	f023 0303 	bic.w	r3, r3, #3
 8006930:	3304      	adds	r3, #4
 8006932:	f104 0015 	add.w	r0, r4, #21
 8006936:	4584      	cmp	ip, r0
 8006938:	bf38      	it	cc
 800693a:	2304      	movcc	r3, #4
 800693c:	50ca      	str	r2, [r1, r3]
 800693e:	b10a      	cbz	r2, 8006944 <__lshift+0xa4>
 8006940:	f108 0602 	add.w	r6, r8, #2
 8006944:	3e01      	subs	r6, #1
 8006946:	4638      	mov	r0, r7
 8006948:	612e      	str	r6, [r5, #16]
 800694a:	4621      	mov	r1, r4
 800694c:	f7ff fd8e 	bl	800646c <_Bfree>
 8006950:	4628      	mov	r0, r5
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	f842 0f04 	str.w	r0, [r2, #4]!
 800695a:	3301      	adds	r3, #1
 800695c:	e7c5      	b.n	80068ea <__lshift+0x4a>
 800695e:	3904      	subs	r1, #4
 8006960:	f853 2b04 	ldr.w	r2, [r3], #4
 8006964:	f841 2f04 	str.w	r2, [r1, #4]!
 8006968:	459c      	cmp	ip, r3
 800696a:	d8f9      	bhi.n	8006960 <__lshift+0xc0>
 800696c:	e7ea      	b.n	8006944 <__lshift+0xa4>
 800696e:	bf00      	nop
 8006970:	08008c95 	.word	0x08008c95
 8006974:	08008ca6 	.word	0x08008ca6

08006978 <__mcmp>:
 8006978:	b530      	push	{r4, r5, lr}
 800697a:	6902      	ldr	r2, [r0, #16]
 800697c:	690c      	ldr	r4, [r1, #16]
 800697e:	1b12      	subs	r2, r2, r4
 8006980:	d10e      	bne.n	80069a0 <__mcmp+0x28>
 8006982:	f100 0314 	add.w	r3, r0, #20
 8006986:	3114      	adds	r1, #20
 8006988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800698c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006998:	42a5      	cmp	r5, r4
 800699a:	d003      	beq.n	80069a4 <__mcmp+0x2c>
 800699c:	d305      	bcc.n	80069aa <__mcmp+0x32>
 800699e:	2201      	movs	r2, #1
 80069a0:	4610      	mov	r0, r2
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	4283      	cmp	r3, r0
 80069a6:	d3f3      	bcc.n	8006990 <__mcmp+0x18>
 80069a8:	e7fa      	b.n	80069a0 <__mcmp+0x28>
 80069aa:	f04f 32ff 	mov.w	r2, #4294967295
 80069ae:	e7f7      	b.n	80069a0 <__mcmp+0x28>

080069b0 <__mdiff>:
 80069b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	460c      	mov	r4, r1
 80069b6:	4606      	mov	r6, r0
 80069b8:	4611      	mov	r1, r2
 80069ba:	4620      	mov	r0, r4
 80069bc:	4690      	mov	r8, r2
 80069be:	f7ff ffdb 	bl	8006978 <__mcmp>
 80069c2:	1e05      	subs	r5, r0, #0
 80069c4:	d110      	bne.n	80069e8 <__mdiff+0x38>
 80069c6:	4629      	mov	r1, r5
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fd0f 	bl	80063ec <_Balloc>
 80069ce:	b930      	cbnz	r0, 80069de <__mdiff+0x2e>
 80069d0:	4b3a      	ldr	r3, [pc, #232]	; (8006abc <__mdiff+0x10c>)
 80069d2:	4602      	mov	r2, r0
 80069d4:	f240 2137 	movw	r1, #567	; 0x237
 80069d8:	4839      	ldr	r0, [pc, #228]	; (8006ac0 <__mdiff+0x110>)
 80069da:	f001 fc6d 	bl	80082b8 <__assert_func>
 80069de:	2301      	movs	r3, #1
 80069e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	bfa4      	itt	ge
 80069ea:	4643      	movge	r3, r8
 80069ec:	46a0      	movge	r8, r4
 80069ee:	4630      	mov	r0, r6
 80069f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069f4:	bfa6      	itte	ge
 80069f6:	461c      	movge	r4, r3
 80069f8:	2500      	movge	r5, #0
 80069fa:	2501      	movlt	r5, #1
 80069fc:	f7ff fcf6 	bl	80063ec <_Balloc>
 8006a00:	b920      	cbnz	r0, 8006a0c <__mdiff+0x5c>
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <__mdiff+0x10c>)
 8006a04:	4602      	mov	r2, r0
 8006a06:	f240 2145 	movw	r1, #581	; 0x245
 8006a0a:	e7e5      	b.n	80069d8 <__mdiff+0x28>
 8006a0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a10:	6926      	ldr	r6, [r4, #16]
 8006a12:	60c5      	str	r5, [r0, #12]
 8006a14:	f104 0914 	add.w	r9, r4, #20
 8006a18:	f108 0514 	add.w	r5, r8, #20
 8006a1c:	f100 0e14 	add.w	lr, r0, #20
 8006a20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a28:	f108 0210 	add.w	r2, r8, #16
 8006a2c:	46f2      	mov	sl, lr
 8006a2e:	2100      	movs	r1, #0
 8006a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a38:	fa11 f88b 	uxtah	r8, r1, fp
 8006a3c:	b299      	uxth	r1, r3
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	eba8 0801 	sub.w	r8, r8, r1
 8006a44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a4c:	fa1f f888 	uxth.w	r8, r8
 8006a50:	1419      	asrs	r1, r3, #16
 8006a52:	454e      	cmp	r6, r9
 8006a54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a58:	f84a 3b04 	str.w	r3, [sl], #4
 8006a5c:	d8e8      	bhi.n	8006a30 <__mdiff+0x80>
 8006a5e:	1b33      	subs	r3, r6, r4
 8006a60:	3b15      	subs	r3, #21
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	3304      	adds	r3, #4
 8006a68:	3415      	adds	r4, #21
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	bf38      	it	cc
 8006a6e:	2304      	movcc	r3, #4
 8006a70:	441d      	add	r5, r3
 8006a72:	4473      	add	r3, lr
 8006a74:	469e      	mov	lr, r3
 8006a76:	462e      	mov	r6, r5
 8006a78:	4566      	cmp	r6, ip
 8006a7a:	d30e      	bcc.n	8006a9a <__mdiff+0xea>
 8006a7c:	f10c 0203 	add.w	r2, ip, #3
 8006a80:	1b52      	subs	r2, r2, r5
 8006a82:	f022 0203 	bic.w	r2, r2, #3
 8006a86:	3d03      	subs	r5, #3
 8006a88:	45ac      	cmp	ip, r5
 8006a8a:	bf38      	it	cc
 8006a8c:	2200      	movcc	r2, #0
 8006a8e:	4413      	add	r3, r2
 8006a90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a94:	b17a      	cbz	r2, 8006ab6 <__mdiff+0x106>
 8006a96:	6107      	str	r7, [r0, #16]
 8006a98:	e7a4      	b.n	80069e4 <__mdiff+0x34>
 8006a9a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a9e:	fa11 f288 	uxtah	r2, r1, r8
 8006aa2:	1414      	asrs	r4, r2, #16
 8006aa4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006aa8:	b292      	uxth	r2, r2
 8006aaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006aae:	f84e 2b04 	str.w	r2, [lr], #4
 8006ab2:	1421      	asrs	r1, r4, #16
 8006ab4:	e7e0      	b.n	8006a78 <__mdiff+0xc8>
 8006ab6:	3f01      	subs	r7, #1
 8006ab8:	e7ea      	b.n	8006a90 <__mdiff+0xe0>
 8006aba:	bf00      	nop
 8006abc:	08008c95 	.word	0x08008c95
 8006ac0:	08008ca6 	.word	0x08008ca6

08006ac4 <__ulp>:
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	ed8d 0b00 	vstr	d0, [sp]
 8006aca:	9a01      	ldr	r2, [sp, #4]
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <__ulp+0x48>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dc08      	bgt.n	8006aea <__ulp+0x26>
 8006ad8:	425b      	negs	r3, r3
 8006ada:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ade:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ae2:	da04      	bge.n	8006aee <__ulp+0x2a>
 8006ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ae8:	4113      	asrs	r3, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	e008      	b.n	8006b00 <__ulp+0x3c>
 8006aee:	f1a2 0314 	sub.w	r3, r2, #20
 8006af2:	2b1e      	cmp	r3, #30
 8006af4:	bfda      	itte	le
 8006af6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006afa:	40da      	lsrle	r2, r3
 8006afc:	2201      	movgt	r2, #1
 8006afe:	2300      	movs	r3, #0
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	ec41 0b10 	vmov	d0, r0, r1
 8006b08:	b002      	add	sp, #8
 8006b0a:	4770      	bx	lr
 8006b0c:	7ff00000 	.word	0x7ff00000

08006b10 <__b2d>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	6906      	ldr	r6, [r0, #16]
 8006b16:	f100 0814 	add.w	r8, r0, #20
 8006b1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006b1e:	1f37      	subs	r7, r6, #4
 8006b20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7ff fd53 	bl	80065d0 <__hi0bits>
 8006b2a:	f1c0 0320 	rsb	r3, r0, #32
 8006b2e:	280a      	cmp	r0, #10
 8006b30:	600b      	str	r3, [r1, #0]
 8006b32:	491b      	ldr	r1, [pc, #108]	; (8006ba0 <__b2d+0x90>)
 8006b34:	dc15      	bgt.n	8006b62 <__b2d+0x52>
 8006b36:	f1c0 0c0b 	rsb	ip, r0, #11
 8006b3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8006b3e:	45b8      	cmp	r8, r7
 8006b40:	ea43 0501 	orr.w	r5, r3, r1
 8006b44:	bf34      	ite	cc
 8006b46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b4a:	2300      	movcs	r3, #0
 8006b4c:	3015      	adds	r0, #21
 8006b4e:	fa02 f000 	lsl.w	r0, r2, r0
 8006b52:	fa23 f30c 	lsr.w	r3, r3, ip
 8006b56:	4303      	orrs	r3, r0
 8006b58:	461c      	mov	r4, r3
 8006b5a:	ec45 4b10 	vmov	d0, r4, r5
 8006b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b62:	45b8      	cmp	r8, r7
 8006b64:	bf3a      	itte	cc
 8006b66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8006b6e:	2300      	movcs	r3, #0
 8006b70:	380b      	subs	r0, #11
 8006b72:	d012      	beq.n	8006b9a <__b2d+0x8a>
 8006b74:	f1c0 0120 	rsb	r1, r0, #32
 8006b78:	fa23 f401 	lsr.w	r4, r3, r1
 8006b7c:	4082      	lsls	r2, r0
 8006b7e:	4322      	orrs	r2, r4
 8006b80:	4547      	cmp	r7, r8
 8006b82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006b86:	bf8c      	ite	hi
 8006b88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006b8c:	2200      	movls	r2, #0
 8006b8e:	4083      	lsls	r3, r0
 8006b90:	40ca      	lsrs	r2, r1
 8006b92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b96:	4313      	orrs	r3, r2
 8006b98:	e7de      	b.n	8006b58 <__b2d+0x48>
 8006b9a:	ea42 0501 	orr.w	r5, r2, r1
 8006b9e:	e7db      	b.n	8006b58 <__b2d+0x48>
 8006ba0:	3ff00000 	.word	0x3ff00000

08006ba4 <__d2b>:
 8006ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	460f      	mov	r7, r1
 8006baa:	2101      	movs	r1, #1
 8006bac:	ec59 8b10 	vmov	r8, r9, d0
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	f7ff fc1b 	bl	80063ec <_Balloc>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	b930      	cbnz	r0, 8006bc8 <__d2b+0x24>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <__d2b+0xac>)
 8006bbe:	4825      	ldr	r0, [pc, #148]	; (8006c54 <__d2b+0xb0>)
 8006bc0:	f240 310f 	movw	r1, #783	; 0x30f
 8006bc4:	f001 fb78 	bl	80082b8 <__assert_func>
 8006bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bd0:	bb2d      	cbnz	r5, 8006c1e <__d2b+0x7a>
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	f1b8 0300 	subs.w	r3, r8, #0
 8006bd8:	d026      	beq.n	8006c28 <__d2b+0x84>
 8006bda:	4668      	mov	r0, sp
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	f7ff fd17 	bl	8006610 <__lo0bits>
 8006be2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006be6:	b1e8      	cbz	r0, 8006c24 <__d2b+0x80>
 8006be8:	f1c0 0320 	rsb	r3, r0, #32
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	40c2      	lsrs	r2, r0
 8006bf4:	6163      	str	r3, [r4, #20]
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	61a3      	str	r3, [r4, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bf14      	ite	ne
 8006c00:	2202      	movne	r2, #2
 8006c02:	2201      	moveq	r2, #1
 8006c04:	6122      	str	r2, [r4, #16]
 8006c06:	b1bd      	cbz	r5, 8006c38 <__d2b+0x94>
 8006c08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c0c:	4405      	add	r5, r0
 8006c0e:	603d      	str	r5, [r7, #0]
 8006c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	4620      	mov	r0, r4
 8006c18:	b003      	add	sp, #12
 8006c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c22:	e7d6      	b.n	8006bd2 <__d2b+0x2e>
 8006c24:	6161      	str	r1, [r4, #20]
 8006c26:	e7e7      	b.n	8006bf8 <__d2b+0x54>
 8006c28:	a801      	add	r0, sp, #4
 8006c2a:	f7ff fcf1 	bl	8006610 <__lo0bits>
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	6163      	str	r3, [r4, #20]
 8006c32:	3020      	adds	r0, #32
 8006c34:	2201      	movs	r2, #1
 8006c36:	e7e5      	b.n	8006c04 <__d2b+0x60>
 8006c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c40:	6038      	str	r0, [r7, #0]
 8006c42:	6918      	ldr	r0, [r3, #16]
 8006c44:	f7ff fcc4 	bl	80065d0 <__hi0bits>
 8006c48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c4c:	e7e2      	b.n	8006c14 <__d2b+0x70>
 8006c4e:	bf00      	nop
 8006c50:	08008c95 	.word	0x08008c95
 8006c54:	08008ca6 	.word	0x08008ca6

08006c58 <__ratio>:
 8006c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	4688      	mov	r8, r1
 8006c5e:	4669      	mov	r1, sp
 8006c60:	4681      	mov	r9, r0
 8006c62:	f7ff ff55 	bl	8006b10 <__b2d>
 8006c66:	a901      	add	r1, sp, #4
 8006c68:	4640      	mov	r0, r8
 8006c6a:	ec55 4b10 	vmov	r4, r5, d0
 8006c6e:	f7ff ff4f 	bl	8006b10 <__b2d>
 8006c72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006c7a:	eba3 0c02 	sub.w	ip, r3, r2
 8006c7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006c88:	ec51 0b10 	vmov	r0, r1, d0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bfd6      	itet	le
 8006c90:	460a      	movle	r2, r1
 8006c92:	462a      	movgt	r2, r5
 8006c94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c98:	468b      	mov	fp, r1
 8006c9a:	462f      	mov	r7, r5
 8006c9c:	bfd4      	ite	le
 8006c9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006ca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	ee10 2a10 	vmov	r2, s0
 8006cac:	465b      	mov	r3, fp
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fdd4 	bl	800085c <__aeabi_ddiv>
 8006cb4:	ec41 0b10 	vmov	d0, r0, r1
 8006cb8:	b003      	add	sp, #12
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cbe <__copybits>:
 8006cbe:	3901      	subs	r1, #1
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	1149      	asrs	r1, r1, #5
 8006cc4:	6914      	ldr	r4, [r2, #16]
 8006cc6:	3101      	adds	r1, #1
 8006cc8:	f102 0314 	add.w	r3, r2, #20
 8006ccc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006cd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cd4:	1f05      	subs	r5, r0, #4
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	d30c      	bcc.n	8006cf4 <__copybits+0x36>
 8006cda:	1aa3      	subs	r3, r4, r2
 8006cdc:	3b11      	subs	r3, #17
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	3211      	adds	r2, #17
 8006ce4:	42a2      	cmp	r2, r4
 8006ce6:	bf88      	it	hi
 8006ce8:	2300      	movhi	r3, #0
 8006cea:	4418      	add	r0, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	4288      	cmp	r0, r1
 8006cf0:	d305      	bcc.n	8006cfe <__copybits+0x40>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006cf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8006cfc:	e7eb      	b.n	8006cd6 <__copybits+0x18>
 8006cfe:	f840 3b04 	str.w	r3, [r0], #4
 8006d02:	e7f4      	b.n	8006cee <__copybits+0x30>

08006d04 <__any_on>:
 8006d04:	f100 0214 	add.w	r2, r0, #20
 8006d08:	6900      	ldr	r0, [r0, #16]
 8006d0a:	114b      	asrs	r3, r1, #5
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	db11      	blt.n	8006d36 <__any_on+0x32>
 8006d12:	dd0a      	ble.n	8006d2a <__any_on+0x26>
 8006d14:	f011 011f 	ands.w	r1, r1, #31
 8006d18:	d007      	beq.n	8006d2a <__any_on+0x26>
 8006d1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d1e:	fa24 f001 	lsr.w	r0, r4, r1
 8006d22:	fa00 f101 	lsl.w	r1, r0, r1
 8006d26:	428c      	cmp	r4, r1
 8006d28:	d10b      	bne.n	8006d42 <__any_on+0x3e>
 8006d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d803      	bhi.n	8006d3a <__any_on+0x36>
 8006d32:	2000      	movs	r0, #0
 8006d34:	bd10      	pop	{r4, pc}
 8006d36:	4603      	mov	r3, r0
 8006d38:	e7f7      	b.n	8006d2a <__any_on+0x26>
 8006d3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	d0f5      	beq.n	8006d2e <__any_on+0x2a>
 8006d42:	2001      	movs	r0, #1
 8006d44:	e7f6      	b.n	8006d34 <__any_on+0x30>

08006d46 <sulp>:
 8006d46:	b570      	push	{r4, r5, r6, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	ec45 4b10 	vmov	d0, r4, r5
 8006d50:	4616      	mov	r6, r2
 8006d52:	f7ff feb7 	bl	8006ac4 <__ulp>
 8006d56:	ec51 0b10 	vmov	r0, r1, d0
 8006d5a:	b17e      	cbz	r6, 8006d7c <sulp+0x36>
 8006d5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd09      	ble.n	8006d7c <sulp+0x36>
 8006d68:	051b      	lsls	r3, r3, #20
 8006d6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d6e:	2400      	movs	r4, #0
 8006d70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d74:	4622      	mov	r2, r4
 8006d76:	462b      	mov	r3, r5
 8006d78:	f7f9 fc46 	bl	8000608 <__aeabi_dmul>
 8006d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d80 <_strtod_l>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	ed2d 8b02 	vpush	{d8}
 8006d88:	b09b      	sub	sp, #108	; 0x6c
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	9216      	str	r2, [sp, #88]	; 0x58
 8006d92:	460d      	mov	r5, r1
 8006d94:	f04f 0800 	mov.w	r8, #0
 8006d98:	f04f 0900 	mov.w	r9, #0
 8006d9c:	460a      	mov	r2, r1
 8006d9e:	9215      	str	r2, [sp, #84]	; 0x54
 8006da0:	7811      	ldrb	r1, [r2, #0]
 8006da2:	292b      	cmp	r1, #43	; 0x2b
 8006da4:	d04c      	beq.n	8006e40 <_strtod_l+0xc0>
 8006da6:	d83a      	bhi.n	8006e1e <_strtod_l+0x9e>
 8006da8:	290d      	cmp	r1, #13
 8006daa:	d834      	bhi.n	8006e16 <_strtod_l+0x96>
 8006dac:	2908      	cmp	r1, #8
 8006dae:	d834      	bhi.n	8006e1a <_strtod_l+0x9a>
 8006db0:	2900      	cmp	r1, #0
 8006db2:	d03d      	beq.n	8006e30 <_strtod_l+0xb0>
 8006db4:	2200      	movs	r2, #0
 8006db6:	920a      	str	r2, [sp, #40]	; 0x28
 8006db8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006dba:	7832      	ldrb	r2, [r6, #0]
 8006dbc:	2a30      	cmp	r2, #48	; 0x30
 8006dbe:	f040 80b4 	bne.w	8006f2a <_strtod_l+0x1aa>
 8006dc2:	7872      	ldrb	r2, [r6, #1]
 8006dc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006dc8:	2a58      	cmp	r2, #88	; 0x58
 8006dca:	d170      	bne.n	8006eae <_strtod_l+0x12e>
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	ab16      	add	r3, sp, #88	; 0x58
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4a8e      	ldr	r2, [pc, #568]	; (8007010 <_strtod_l+0x290>)
 8006dd8:	ab17      	add	r3, sp, #92	; 0x5c
 8006dda:	a915      	add	r1, sp, #84	; 0x54
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f001 fb07 	bl	80083f0 <__gethex>
 8006de2:	f010 070f 	ands.w	r7, r0, #15
 8006de6:	4605      	mov	r5, r0
 8006de8:	d005      	beq.n	8006df6 <_strtod_l+0x76>
 8006dea:	2f06      	cmp	r7, #6
 8006dec:	d12a      	bne.n	8006e44 <_strtod_l+0xc4>
 8006dee:	3601      	adds	r6, #1
 8006df0:	2300      	movs	r3, #0
 8006df2:	9615      	str	r6, [sp, #84]	; 0x54
 8006df4:	930a      	str	r3, [sp, #40]	; 0x28
 8006df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 857f 	bne.w	80078fc <_strtod_l+0xb7c>
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	b1db      	cbz	r3, 8006e3a <_strtod_l+0xba>
 8006e02:	4642      	mov	r2, r8
 8006e04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e08:	ec43 2b10 	vmov	d0, r2, r3
 8006e0c:	b01b      	add	sp, #108	; 0x6c
 8006e0e:	ecbd 8b02 	vpop	{d8}
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	2920      	cmp	r1, #32
 8006e18:	d1cc      	bne.n	8006db4 <_strtod_l+0x34>
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	e7bf      	b.n	8006d9e <_strtod_l+0x1e>
 8006e1e:	292d      	cmp	r1, #45	; 0x2d
 8006e20:	d1c8      	bne.n	8006db4 <_strtod_l+0x34>
 8006e22:	2101      	movs	r1, #1
 8006e24:	910a      	str	r1, [sp, #40]	; 0x28
 8006e26:	1c51      	adds	r1, r2, #1
 8006e28:	9115      	str	r1, [sp, #84]	; 0x54
 8006e2a:	7852      	ldrb	r2, [r2, #1]
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	d1c3      	bne.n	8006db8 <_strtod_l+0x38>
 8006e30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e32:	9515      	str	r5, [sp, #84]	; 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 855f 	bne.w	80078f8 <_strtod_l+0xb78>
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	e7e3      	b.n	8006e08 <_strtod_l+0x88>
 8006e40:	2100      	movs	r1, #0
 8006e42:	e7ef      	b.n	8006e24 <_strtod_l+0xa4>
 8006e44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e46:	b13a      	cbz	r2, 8006e58 <_strtod_l+0xd8>
 8006e48:	2135      	movs	r1, #53	; 0x35
 8006e4a:	a818      	add	r0, sp, #96	; 0x60
 8006e4c:	f7ff ff37 	bl	8006cbe <__copybits>
 8006e50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7ff fb0a 	bl	800646c <_Bfree>
 8006e58:	3f01      	subs	r7, #1
 8006e5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e5c:	2f04      	cmp	r7, #4
 8006e5e:	d806      	bhi.n	8006e6e <_strtod_l+0xee>
 8006e60:	e8df f007 	tbb	[pc, r7]
 8006e64:	201d0314 	.word	0x201d0314
 8006e68:	14          	.byte	0x14
 8006e69:	00          	.byte	0x00
 8006e6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006e6e:	05e9      	lsls	r1, r5, #23
 8006e70:	bf48      	it	mi
 8006e72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e7a:	0d1b      	lsrs	r3, r3, #20
 8006e7c:	051b      	lsls	r3, r3, #20
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1b9      	bne.n	8006df6 <_strtod_l+0x76>
 8006e82:	f7fe fb05 	bl	8005490 <__errno>
 8006e86:	2322      	movs	r3, #34	; 0x22
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	e7b4      	b.n	8006df6 <_strtod_l+0x76>
 8006e8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006e90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e9c:	e7e7      	b.n	8006e6e <_strtod_l+0xee>
 8006e9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007018 <_strtod_l+0x298>
 8006ea2:	e7e4      	b.n	8006e6e <_strtod_l+0xee>
 8006ea4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ea8:	f04f 38ff 	mov.w	r8, #4294967295
 8006eac:	e7df      	b.n	8006e6e <_strtod_l+0xee>
 8006eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	9215      	str	r2, [sp, #84]	; 0x54
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b30      	cmp	r3, #48	; 0x30
 8006eb8:	d0f9      	beq.n	8006eae <_strtod_l+0x12e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d09b      	beq.n	8006df6 <_strtod_l+0x76>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f04f 0a00 	mov.w	sl, #0
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006ece:	46d3      	mov	fp, sl
 8006ed0:	220a      	movs	r2, #10
 8006ed2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006ed4:	7806      	ldrb	r6, [r0, #0]
 8006ed6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006eda:	b2d9      	uxtb	r1, r3
 8006edc:	2909      	cmp	r1, #9
 8006ede:	d926      	bls.n	8006f2e <_strtod_l+0x1ae>
 8006ee0:	494c      	ldr	r1, [pc, #304]	; (8007014 <_strtod_l+0x294>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f001 f98c 	bl	8008200 <strncmp>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d030      	beq.n	8006f4e <_strtod_l+0x1ce>
 8006eec:	2000      	movs	r0, #0
 8006eee:	4632      	mov	r2, r6
 8006ef0:	9005      	str	r0, [sp, #20]
 8006ef2:	465e      	mov	r6, fp
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2a65      	cmp	r2, #101	; 0x65
 8006ef8:	d001      	beq.n	8006efe <_strtod_l+0x17e>
 8006efa:	2a45      	cmp	r2, #69	; 0x45
 8006efc:	d113      	bne.n	8006f26 <_strtod_l+0x1a6>
 8006efe:	b91e      	cbnz	r6, 8006f08 <_strtod_l+0x188>
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	4302      	orrs	r2, r0
 8006f04:	d094      	beq.n	8006e30 <_strtod_l+0xb0>
 8006f06:	2600      	movs	r6, #0
 8006f08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006f0a:	1c6a      	adds	r2, r5, #1
 8006f0c:	9215      	str	r2, [sp, #84]	; 0x54
 8006f0e:	786a      	ldrb	r2, [r5, #1]
 8006f10:	2a2b      	cmp	r2, #43	; 0x2b
 8006f12:	d074      	beq.n	8006ffe <_strtod_l+0x27e>
 8006f14:	2a2d      	cmp	r2, #45	; 0x2d
 8006f16:	d078      	beq.n	800700a <_strtod_l+0x28a>
 8006f18:	f04f 0c00 	mov.w	ip, #0
 8006f1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f20:	2909      	cmp	r1, #9
 8006f22:	d97f      	bls.n	8007024 <_strtod_l+0x2a4>
 8006f24:	9515      	str	r5, [sp, #84]	; 0x54
 8006f26:	2700      	movs	r7, #0
 8006f28:	e09e      	b.n	8007068 <_strtod_l+0x2e8>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e7c8      	b.n	8006ec0 <_strtod_l+0x140>
 8006f2e:	f1bb 0f08 	cmp.w	fp, #8
 8006f32:	bfd8      	it	le
 8006f34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006f36:	f100 0001 	add.w	r0, r0, #1
 8006f3a:	bfda      	itte	le
 8006f3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f40:	9309      	strle	r3, [sp, #36]	; 0x24
 8006f42:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006f46:	f10b 0b01 	add.w	fp, fp, #1
 8006f4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f4c:	e7c1      	b.n	8006ed2 <_strtod_l+0x152>
 8006f4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	9215      	str	r2, [sp, #84]	; 0x54
 8006f54:	785a      	ldrb	r2, [r3, #1]
 8006f56:	f1bb 0f00 	cmp.w	fp, #0
 8006f5a:	d037      	beq.n	8006fcc <_strtod_l+0x24c>
 8006f5c:	9005      	str	r0, [sp, #20]
 8006f5e:	465e      	mov	r6, fp
 8006f60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f64:	2b09      	cmp	r3, #9
 8006f66:	d912      	bls.n	8006f8e <_strtod_l+0x20e>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e7c4      	b.n	8006ef6 <_strtod_l+0x176>
 8006f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	9215      	str	r2, [sp, #84]	; 0x54
 8006f72:	785a      	ldrb	r2, [r3, #1]
 8006f74:	3001      	adds	r0, #1
 8006f76:	2a30      	cmp	r2, #48	; 0x30
 8006f78:	d0f8      	beq.n	8006f6c <_strtod_l+0x1ec>
 8006f7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	f200 84c1 	bhi.w	8007906 <_strtod_l+0xb86>
 8006f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f86:	9005      	str	r0, [sp, #20]
 8006f88:	2000      	movs	r0, #0
 8006f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	3a30      	subs	r2, #48	; 0x30
 8006f90:	f100 0301 	add.w	r3, r0, #1
 8006f94:	d014      	beq.n	8006fc0 <_strtod_l+0x240>
 8006f96:	9905      	ldr	r1, [sp, #20]
 8006f98:	4419      	add	r1, r3
 8006f9a:	9105      	str	r1, [sp, #20]
 8006f9c:	4633      	mov	r3, r6
 8006f9e:	eb00 0c06 	add.w	ip, r0, r6
 8006fa2:	210a      	movs	r1, #10
 8006fa4:	4563      	cmp	r3, ip
 8006fa6:	d113      	bne.n	8006fd0 <_strtod_l+0x250>
 8006fa8:	1833      	adds	r3, r6, r0
 8006faa:	2b08      	cmp	r3, #8
 8006fac:	f106 0601 	add.w	r6, r6, #1
 8006fb0:	4406      	add	r6, r0
 8006fb2:	dc1a      	bgt.n	8006fea <_strtod_l+0x26a>
 8006fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	fb03 2301 	mla	r3, r3, r1, r2
 8006fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fc2:	1c51      	adds	r1, r2, #1
 8006fc4:	9115      	str	r1, [sp, #84]	; 0x54
 8006fc6:	7852      	ldrb	r2, [r2, #1]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	e7c9      	b.n	8006f60 <_strtod_l+0x1e0>
 8006fcc:	4658      	mov	r0, fp
 8006fce:	e7d2      	b.n	8006f76 <_strtod_l+0x1f6>
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	f103 0301 	add.w	r3, r3, #1
 8006fd6:	dc03      	bgt.n	8006fe0 <_strtod_l+0x260>
 8006fd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fda:	434f      	muls	r7, r1
 8006fdc:	9709      	str	r7, [sp, #36]	; 0x24
 8006fde:	e7e1      	b.n	8006fa4 <_strtod_l+0x224>
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	bfd8      	it	le
 8006fe4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006fe8:	e7dc      	b.n	8006fa4 <_strtod_l+0x224>
 8006fea:	2e10      	cmp	r6, #16
 8006fec:	bfdc      	itt	le
 8006fee:	230a      	movle	r3, #10
 8006ff0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006ff4:	e7e3      	b.n	8006fbe <_strtod_l+0x23e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9305      	str	r3, [sp, #20]
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e780      	b.n	8006f00 <_strtod_l+0x180>
 8006ffe:	f04f 0c00 	mov.w	ip, #0
 8007002:	1caa      	adds	r2, r5, #2
 8007004:	9215      	str	r2, [sp, #84]	; 0x54
 8007006:	78aa      	ldrb	r2, [r5, #2]
 8007008:	e788      	b.n	8006f1c <_strtod_l+0x19c>
 800700a:	f04f 0c01 	mov.w	ip, #1
 800700e:	e7f8      	b.n	8007002 <_strtod_l+0x282>
 8007010:	08008e00 	.word	0x08008e00
 8007014:	08008dfc 	.word	0x08008dfc
 8007018:	7ff00000 	.word	0x7ff00000
 800701c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800701e:	1c51      	adds	r1, r2, #1
 8007020:	9115      	str	r1, [sp, #84]	; 0x54
 8007022:	7852      	ldrb	r2, [r2, #1]
 8007024:	2a30      	cmp	r2, #48	; 0x30
 8007026:	d0f9      	beq.n	800701c <_strtod_l+0x29c>
 8007028:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800702c:	2908      	cmp	r1, #8
 800702e:	f63f af7a 	bhi.w	8006f26 <_strtod_l+0x1a6>
 8007032:	3a30      	subs	r2, #48	; 0x30
 8007034:	9208      	str	r2, [sp, #32]
 8007036:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007038:	920c      	str	r2, [sp, #48]	; 0x30
 800703a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800703c:	1c57      	adds	r7, r2, #1
 800703e:	9715      	str	r7, [sp, #84]	; 0x54
 8007040:	7852      	ldrb	r2, [r2, #1]
 8007042:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007046:	f1be 0f09 	cmp.w	lr, #9
 800704a:	d938      	bls.n	80070be <_strtod_l+0x33e>
 800704c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800704e:	1a7f      	subs	r7, r7, r1
 8007050:	2f08      	cmp	r7, #8
 8007052:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007056:	dc03      	bgt.n	8007060 <_strtod_l+0x2e0>
 8007058:	9908      	ldr	r1, [sp, #32]
 800705a:	428f      	cmp	r7, r1
 800705c:	bfa8      	it	ge
 800705e:	460f      	movge	r7, r1
 8007060:	f1bc 0f00 	cmp.w	ip, #0
 8007064:	d000      	beq.n	8007068 <_strtod_l+0x2e8>
 8007066:	427f      	negs	r7, r7
 8007068:	2e00      	cmp	r6, #0
 800706a:	d14f      	bne.n	800710c <_strtod_l+0x38c>
 800706c:	9904      	ldr	r1, [sp, #16]
 800706e:	4301      	orrs	r1, r0
 8007070:	f47f aec1 	bne.w	8006df6 <_strtod_l+0x76>
 8007074:	2b00      	cmp	r3, #0
 8007076:	f47f aedb 	bne.w	8006e30 <_strtod_l+0xb0>
 800707a:	2a69      	cmp	r2, #105	; 0x69
 800707c:	d029      	beq.n	80070d2 <_strtod_l+0x352>
 800707e:	dc26      	bgt.n	80070ce <_strtod_l+0x34e>
 8007080:	2a49      	cmp	r2, #73	; 0x49
 8007082:	d026      	beq.n	80070d2 <_strtod_l+0x352>
 8007084:	2a4e      	cmp	r2, #78	; 0x4e
 8007086:	f47f aed3 	bne.w	8006e30 <_strtod_l+0xb0>
 800708a:	499b      	ldr	r1, [pc, #620]	; (80072f8 <_strtod_l+0x578>)
 800708c:	a815      	add	r0, sp, #84	; 0x54
 800708e:	f001 fbef 	bl	8008870 <__match>
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f aecc 	beq.w	8006e30 <_strtod_l+0xb0>
 8007098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b28      	cmp	r3, #40	; 0x28
 800709e:	d12f      	bne.n	8007100 <_strtod_l+0x380>
 80070a0:	4996      	ldr	r1, [pc, #600]	; (80072fc <_strtod_l+0x57c>)
 80070a2:	aa18      	add	r2, sp, #96	; 0x60
 80070a4:	a815      	add	r0, sp, #84	; 0x54
 80070a6:	f001 fbf7 	bl	8008898 <__hexnan>
 80070aa:	2805      	cmp	r0, #5
 80070ac:	d128      	bne.n	8007100 <_strtod_l+0x380>
 80070ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070bc:	e69b      	b.n	8006df6 <_strtod_l+0x76>
 80070be:	9f08      	ldr	r7, [sp, #32]
 80070c0:	210a      	movs	r1, #10
 80070c2:	fb01 2107 	mla	r1, r1, r7, r2
 80070c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80070ca:	9208      	str	r2, [sp, #32]
 80070cc:	e7b5      	b.n	800703a <_strtod_l+0x2ba>
 80070ce:	2a6e      	cmp	r2, #110	; 0x6e
 80070d0:	e7d9      	b.n	8007086 <_strtod_l+0x306>
 80070d2:	498b      	ldr	r1, [pc, #556]	; (8007300 <_strtod_l+0x580>)
 80070d4:	a815      	add	r0, sp, #84	; 0x54
 80070d6:	f001 fbcb 	bl	8008870 <__match>
 80070da:	2800      	cmp	r0, #0
 80070dc:	f43f aea8 	beq.w	8006e30 <_strtod_l+0xb0>
 80070e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070e2:	4988      	ldr	r1, [pc, #544]	; (8007304 <_strtod_l+0x584>)
 80070e4:	3b01      	subs	r3, #1
 80070e6:	a815      	add	r0, sp, #84	; 0x54
 80070e8:	9315      	str	r3, [sp, #84]	; 0x54
 80070ea:	f001 fbc1 	bl	8008870 <__match>
 80070ee:	b910      	cbnz	r0, 80070f6 <_strtod_l+0x376>
 80070f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070f2:	3301      	adds	r3, #1
 80070f4:	9315      	str	r3, [sp, #84]	; 0x54
 80070f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007314 <_strtod_l+0x594>
 80070fa:	f04f 0800 	mov.w	r8, #0
 80070fe:	e67a      	b.n	8006df6 <_strtod_l+0x76>
 8007100:	4881      	ldr	r0, [pc, #516]	; (8007308 <_strtod_l+0x588>)
 8007102:	f001 f8d1 	bl	80082a8 <nan>
 8007106:	ec59 8b10 	vmov	r8, r9, d0
 800710a:	e674      	b.n	8006df6 <_strtod_l+0x76>
 800710c:	9b05      	ldr	r3, [sp, #20]
 800710e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007110:	1afb      	subs	r3, r7, r3
 8007112:	f1bb 0f00 	cmp.w	fp, #0
 8007116:	bf08      	it	eq
 8007118:	46b3      	moveq	fp, r6
 800711a:	2e10      	cmp	r6, #16
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	4635      	mov	r5, r6
 8007120:	bfa8      	it	ge
 8007122:	2510      	movge	r5, #16
 8007124:	f7f9 f9f6 	bl	8000514 <__aeabi_ui2d>
 8007128:	2e09      	cmp	r6, #9
 800712a:	4680      	mov	r8, r0
 800712c:	4689      	mov	r9, r1
 800712e:	dd13      	ble.n	8007158 <_strtod_l+0x3d8>
 8007130:	4b76      	ldr	r3, [pc, #472]	; (800730c <_strtod_l+0x58c>)
 8007132:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007136:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800713a:	f7f9 fa65 	bl	8000608 <__aeabi_dmul>
 800713e:	4680      	mov	r8, r0
 8007140:	4650      	mov	r0, sl
 8007142:	4689      	mov	r9, r1
 8007144:	f7f9 f9e6 	bl	8000514 <__aeabi_ui2d>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 f8a4 	bl	800029c <__adddf3>
 8007154:	4680      	mov	r8, r0
 8007156:	4689      	mov	r9, r1
 8007158:	2e0f      	cmp	r6, #15
 800715a:	dc38      	bgt.n	80071ce <_strtod_l+0x44e>
 800715c:	9b08      	ldr	r3, [sp, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f43f ae49 	beq.w	8006df6 <_strtod_l+0x76>
 8007164:	dd24      	ble.n	80071b0 <_strtod_l+0x430>
 8007166:	2b16      	cmp	r3, #22
 8007168:	dc0b      	bgt.n	8007182 <_strtod_l+0x402>
 800716a:	4968      	ldr	r1, [pc, #416]	; (800730c <_strtod_l+0x58c>)
 800716c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	f7f9 fa46 	bl	8000608 <__aeabi_dmul>
 800717c:	4680      	mov	r8, r0
 800717e:	4689      	mov	r9, r1
 8007180:	e639      	b.n	8006df6 <_strtod_l+0x76>
 8007182:	9a08      	ldr	r2, [sp, #32]
 8007184:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007188:	4293      	cmp	r3, r2
 800718a:	db20      	blt.n	80071ce <_strtod_l+0x44e>
 800718c:	4c5f      	ldr	r4, [pc, #380]	; (800730c <_strtod_l+0x58c>)
 800718e:	f1c6 060f 	rsb	r6, r6, #15
 8007192:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719e:	f7f9 fa33 	bl	8000608 <__aeabi_dmul>
 80071a2:	9b08      	ldr	r3, [sp, #32]
 80071a4:	1b9e      	subs	r6, r3, r6
 80071a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80071aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071ae:	e7e3      	b.n	8007178 <_strtod_l+0x3f8>
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	3316      	adds	r3, #22
 80071b4:	db0b      	blt.n	80071ce <_strtod_l+0x44e>
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	1bdf      	subs	r7, r3, r7
 80071ba:	4b54      	ldr	r3, [pc, #336]	; (800730c <_strtod_l+0x58c>)
 80071bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c4:	4640      	mov	r0, r8
 80071c6:	4649      	mov	r1, r9
 80071c8:	f7f9 fb48 	bl	800085c <__aeabi_ddiv>
 80071cc:	e7d6      	b.n	800717c <_strtod_l+0x3fc>
 80071ce:	9b08      	ldr	r3, [sp, #32]
 80071d0:	1b75      	subs	r5, r6, r5
 80071d2:	441d      	add	r5, r3
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	dd70      	ble.n	80072ba <_strtod_l+0x53a>
 80071d8:	f015 030f 	ands.w	r3, r5, #15
 80071dc:	d00a      	beq.n	80071f4 <_strtod_l+0x474>
 80071de:	494b      	ldr	r1, [pc, #300]	; (800730c <_strtod_l+0x58c>)
 80071e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ec:	f7f9 fa0c 	bl	8000608 <__aeabi_dmul>
 80071f0:	4680      	mov	r8, r0
 80071f2:	4689      	mov	r9, r1
 80071f4:	f035 050f 	bics.w	r5, r5, #15
 80071f8:	d04d      	beq.n	8007296 <_strtod_l+0x516>
 80071fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80071fe:	dd22      	ble.n	8007246 <_strtod_l+0x4c6>
 8007200:	2500      	movs	r5, #0
 8007202:	46ab      	mov	fp, r5
 8007204:	9509      	str	r5, [sp, #36]	; 0x24
 8007206:	9505      	str	r5, [sp, #20]
 8007208:	2322      	movs	r3, #34	; 0x22
 800720a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007314 <_strtod_l+0x594>
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	f04f 0800 	mov.w	r8, #0
 8007214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	f43f aded 	beq.w	8006df6 <_strtod_l+0x76>
 800721c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800721e:	4620      	mov	r0, r4
 8007220:	f7ff f924 	bl	800646c <_Bfree>
 8007224:	9905      	ldr	r1, [sp, #20]
 8007226:	4620      	mov	r0, r4
 8007228:	f7ff f920 	bl	800646c <_Bfree>
 800722c:	4659      	mov	r1, fp
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff f91c 	bl	800646c <_Bfree>
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff f918 	bl	800646c <_Bfree>
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
 8007240:	f7ff f914 	bl	800646c <_Bfree>
 8007244:	e5d7      	b.n	8006df6 <_strtod_l+0x76>
 8007246:	4b32      	ldr	r3, [pc, #200]	; (8007310 <_strtod_l+0x590>)
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	2300      	movs	r3, #0
 800724c:	112d      	asrs	r5, r5, #4
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	469a      	mov	sl, r3
 8007254:	2d01      	cmp	r5, #1
 8007256:	dc21      	bgt.n	800729c <_strtod_l+0x51c>
 8007258:	b10b      	cbz	r3, 800725e <_strtod_l+0x4de>
 800725a:	4680      	mov	r8, r0
 800725c:	4689      	mov	r9, r1
 800725e:	492c      	ldr	r1, [pc, #176]	; (8007310 <_strtod_l+0x590>)
 8007260:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007264:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007270:	f7f9 f9ca 	bl	8000608 <__aeabi_dmul>
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <_strtod_l+0x594>)
 8007276:	460a      	mov	r2, r1
 8007278:	400b      	ands	r3, r1
 800727a:	4927      	ldr	r1, [pc, #156]	; (8007318 <_strtod_l+0x598>)
 800727c:	428b      	cmp	r3, r1
 800727e:	4680      	mov	r8, r0
 8007280:	d8be      	bhi.n	8007200 <_strtod_l+0x480>
 8007282:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007286:	428b      	cmp	r3, r1
 8007288:	bf86      	itte	hi
 800728a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800731c <_strtod_l+0x59c>
 800728e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007292:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007296:	2300      	movs	r3, #0
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	e07b      	b.n	8007394 <_strtod_l+0x614>
 800729c:	07ea      	lsls	r2, r5, #31
 800729e:	d505      	bpl.n	80072ac <_strtod_l+0x52c>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f9 f9af 	bl	8000608 <__aeabi_dmul>
 80072aa:	2301      	movs	r3, #1
 80072ac:	9a04      	ldr	r2, [sp, #16]
 80072ae:	3208      	adds	r2, #8
 80072b0:	f10a 0a01 	add.w	sl, sl, #1
 80072b4:	106d      	asrs	r5, r5, #1
 80072b6:	9204      	str	r2, [sp, #16]
 80072b8:	e7cc      	b.n	8007254 <_strtod_l+0x4d4>
 80072ba:	d0ec      	beq.n	8007296 <_strtod_l+0x516>
 80072bc:	426d      	negs	r5, r5
 80072be:	f015 020f 	ands.w	r2, r5, #15
 80072c2:	d00a      	beq.n	80072da <_strtod_l+0x55a>
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <_strtod_l+0x58c>)
 80072c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f9 fac3 	bl	800085c <__aeabi_ddiv>
 80072d6:	4680      	mov	r8, r0
 80072d8:	4689      	mov	r9, r1
 80072da:	112d      	asrs	r5, r5, #4
 80072dc:	d0db      	beq.n	8007296 <_strtod_l+0x516>
 80072de:	2d1f      	cmp	r5, #31
 80072e0:	dd1e      	ble.n	8007320 <_strtod_l+0x5a0>
 80072e2:	2500      	movs	r5, #0
 80072e4:	46ab      	mov	fp, r5
 80072e6:	9509      	str	r5, [sp, #36]	; 0x24
 80072e8:	9505      	str	r5, [sp, #20]
 80072ea:	2322      	movs	r3, #34	; 0x22
 80072ec:	f04f 0800 	mov.w	r8, #0
 80072f0:	f04f 0900 	mov.w	r9, #0
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	e78d      	b.n	8007214 <_strtod_l+0x494>
 80072f8:	08008bed 	.word	0x08008bed
 80072fc:	08008e14 	.word	0x08008e14
 8007300:	08008be5 	.word	0x08008be5
 8007304:	08008c1c 	.word	0x08008c1c
 8007308:	08008fa5 	.word	0x08008fa5
 800730c:	08008d28 	.word	0x08008d28
 8007310:	08008d00 	.word	0x08008d00
 8007314:	7ff00000 	.word	0x7ff00000
 8007318:	7ca00000 	.word	0x7ca00000
 800731c:	7fefffff 	.word	0x7fefffff
 8007320:	f015 0310 	ands.w	r3, r5, #16
 8007324:	bf18      	it	ne
 8007326:	236a      	movne	r3, #106	; 0x6a
 8007328:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80076cc <_strtod_l+0x94c>
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	2300      	movs	r3, #0
 8007334:	07ea      	lsls	r2, r5, #31
 8007336:	d504      	bpl.n	8007342 <_strtod_l+0x5c2>
 8007338:	e9da 2300 	ldrd	r2, r3, [sl]
 800733c:	f7f9 f964 	bl	8000608 <__aeabi_dmul>
 8007340:	2301      	movs	r3, #1
 8007342:	106d      	asrs	r5, r5, #1
 8007344:	f10a 0a08 	add.w	sl, sl, #8
 8007348:	d1f4      	bne.n	8007334 <_strtod_l+0x5b4>
 800734a:	b10b      	cbz	r3, 8007350 <_strtod_l+0x5d0>
 800734c:	4680      	mov	r8, r0
 800734e:	4689      	mov	r9, r1
 8007350:	9b04      	ldr	r3, [sp, #16]
 8007352:	b1bb      	cbz	r3, 8007384 <_strtod_l+0x604>
 8007354:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007358:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800735c:	2b00      	cmp	r3, #0
 800735e:	4649      	mov	r1, r9
 8007360:	dd10      	ble.n	8007384 <_strtod_l+0x604>
 8007362:	2b1f      	cmp	r3, #31
 8007364:	f340 811e 	ble.w	80075a4 <_strtod_l+0x824>
 8007368:	2b34      	cmp	r3, #52	; 0x34
 800736a:	bfde      	ittt	le
 800736c:	f04f 33ff 	movle.w	r3, #4294967295
 8007370:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007374:	4093      	lslle	r3, r2
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	bfcc      	ite	gt
 800737c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007380:	ea03 0901 	andle.w	r9, r3, r1
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f9 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007390:	2800      	cmp	r0, #0
 8007392:	d1a6      	bne.n	80072e2 <_strtod_l+0x562>
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800739a:	4633      	mov	r3, r6
 800739c:	465a      	mov	r2, fp
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff f8cc 	bl	800653c <__s2b>
 80073a4:	9009      	str	r0, [sp, #36]	; 0x24
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f43f af2a 	beq.w	8007200 <_strtod_l+0x480>
 80073ac:	9a08      	ldr	r2, [sp, #32]
 80073ae:	9b05      	ldr	r3, [sp, #20]
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	eba3 0307 	sub.w	r3, r3, r7
 80073b6:	bfa8      	it	ge
 80073b8:	2300      	movge	r3, #0
 80073ba:	930c      	str	r3, [sp, #48]	; 0x30
 80073bc:	2500      	movs	r5, #0
 80073be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073c2:	9312      	str	r3, [sp, #72]	; 0x48
 80073c4:	46ab      	mov	fp, r5
 80073c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c8:	4620      	mov	r0, r4
 80073ca:	6859      	ldr	r1, [r3, #4]
 80073cc:	f7ff f80e 	bl	80063ec <_Balloc>
 80073d0:	9005      	str	r0, [sp, #20]
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f43f af18 	beq.w	8007208 <_strtod_l+0x488>
 80073d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	3202      	adds	r2, #2
 80073de:	f103 010c 	add.w	r1, r3, #12
 80073e2:	0092      	lsls	r2, r2, #2
 80073e4:	300c      	adds	r0, #12
 80073e6:	f000 ff4f 	bl	8008288 <memcpy>
 80073ea:	ec49 8b10 	vmov	d0, r8, r9
 80073ee:	aa18      	add	r2, sp, #96	; 0x60
 80073f0:	a917      	add	r1, sp, #92	; 0x5c
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7ff fbd6 	bl	8006ba4 <__d2b>
 80073f8:	ec49 8b18 	vmov	d8, r8, r9
 80073fc:	9016      	str	r0, [sp, #88]	; 0x58
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f af02 	beq.w	8007208 <_strtod_l+0x488>
 8007404:	2101      	movs	r1, #1
 8007406:	4620      	mov	r0, r4
 8007408:	f7ff f930 	bl	800666c <__i2b>
 800740c:	4683      	mov	fp, r0
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f aefa 	beq.w	8007208 <_strtod_l+0x488>
 8007414:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007416:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007418:	2e00      	cmp	r6, #0
 800741a:	bfab      	itete	ge
 800741c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800741e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007420:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007422:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007426:	bfac      	ite	ge
 8007428:	eb06 0a03 	addge.w	sl, r6, r3
 800742c:	1b9f      	sublt	r7, r3, r6
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	1af6      	subs	r6, r6, r3
 8007432:	4416      	add	r6, r2
 8007434:	4ba0      	ldr	r3, [pc, #640]	; (80076b8 <_strtod_l+0x938>)
 8007436:	3e01      	subs	r6, #1
 8007438:	429e      	cmp	r6, r3
 800743a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800743e:	f280 80c4 	bge.w	80075ca <_strtod_l+0x84a>
 8007442:	1b9b      	subs	r3, r3, r6
 8007444:	2b1f      	cmp	r3, #31
 8007446:	eba2 0203 	sub.w	r2, r2, r3
 800744a:	f04f 0101 	mov.w	r1, #1
 800744e:	f300 80b0 	bgt.w	80075b2 <_strtod_l+0x832>
 8007452:	fa01 f303 	lsl.w	r3, r1, r3
 8007456:	930e      	str	r3, [sp, #56]	; 0x38
 8007458:	2300      	movs	r3, #0
 800745a:	930d      	str	r3, [sp, #52]	; 0x34
 800745c:	eb0a 0602 	add.w	r6, sl, r2
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	45b2      	cmp	sl, r6
 8007464:	4417      	add	r7, r2
 8007466:	441f      	add	r7, r3
 8007468:	4653      	mov	r3, sl
 800746a:	bfa8      	it	ge
 800746c:	4633      	movge	r3, r6
 800746e:	42bb      	cmp	r3, r7
 8007470:	bfa8      	it	ge
 8007472:	463b      	movge	r3, r7
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfc2      	ittt	gt
 8007478:	1af6      	subgt	r6, r6, r3
 800747a:	1aff      	subgt	r7, r7, r3
 800747c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd17      	ble.n	80074b6 <_strtod_l+0x736>
 8007486:	4659      	mov	r1, fp
 8007488:	461a      	mov	r2, r3
 800748a:	4620      	mov	r0, r4
 800748c:	f7ff f9ae 	bl	80067ec <__pow5mult>
 8007490:	4683      	mov	fp, r0
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f aeb8 	beq.w	8007208 <_strtod_l+0x488>
 8007498:	4601      	mov	r1, r0
 800749a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800749c:	4620      	mov	r0, r4
 800749e:	f7ff f8fb 	bl	8006698 <__multiply>
 80074a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f aeaf 	beq.w	8007208 <_strtod_l+0x488>
 80074aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7fe ffdd 	bl	800646c <_Bfree>
 80074b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b4:	9316      	str	r3, [sp, #88]	; 0x58
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	f300 808c 	bgt.w	80075d4 <_strtod_l+0x854>
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd08      	ble.n	80074d4 <_strtod_l+0x754>
 80074c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074c4:	9905      	ldr	r1, [sp, #20]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7ff f990 	bl	80067ec <__pow5mult>
 80074cc:	9005      	str	r0, [sp, #20]
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f ae9a 	beq.w	8007208 <_strtod_l+0x488>
 80074d4:	2f00      	cmp	r7, #0
 80074d6:	dd08      	ble.n	80074ea <_strtod_l+0x76a>
 80074d8:	9905      	ldr	r1, [sp, #20]
 80074da:	463a      	mov	r2, r7
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff f9df 	bl	80068a0 <__lshift>
 80074e2:	9005      	str	r0, [sp, #20]
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f43f ae8f 	beq.w	8007208 <_strtod_l+0x488>
 80074ea:	f1ba 0f00 	cmp.w	sl, #0
 80074ee:	dd08      	ble.n	8007502 <_strtod_l+0x782>
 80074f0:	4659      	mov	r1, fp
 80074f2:	4652      	mov	r2, sl
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff f9d3 	bl	80068a0 <__lshift>
 80074fa:	4683      	mov	fp, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f ae83 	beq.w	8007208 <_strtod_l+0x488>
 8007502:	9a05      	ldr	r2, [sp, #20]
 8007504:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007506:	4620      	mov	r0, r4
 8007508:	f7ff fa52 	bl	80069b0 <__mdiff>
 800750c:	4605      	mov	r5, r0
 800750e:	2800      	cmp	r0, #0
 8007510:	f43f ae7a 	beq.w	8007208 <_strtod_l+0x488>
 8007514:	68c3      	ldr	r3, [r0, #12]
 8007516:	930b      	str	r3, [sp, #44]	; 0x2c
 8007518:	2300      	movs	r3, #0
 800751a:	60c3      	str	r3, [r0, #12]
 800751c:	4659      	mov	r1, fp
 800751e:	f7ff fa2b 	bl	8006978 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	da60      	bge.n	80075e8 <_strtod_l+0x868>
 8007526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007528:	ea53 0308 	orrs.w	r3, r3, r8
 800752c:	f040 8084 	bne.w	8007638 <_strtod_l+0x8b8>
 8007530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007534:	2b00      	cmp	r3, #0
 8007536:	d17f      	bne.n	8007638 <_strtod_l+0x8b8>
 8007538:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800753c:	0d1b      	lsrs	r3, r3, #20
 800753e:	051b      	lsls	r3, r3, #20
 8007540:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007544:	d978      	bls.n	8007638 <_strtod_l+0x8b8>
 8007546:	696b      	ldr	r3, [r5, #20]
 8007548:	b913      	cbnz	r3, 8007550 <_strtod_l+0x7d0>
 800754a:	692b      	ldr	r3, [r5, #16]
 800754c:	2b01      	cmp	r3, #1
 800754e:	dd73      	ble.n	8007638 <_strtod_l+0x8b8>
 8007550:	4629      	mov	r1, r5
 8007552:	2201      	movs	r2, #1
 8007554:	4620      	mov	r0, r4
 8007556:	f7ff f9a3 	bl	80068a0 <__lshift>
 800755a:	4659      	mov	r1, fp
 800755c:	4605      	mov	r5, r0
 800755e:	f7ff fa0b 	bl	8006978 <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	dd68      	ble.n	8007638 <_strtod_l+0x8b8>
 8007566:	9904      	ldr	r1, [sp, #16]
 8007568:	4a54      	ldr	r2, [pc, #336]	; (80076bc <_strtod_l+0x93c>)
 800756a:	464b      	mov	r3, r9
 800756c:	2900      	cmp	r1, #0
 800756e:	f000 8084 	beq.w	800767a <_strtod_l+0x8fa>
 8007572:	ea02 0109 	and.w	r1, r2, r9
 8007576:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800757a:	dc7e      	bgt.n	800767a <_strtod_l+0x8fa>
 800757c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007580:	f77f aeb3 	ble.w	80072ea <_strtod_l+0x56a>
 8007584:	4b4e      	ldr	r3, [pc, #312]	; (80076c0 <_strtod_l+0x940>)
 8007586:	4640      	mov	r0, r8
 8007588:	4649      	mov	r1, r9
 800758a:	2200      	movs	r2, #0
 800758c:	f7f9 f83c 	bl	8000608 <__aeabi_dmul>
 8007590:	4b4a      	ldr	r3, [pc, #296]	; (80076bc <_strtod_l+0x93c>)
 8007592:	400b      	ands	r3, r1
 8007594:	4680      	mov	r8, r0
 8007596:	4689      	mov	r9, r1
 8007598:	2b00      	cmp	r3, #0
 800759a:	f47f ae3f 	bne.w	800721c <_strtod_l+0x49c>
 800759e:	2322      	movs	r3, #34	; 0x22
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	e63b      	b.n	800721c <_strtod_l+0x49c>
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	ea03 0808 	and.w	r8, r3, r8
 80075b0:	e6e8      	b.n	8007384 <_strtod_l+0x604>
 80075b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80075b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80075ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80075be:	36e2      	adds	r6, #226	; 0xe2
 80075c0:	fa01 f306 	lsl.w	r3, r1, r6
 80075c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80075c8:	e748      	b.n	800745c <_strtod_l+0x6dc>
 80075ca:	2100      	movs	r1, #0
 80075cc:	2301      	movs	r3, #1
 80075ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80075d2:	e743      	b.n	800745c <_strtod_l+0x6dc>
 80075d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075d6:	4632      	mov	r2, r6
 80075d8:	4620      	mov	r0, r4
 80075da:	f7ff f961 	bl	80068a0 <__lshift>
 80075de:	9016      	str	r0, [sp, #88]	; 0x58
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f47f af6b 	bne.w	80074bc <_strtod_l+0x73c>
 80075e6:	e60f      	b.n	8007208 <_strtod_l+0x488>
 80075e8:	46ca      	mov	sl, r9
 80075ea:	d171      	bne.n	80076d0 <_strtod_l+0x950>
 80075ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f2:	b352      	cbz	r2, 800764a <_strtod_l+0x8ca>
 80075f4:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <_strtod_l+0x944>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d12a      	bne.n	8007650 <_strtod_l+0x8d0>
 80075fa:	9b04      	ldr	r3, [sp, #16]
 80075fc:	4641      	mov	r1, r8
 80075fe:	b1fb      	cbz	r3, 8007640 <_strtod_l+0x8c0>
 8007600:	4b2e      	ldr	r3, [pc, #184]	; (80076bc <_strtod_l+0x93c>)
 8007602:	ea09 0303 	and.w	r3, r9, r3
 8007606:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800760a:	f04f 32ff 	mov.w	r2, #4294967295
 800760e:	d81a      	bhi.n	8007646 <_strtod_l+0x8c6>
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	4299      	cmp	r1, r3
 800761c:	d118      	bne.n	8007650 <_strtod_l+0x8d0>
 800761e:	4b2a      	ldr	r3, [pc, #168]	; (80076c8 <_strtod_l+0x948>)
 8007620:	459a      	cmp	sl, r3
 8007622:	d102      	bne.n	800762a <_strtod_l+0x8aa>
 8007624:	3101      	adds	r1, #1
 8007626:	f43f adef 	beq.w	8007208 <_strtod_l+0x488>
 800762a:	4b24      	ldr	r3, [pc, #144]	; (80076bc <_strtod_l+0x93c>)
 800762c:	ea0a 0303 	and.w	r3, sl, r3
 8007630:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1a2      	bne.n	8007584 <_strtod_l+0x804>
 800763e:	e5ed      	b.n	800721c <_strtod_l+0x49c>
 8007640:	f04f 33ff 	mov.w	r3, #4294967295
 8007644:	e7e9      	b.n	800761a <_strtod_l+0x89a>
 8007646:	4613      	mov	r3, r2
 8007648:	e7e7      	b.n	800761a <_strtod_l+0x89a>
 800764a:	ea53 0308 	orrs.w	r3, r3, r8
 800764e:	d08a      	beq.n	8007566 <_strtod_l+0x7e6>
 8007650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007652:	b1e3      	cbz	r3, 800768e <_strtod_l+0x90e>
 8007654:	ea13 0f0a 	tst.w	r3, sl
 8007658:	d0ee      	beq.n	8007638 <_strtod_l+0x8b8>
 800765a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765c:	9a04      	ldr	r2, [sp, #16]
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	b1c3      	cbz	r3, 8007696 <_strtod_l+0x916>
 8007664:	f7ff fb6f 	bl	8006d46 <sulp>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	ec51 0b18 	vmov	r0, r1, d8
 8007670:	f7f8 fe14 	bl	800029c <__adddf3>
 8007674:	4680      	mov	r8, r0
 8007676:	4689      	mov	r9, r1
 8007678:	e7de      	b.n	8007638 <_strtod_l+0x8b8>
 800767a:	4013      	ands	r3, r2
 800767c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007680:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007684:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007688:	f04f 38ff 	mov.w	r8, #4294967295
 800768c:	e7d4      	b.n	8007638 <_strtod_l+0x8b8>
 800768e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007690:	ea13 0f08 	tst.w	r3, r8
 8007694:	e7e0      	b.n	8007658 <_strtod_l+0x8d8>
 8007696:	f7ff fb56 	bl	8006d46 <sulp>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	ec51 0b18 	vmov	r0, r1, d8
 80076a2:	f7f8 fdf9 	bl	8000298 <__aeabi_dsub>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	f7f9 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d0c0      	beq.n	8007638 <_strtod_l+0x8b8>
 80076b6:	e618      	b.n	80072ea <_strtod_l+0x56a>
 80076b8:	fffffc02 	.word	0xfffffc02
 80076bc:	7ff00000 	.word	0x7ff00000
 80076c0:	39500000 	.word	0x39500000
 80076c4:	000fffff 	.word	0x000fffff
 80076c8:	7fefffff 	.word	0x7fefffff
 80076cc:	08008e28 	.word	0x08008e28
 80076d0:	4659      	mov	r1, fp
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7ff fac0 	bl	8006c58 <__ratio>
 80076d8:	ec57 6b10 	vmov	r6, r7, d0
 80076dc:	ee10 0a10 	vmov	r0, s0
 80076e0:	2200      	movs	r2, #0
 80076e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f9 fa0a 	bl	8000b00 <__aeabi_dcmple>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d071      	beq.n	80077d4 <_strtod_l+0xa54>
 80076f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d17c      	bne.n	80077f0 <_strtod_l+0xa70>
 80076f6:	f1b8 0f00 	cmp.w	r8, #0
 80076fa:	d15a      	bne.n	80077b2 <_strtod_l+0xa32>
 80076fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007700:	2b00      	cmp	r3, #0
 8007702:	d15d      	bne.n	80077c0 <_strtod_l+0xa40>
 8007704:	4b90      	ldr	r3, [pc, #576]	; (8007948 <_strtod_l+0xbc8>)
 8007706:	2200      	movs	r2, #0
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 f9ee 	bl	8000aec <__aeabi_dcmplt>
 8007710:	2800      	cmp	r0, #0
 8007712:	d15c      	bne.n	80077ce <_strtod_l+0xa4e>
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	4b8c      	ldr	r3, [pc, #560]	; (800794c <_strtod_l+0xbcc>)
 800771a:	2200      	movs	r2, #0
 800771c:	f7f8 ff74 	bl	8000608 <__aeabi_dmul>
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007728:	9606      	str	r6, [sp, #24]
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007730:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007734:	4b86      	ldr	r3, [pc, #536]	; (8007950 <_strtod_l+0xbd0>)
 8007736:	ea0a 0303 	and.w	r3, sl, r3
 800773a:	930d      	str	r3, [sp, #52]	; 0x34
 800773c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800773e:	4b85      	ldr	r3, [pc, #532]	; (8007954 <_strtod_l+0xbd4>)
 8007740:	429a      	cmp	r2, r3
 8007742:	f040 8090 	bne.w	8007866 <_strtod_l+0xae6>
 8007746:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800774a:	ec49 8b10 	vmov	d0, r8, r9
 800774e:	f7ff f9b9 	bl	8006ac4 <__ulp>
 8007752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007756:	ec51 0b10 	vmov	r0, r1, d0
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	4642      	mov	r2, r8
 8007760:	464b      	mov	r3, r9
 8007762:	f7f8 fd9b 	bl	800029c <__adddf3>
 8007766:	460b      	mov	r3, r1
 8007768:	4979      	ldr	r1, [pc, #484]	; (8007950 <_strtod_l+0xbd0>)
 800776a:	4a7b      	ldr	r2, [pc, #492]	; (8007958 <_strtod_l+0xbd8>)
 800776c:	4019      	ands	r1, r3
 800776e:	4291      	cmp	r1, r2
 8007770:	4680      	mov	r8, r0
 8007772:	d944      	bls.n	80077fe <_strtod_l+0xa7e>
 8007774:	ee18 2a90 	vmov	r2, s17
 8007778:	4b78      	ldr	r3, [pc, #480]	; (800795c <_strtod_l+0xbdc>)
 800777a:	429a      	cmp	r2, r3
 800777c:	d104      	bne.n	8007788 <_strtod_l+0xa08>
 800777e:	ee18 3a10 	vmov	r3, s16
 8007782:	3301      	adds	r3, #1
 8007784:	f43f ad40 	beq.w	8007208 <_strtod_l+0x488>
 8007788:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800795c <_strtod_l+0xbdc>
 800778c:	f04f 38ff 	mov.w	r8, #4294967295
 8007790:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007792:	4620      	mov	r0, r4
 8007794:	f7fe fe6a 	bl	800646c <_Bfree>
 8007798:	9905      	ldr	r1, [sp, #20]
 800779a:	4620      	mov	r0, r4
 800779c:	f7fe fe66 	bl	800646c <_Bfree>
 80077a0:	4659      	mov	r1, fp
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7fe fe62 	bl	800646c <_Bfree>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4620      	mov	r0, r4
 80077ac:	f7fe fe5e 	bl	800646c <_Bfree>
 80077b0:	e609      	b.n	80073c6 <_strtod_l+0x646>
 80077b2:	f1b8 0f01 	cmp.w	r8, #1
 80077b6:	d103      	bne.n	80077c0 <_strtod_l+0xa40>
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	f43f ad95 	beq.w	80072ea <_strtod_l+0x56a>
 80077c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007918 <_strtod_l+0xb98>
 80077c4:	4f60      	ldr	r7, [pc, #384]	; (8007948 <_strtod_l+0xbc8>)
 80077c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077ca:	2600      	movs	r6, #0
 80077cc:	e7ae      	b.n	800772c <_strtod_l+0x9ac>
 80077ce:	4f5f      	ldr	r7, [pc, #380]	; (800794c <_strtod_l+0xbcc>)
 80077d0:	2600      	movs	r6, #0
 80077d2:	e7a7      	b.n	8007724 <_strtod_l+0x9a4>
 80077d4:	4b5d      	ldr	r3, [pc, #372]	; (800794c <_strtod_l+0xbcc>)
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	2200      	movs	r2, #0
 80077dc:	f7f8 ff14 	bl	8000608 <__aeabi_dmul>
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d09c      	beq.n	8007724 <_strtod_l+0x9a4>
 80077ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077ee:	e79d      	b.n	800772c <_strtod_l+0x9ac>
 80077f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007920 <_strtod_l+0xba0>
 80077f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077f8:	ec57 6b17 	vmov	r6, r7, d7
 80077fc:	e796      	b.n	800772c <_strtod_l+0x9ac>
 80077fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	46ca      	mov	sl, r9
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1c2      	bne.n	8007790 <_strtod_l+0xa10>
 800780a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800780e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007810:	0d1b      	lsrs	r3, r3, #20
 8007812:	051b      	lsls	r3, r3, #20
 8007814:	429a      	cmp	r2, r3
 8007816:	d1bb      	bne.n	8007790 <_strtod_l+0xa10>
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 fa54 	bl	8000cc8 <__aeabi_d2lz>
 8007820:	f7f8 fec4 	bl	80005ac <__aeabi_l2d>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007836:	ea43 0308 	orr.w	r3, r3, r8
 800783a:	4313      	orrs	r3, r2
 800783c:	4606      	mov	r6, r0
 800783e:	460f      	mov	r7, r1
 8007840:	d054      	beq.n	80078ec <_strtod_l+0xb6c>
 8007842:	a339      	add	r3, pc, #228	; (adr r3, 8007928 <_strtod_l+0xba8>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f9 f950 	bl	8000aec <__aeabi_dcmplt>
 800784c:	2800      	cmp	r0, #0
 800784e:	f47f ace5 	bne.w	800721c <_strtod_l+0x49c>
 8007852:	a337      	add	r3, pc, #220	; (adr r3, 8007930 <_strtod_l+0xbb0>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f9 f964 	bl	8000b28 <__aeabi_dcmpgt>
 8007860:	2800      	cmp	r0, #0
 8007862:	d095      	beq.n	8007790 <_strtod_l+0xa10>
 8007864:	e4da      	b.n	800721c <_strtod_l+0x49c>
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	b333      	cbz	r3, 80078b8 <_strtod_l+0xb38>
 800786a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007870:	d822      	bhi.n	80078b8 <_strtod_l+0xb38>
 8007872:	a331      	add	r3, pc, #196	; (adr r3, 8007938 <_strtod_l+0xbb8>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f9 f940 	bl	8000b00 <__aeabi_dcmple>
 8007880:	b1a0      	cbz	r0, 80078ac <_strtod_l+0xb2c>
 8007882:	4639      	mov	r1, r7
 8007884:	4630      	mov	r0, r6
 8007886:	f7f9 f997 	bl	8000bb8 <__aeabi_d2uiz>
 800788a:	2801      	cmp	r0, #1
 800788c:	bf38      	it	cc
 800788e:	2001      	movcc	r0, #1
 8007890:	f7f8 fe40 	bl	8000514 <__aeabi_ui2d>
 8007894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	bb23      	cbnz	r3, 80078e6 <_strtod_l+0xb66>
 800789c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078a0:	9010      	str	r0, [sp, #64]	; 0x40
 80078a2:	9311      	str	r3, [sp, #68]	; 0x44
 80078a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80078ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078bc:	eeb0 0a48 	vmov.f32	s0, s16
 80078c0:	eef0 0a68 	vmov.f32	s1, s17
 80078c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80078c8:	f7ff f8fc 	bl	8006ac4 <__ulp>
 80078cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078d0:	ec53 2b10 	vmov	r2, r3, d0
 80078d4:	f7f8 fe98 	bl	8000608 <__aeabi_dmul>
 80078d8:	ec53 2b18 	vmov	r2, r3, d8
 80078dc:	f7f8 fcde 	bl	800029c <__adddf3>
 80078e0:	4680      	mov	r8, r0
 80078e2:	4689      	mov	r9, r1
 80078e4:	e78d      	b.n	8007802 <_strtod_l+0xa82>
 80078e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80078ea:	e7db      	b.n	80078a4 <_strtod_l+0xb24>
 80078ec:	a314      	add	r3, pc, #80	; (adr r3, 8007940 <_strtod_l+0xbc0>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f9 f8fb 	bl	8000aec <__aeabi_dcmplt>
 80078f6:	e7b3      	b.n	8007860 <_strtod_l+0xae0>
 80078f8:	2300      	movs	r3, #0
 80078fa:	930a      	str	r3, [sp, #40]	; 0x28
 80078fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	f7ff ba7c 	b.w	8006dfe <_strtod_l+0x7e>
 8007906:	2a65      	cmp	r2, #101	; 0x65
 8007908:	f43f ab75 	beq.w	8006ff6 <_strtod_l+0x276>
 800790c:	2a45      	cmp	r2, #69	; 0x45
 800790e:	f43f ab72 	beq.w	8006ff6 <_strtod_l+0x276>
 8007912:	2301      	movs	r3, #1
 8007914:	f7ff bbaa 	b.w	800706c <_strtod_l+0x2ec>
 8007918:	00000000 	.word	0x00000000
 800791c:	bff00000 	.word	0xbff00000
 8007920:	00000000 	.word	0x00000000
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	94a03595 	.word	0x94a03595
 800792c:	3fdfffff 	.word	0x3fdfffff
 8007930:	35afe535 	.word	0x35afe535
 8007934:	3fe00000 	.word	0x3fe00000
 8007938:	ffc00000 	.word	0xffc00000
 800793c:	41dfffff 	.word	0x41dfffff
 8007940:	94a03595 	.word	0x94a03595
 8007944:	3fcfffff 	.word	0x3fcfffff
 8007948:	3ff00000 	.word	0x3ff00000
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	7fe00000 	.word	0x7fe00000
 8007958:	7c9fffff 	.word	0x7c9fffff
 800795c:	7fefffff 	.word	0x7fefffff

08007960 <_strtod_r>:
 8007960:	4b01      	ldr	r3, [pc, #4]	; (8007968 <_strtod_r+0x8>)
 8007962:	f7ff ba0d 	b.w	8006d80 <_strtod_l>
 8007966:	bf00      	nop
 8007968:	20000068 	.word	0x20000068

0800796c <_strtol_l.constprop.0>:
 800796c:	2b01      	cmp	r3, #1
 800796e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007972:	d001      	beq.n	8007978 <_strtol_l.constprop.0+0xc>
 8007974:	2b24      	cmp	r3, #36	; 0x24
 8007976:	d906      	bls.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007978:	f7fd fd8a 	bl	8005490 <__errno>
 800797c:	2316      	movs	r3, #22
 800797e:	6003      	str	r3, [r0, #0]
 8007980:	2000      	movs	r0, #0
 8007982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007986:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a6c <_strtol_l.constprop.0+0x100>
 800798a:	460d      	mov	r5, r1
 800798c:	462e      	mov	r6, r5
 800798e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007992:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007996:	f017 0708 	ands.w	r7, r7, #8
 800799a:	d1f7      	bne.n	800798c <_strtol_l.constprop.0+0x20>
 800799c:	2c2d      	cmp	r4, #45	; 0x2d
 800799e:	d132      	bne.n	8007a06 <_strtol_l.constprop.0+0x9a>
 80079a0:	782c      	ldrb	r4, [r5, #0]
 80079a2:	2701      	movs	r7, #1
 80079a4:	1cb5      	adds	r5, r6, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d05b      	beq.n	8007a62 <_strtol_l.constprop.0+0xf6>
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d109      	bne.n	80079c2 <_strtol_l.constprop.0+0x56>
 80079ae:	2c30      	cmp	r4, #48	; 0x30
 80079b0:	d107      	bne.n	80079c2 <_strtol_l.constprop.0+0x56>
 80079b2:	782c      	ldrb	r4, [r5, #0]
 80079b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079b8:	2c58      	cmp	r4, #88	; 0x58
 80079ba:	d14d      	bne.n	8007a58 <_strtol_l.constprop.0+0xec>
 80079bc:	786c      	ldrb	r4, [r5, #1]
 80079be:	2310      	movs	r3, #16
 80079c0:	3502      	adds	r5, #2
 80079c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80079ca:	f04f 0e00 	mov.w	lr, #0
 80079ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80079d2:	4676      	mov	r6, lr
 80079d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80079d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079dc:	f1bc 0f09 	cmp.w	ip, #9
 80079e0:	d816      	bhi.n	8007a10 <_strtol_l.constprop.0+0xa4>
 80079e2:	4664      	mov	r4, ip
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	dd24      	ble.n	8007a32 <_strtol_l.constprop.0+0xc6>
 80079e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80079ec:	d008      	beq.n	8007a00 <_strtol_l.constprop.0+0x94>
 80079ee:	45b1      	cmp	r9, r6
 80079f0:	d31c      	bcc.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079f2:	d101      	bne.n	80079f8 <_strtol_l.constprop.0+0x8c>
 80079f4:	45a2      	cmp	sl, r4
 80079f6:	db19      	blt.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079f8:	fb06 4603 	mla	r6, r6, r3, r4
 80079fc:	f04f 0e01 	mov.w	lr, #1
 8007a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a04:	e7e8      	b.n	80079d8 <_strtol_l.constprop.0+0x6c>
 8007a06:	2c2b      	cmp	r4, #43	; 0x2b
 8007a08:	bf04      	itt	eq
 8007a0a:	782c      	ldrbeq	r4, [r5, #0]
 8007a0c:	1cb5      	addeq	r5, r6, #2
 8007a0e:	e7ca      	b.n	80079a6 <_strtol_l.constprop.0+0x3a>
 8007a10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a14:	f1bc 0f19 	cmp.w	ip, #25
 8007a18:	d801      	bhi.n	8007a1e <_strtol_l.constprop.0+0xb2>
 8007a1a:	3c37      	subs	r4, #55	; 0x37
 8007a1c:	e7e2      	b.n	80079e4 <_strtol_l.constprop.0+0x78>
 8007a1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a22:	f1bc 0f19 	cmp.w	ip, #25
 8007a26:	d804      	bhi.n	8007a32 <_strtol_l.constprop.0+0xc6>
 8007a28:	3c57      	subs	r4, #87	; 0x57
 8007a2a:	e7db      	b.n	80079e4 <_strtol_l.constprop.0+0x78>
 8007a2c:	f04f 3eff 	mov.w	lr, #4294967295
 8007a30:	e7e6      	b.n	8007a00 <_strtol_l.constprop.0+0x94>
 8007a32:	f1be 3fff 	cmp.w	lr, #4294967295
 8007a36:	d105      	bne.n	8007a44 <_strtol_l.constprop.0+0xd8>
 8007a38:	2322      	movs	r3, #34	; 0x22
 8007a3a:	6003      	str	r3, [r0, #0]
 8007a3c:	4646      	mov	r6, r8
 8007a3e:	b942      	cbnz	r2, 8007a52 <_strtol_l.constprop.0+0xe6>
 8007a40:	4630      	mov	r0, r6
 8007a42:	e79e      	b.n	8007982 <_strtol_l.constprop.0+0x16>
 8007a44:	b107      	cbz	r7, 8007a48 <_strtol_l.constprop.0+0xdc>
 8007a46:	4276      	negs	r6, r6
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d0f9      	beq.n	8007a40 <_strtol_l.constprop.0+0xd4>
 8007a4c:	f1be 0f00 	cmp.w	lr, #0
 8007a50:	d000      	beq.n	8007a54 <_strtol_l.constprop.0+0xe8>
 8007a52:	1e69      	subs	r1, r5, #1
 8007a54:	6011      	str	r1, [r2, #0]
 8007a56:	e7f3      	b.n	8007a40 <_strtol_l.constprop.0+0xd4>
 8007a58:	2430      	movs	r4, #48	; 0x30
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1b1      	bne.n	80079c2 <_strtol_l.constprop.0+0x56>
 8007a5e:	2308      	movs	r3, #8
 8007a60:	e7af      	b.n	80079c2 <_strtol_l.constprop.0+0x56>
 8007a62:	2c30      	cmp	r4, #48	; 0x30
 8007a64:	d0a5      	beq.n	80079b2 <_strtol_l.constprop.0+0x46>
 8007a66:	230a      	movs	r3, #10
 8007a68:	e7ab      	b.n	80079c2 <_strtol_l.constprop.0+0x56>
 8007a6a:	bf00      	nop
 8007a6c:	08008e51 	.word	0x08008e51

08007a70 <_strtol_r>:
 8007a70:	f7ff bf7c 	b.w	800796c <_strtol_l.constprop.0>

08007a74 <__ssputs_r>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	688e      	ldr	r6, [r1, #8]
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	42be      	cmp	r6, r7
 8007a7e:	680b      	ldr	r3, [r1, #0]
 8007a80:	4682      	mov	sl, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4690      	mov	r8, r2
 8007a86:	d82c      	bhi.n	8007ae2 <__ssputs_r+0x6e>
 8007a88:	898a      	ldrh	r2, [r1, #12]
 8007a8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a8e:	d026      	beq.n	8007ade <__ssputs_r+0x6a>
 8007a90:	6965      	ldr	r5, [r4, #20]
 8007a92:	6909      	ldr	r1, [r1, #16]
 8007a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a98:	eba3 0901 	sub.w	r9, r3, r1
 8007a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa0:	1c7b      	adds	r3, r7, #1
 8007aa2:	444b      	add	r3, r9
 8007aa4:	106d      	asrs	r5, r5, #1
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	bf38      	it	cc
 8007aaa:	461d      	movcc	r5, r3
 8007aac:	0553      	lsls	r3, r2, #21
 8007aae:	d527      	bpl.n	8007b00 <__ssputs_r+0x8c>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7fe fc0f 	bl	80062d4 <_malloc_r>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	b360      	cbz	r0, 8007b14 <__ssputs_r+0xa0>
 8007aba:	6921      	ldr	r1, [r4, #16]
 8007abc:	464a      	mov	r2, r9
 8007abe:	f000 fbe3 	bl	8008288 <memcpy>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	6126      	str	r6, [r4, #16]
 8007ad0:	6165      	str	r5, [r4, #20]
 8007ad2:	444e      	add	r6, r9
 8007ad4:	eba5 0509 	sub.w	r5, r5, r9
 8007ad8:	6026      	str	r6, [r4, #0]
 8007ada:	60a5      	str	r5, [r4, #8]
 8007adc:	463e      	mov	r6, r7
 8007ade:	42be      	cmp	r6, r7
 8007ae0:	d900      	bls.n	8007ae4 <__ssputs_r+0x70>
 8007ae2:	463e      	mov	r6, r7
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	4641      	mov	r1, r8
 8007aea:	f000 fb6f 	bl	80081cc <memmove>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	1b9b      	subs	r3, r3, r6
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	4433      	add	r3, r6
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	2000      	movs	r0, #0
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	462a      	mov	r2, r5
 8007b02:	f000 ff76 	bl	80089f2 <_realloc_r>
 8007b06:	4606      	mov	r6, r0
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d1e0      	bne.n	8007ace <__ssputs_r+0x5a>
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f7fe fb6c 	bl	80061ec <_free_r>
 8007b14:	230c      	movs	r3, #12
 8007b16:	f8ca 3000 	str.w	r3, [sl]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
 8007b26:	e7e9      	b.n	8007afc <__ssputs_r+0x88>

08007b28 <_svfiprintf_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4698      	mov	r8, r3
 8007b2e:	898b      	ldrh	r3, [r1, #12]
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	4607      	mov	r7, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	d50e      	bpl.n	8007b5a <_svfiprintf_r+0x32>
 8007b3c:	690b      	ldr	r3, [r1, #16]
 8007b3e:	b963      	cbnz	r3, 8007b5a <_svfiprintf_r+0x32>
 8007b40:	2140      	movs	r1, #64	; 0x40
 8007b42:	f7fe fbc7 	bl	80062d4 <_malloc_r>
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	6128      	str	r0, [r5, #16]
 8007b4a:	b920      	cbnz	r0, 8007b56 <_svfiprintf_r+0x2e>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	e0d0      	b.n	8007cf8 <_svfiprintf_r+0x1d0>
 8007b56:	2340      	movs	r3, #64	; 0x40
 8007b58:	616b      	str	r3, [r5, #20]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	2320      	movs	r3, #32
 8007b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b68:	2330      	movs	r3, #48	; 0x30
 8007b6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d10 <_svfiprintf_r+0x1e8>
 8007b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b72:	f04f 0901 	mov.w	r9, #1
 8007b76:	4623      	mov	r3, r4
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b7e:	b10a      	cbz	r2, 8007b84 <_svfiprintf_r+0x5c>
 8007b80:	2a25      	cmp	r2, #37	; 0x25
 8007b82:	d1f9      	bne.n	8007b78 <_svfiprintf_r+0x50>
 8007b84:	ebba 0b04 	subs.w	fp, sl, r4
 8007b88:	d00b      	beq.n	8007ba2 <_svfiprintf_r+0x7a>
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff6f 	bl	8007a74 <__ssputs_r>
 8007b96:	3001      	adds	r0, #1
 8007b98:	f000 80a9 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9e:	445a      	add	r2, fp
 8007ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80a1 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bb6:	f10a 0a01 	add.w	sl, sl, #1
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc4:	4654      	mov	r4, sl
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	4850      	ldr	r0, [pc, #320]	; (8007d10 <_svfiprintf_r+0x1e8>)
 8007bce:	f7f8 fb07 	bl	80001e0 <memchr>
 8007bd2:	9a04      	ldr	r2, [sp, #16]
 8007bd4:	b9d8      	cbnz	r0, 8007c0e <_svfiprintf_r+0xe6>
 8007bd6:	06d0      	lsls	r0, r2, #27
 8007bd8:	bf44      	itt	mi
 8007bda:	2320      	movmi	r3, #32
 8007bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be0:	0711      	lsls	r1, r2, #28
 8007be2:	bf44      	itt	mi
 8007be4:	232b      	movmi	r3, #43	; 0x2b
 8007be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bea:	f89a 3000 	ldrb.w	r3, [sl]
 8007bee:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf0:	d015      	beq.n	8007c1e <_svfiprintf_r+0xf6>
 8007bf2:	9a07      	ldr	r2, [sp, #28]
 8007bf4:	4654      	mov	r4, sl
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f04f 0c0a 	mov.w	ip, #10
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c02:	3b30      	subs	r3, #48	; 0x30
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d94d      	bls.n	8007ca4 <_svfiprintf_r+0x17c>
 8007c08:	b1b0      	cbz	r0, 8007c38 <_svfiprintf_r+0x110>
 8007c0a:	9207      	str	r2, [sp, #28]
 8007c0c:	e014      	b.n	8007c38 <_svfiprintf_r+0x110>
 8007c0e:	eba0 0308 	sub.w	r3, r0, r8
 8007c12:	fa09 f303 	lsl.w	r3, r9, r3
 8007c16:	4313      	orrs	r3, r2
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	46a2      	mov	sl, r4
 8007c1c:	e7d2      	b.n	8007bc4 <_svfiprintf_r+0x9c>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	1d19      	adds	r1, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfbb      	ittet	lt
 8007c2a:	425b      	neglt	r3, r3
 8007c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c30:	9307      	strge	r3, [sp, #28]
 8007c32:	9307      	strlt	r3, [sp, #28]
 8007c34:	bfb8      	it	lt
 8007c36:	9204      	strlt	r2, [sp, #16]
 8007c38:	7823      	ldrb	r3, [r4, #0]
 8007c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3c:	d10c      	bne.n	8007c58 <_svfiprintf_r+0x130>
 8007c3e:	7863      	ldrb	r3, [r4, #1]
 8007c40:	2b2a      	cmp	r3, #42	; 0x2a
 8007c42:	d134      	bne.n	8007cae <_svfiprintf_r+0x186>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	1d1a      	adds	r2, r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	9203      	str	r2, [sp, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bfb8      	it	lt
 8007c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c54:	3402      	adds	r4, #2
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d20 <_svfiprintf_r+0x1f8>
 8007c5c:	7821      	ldrb	r1, [r4, #0]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	4650      	mov	r0, sl
 8007c62:	f7f8 fabd 	bl	80001e0 <memchr>
 8007c66:	b138      	cbz	r0, 8007c78 <_svfiprintf_r+0x150>
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	eba0 000a 	sub.w	r0, r0, sl
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	4082      	lsls	r2, r0
 8007c72:	4313      	orrs	r3, r2
 8007c74:	3401      	adds	r4, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	4825      	ldr	r0, [pc, #148]	; (8007d14 <_svfiprintf_r+0x1ec>)
 8007c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c82:	2206      	movs	r2, #6
 8007c84:	f7f8 faac 	bl	80001e0 <memchr>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d038      	beq.n	8007cfe <_svfiprintf_r+0x1d6>
 8007c8c:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <_svfiprintf_r+0x1f0>)
 8007c8e:	bb1b      	cbnz	r3, 8007cd8 <_svfiprintf_r+0x1b0>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3307      	adds	r3, #7
 8007c94:	f023 0307 	bic.w	r3, r3, #7
 8007c98:	3308      	adds	r3, #8
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	4433      	add	r3, r6
 8007ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca2:	e768      	b.n	8007b76 <_svfiprintf_r+0x4e>
 8007ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2001      	movs	r0, #1
 8007cac:	e7a6      	b.n	8007bfc <_svfiprintf_r+0xd4>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc0:	3a30      	subs	r2, #48	; 0x30
 8007cc2:	2a09      	cmp	r2, #9
 8007cc4:	d903      	bls.n	8007cce <_svfiprintf_r+0x1a6>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0c6      	beq.n	8007c58 <_svfiprintf_r+0x130>
 8007cca:	9105      	str	r1, [sp, #20]
 8007ccc:	e7c4      	b.n	8007c58 <_svfiprintf_r+0x130>
 8007cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e7f0      	b.n	8007cba <_svfiprintf_r+0x192>
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <_svfiprintf_r+0x1f4>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f7fc fad6 	bl	8004294 <_printf_float>
 8007ce8:	1c42      	adds	r2, r0, #1
 8007cea:	4606      	mov	r6, r0
 8007cec:	d1d6      	bne.n	8007c9c <_svfiprintf_r+0x174>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	065b      	lsls	r3, r3, #25
 8007cf2:	f53f af2d 	bmi.w	8007b50 <_svfiprintf_r+0x28>
 8007cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cf8:	b01d      	add	sp, #116	; 0x74
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <_svfiprintf_r+0x1f4>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7fc fd67 	bl	80047dc <_printf_i>
 8007d0e:	e7eb      	b.n	8007ce8 <_svfiprintf_r+0x1c0>
 8007d10:	08008f51 	.word	0x08008f51
 8007d14:	08008f5b 	.word	0x08008f5b
 8007d18:	08004295 	.word	0x08004295
 8007d1c:	08007a75 	.word	0x08007a75
 8007d20:	08008f57 	.word	0x08008f57

08007d24 <__sfputc_r>:
 8007d24:	6893      	ldr	r3, [r2, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	b410      	push	{r4}
 8007d2c:	6093      	str	r3, [r2, #8]
 8007d2e:	da08      	bge.n	8007d42 <__sfputc_r+0x1e>
 8007d30:	6994      	ldr	r4, [r2, #24]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	db01      	blt.n	8007d3a <__sfputc_r+0x16>
 8007d36:	290a      	cmp	r1, #10
 8007d38:	d103      	bne.n	8007d42 <__sfputc_r+0x1e>
 8007d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d3e:	f7fd bac0 	b.w	80052c2 <__swbuf_r>
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	1c58      	adds	r0, r3, #1
 8007d46:	6010      	str	r0, [r2, #0]
 8007d48:	7019      	strb	r1, [r3, #0]
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <__sfputs_r>:
 8007d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	4614      	mov	r4, r2
 8007d5a:	18d5      	adds	r5, r2, r3
 8007d5c:	42ac      	cmp	r4, r5
 8007d5e:	d101      	bne.n	8007d64 <__sfputs_r+0x12>
 8007d60:	2000      	movs	r0, #0
 8007d62:	e007      	b.n	8007d74 <__sfputs_r+0x22>
 8007d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d68:	463a      	mov	r2, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ffda 	bl	8007d24 <__sfputc_r>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d1f3      	bne.n	8007d5c <__sfputs_r+0xa>
 8007d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d78 <_vfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	b09d      	sub	sp, #116	; 0x74
 8007d80:	4614      	mov	r4, r2
 8007d82:	4698      	mov	r8, r3
 8007d84:	4606      	mov	r6, r0
 8007d86:	b118      	cbz	r0, 8007d90 <_vfiprintf_r+0x18>
 8007d88:	6a03      	ldr	r3, [r0, #32]
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x18>
 8007d8c:	f7fd f8e4 	bl	8004f58 <__sinit>
 8007d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9e:	f7fd fba2 	bl	80054e6 <__retarget_lock_acquire_recursive>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	071b      	lsls	r3, r3, #28
 8007da6:	d501      	bpl.n	8007dac <_vfiprintf_r+0x34>
 8007da8:	692b      	ldr	r3, [r5, #16]
 8007daa:	b99b      	cbnz	r3, 8007dd4 <_vfiprintf_r+0x5c>
 8007dac:	4629      	mov	r1, r5
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7fd fac4 	bl	800533c <__swsetup_r>
 8007db4:	b170      	cbz	r0, 8007dd4 <_vfiprintf_r+0x5c>
 8007db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db8:	07dc      	lsls	r4, r3, #31
 8007dba:	d504      	bpl.n	8007dc6 <_vfiprintf_r+0x4e>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	b01d      	add	sp, #116	; 0x74
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	0598      	lsls	r0, r3, #22
 8007dca:	d4f7      	bmi.n	8007dbc <_vfiprintf_r+0x44>
 8007dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dce:	f7fd fb8b 	bl	80054e8 <__retarget_lock_release_recursive>
 8007dd2:	e7f3      	b.n	8007dbc <_vfiprintf_r+0x44>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de2:	2330      	movs	r3, #48	; 0x30
 8007de4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f98 <_vfiprintf_r+0x220>
 8007de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dec:	f04f 0901 	mov.w	r9, #1
 8007df0:	4623      	mov	r3, r4
 8007df2:	469a      	mov	sl, r3
 8007df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df8:	b10a      	cbz	r2, 8007dfe <_vfiprintf_r+0x86>
 8007dfa:	2a25      	cmp	r2, #37	; 0x25
 8007dfc:	d1f9      	bne.n	8007df2 <_vfiprintf_r+0x7a>
 8007dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007e02:	d00b      	beq.n	8007e1c <_vfiprintf_r+0xa4>
 8007e04:	465b      	mov	r3, fp
 8007e06:	4622      	mov	r2, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ffa1 	bl	8007d52 <__sfputs_r>
 8007e10:	3001      	adds	r0, #1
 8007e12:	f000 80a9 	beq.w	8007f68 <_vfiprintf_r+0x1f0>
 8007e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e18:	445a      	add	r2, fp
 8007e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 80a1 	beq.w	8007f68 <_vfiprintf_r+0x1f0>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e30:	f10a 0a01 	add.w	sl, sl, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	9307      	str	r3, [sp, #28]
 8007e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e3e:	4654      	mov	r4, sl
 8007e40:	2205      	movs	r2, #5
 8007e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e46:	4854      	ldr	r0, [pc, #336]	; (8007f98 <_vfiprintf_r+0x220>)
 8007e48:	f7f8 f9ca 	bl	80001e0 <memchr>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	b9d8      	cbnz	r0, 8007e88 <_vfiprintf_r+0x110>
 8007e50:	06d1      	lsls	r1, r2, #27
 8007e52:	bf44      	itt	mi
 8007e54:	2320      	movmi	r3, #32
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e5a:	0713      	lsls	r3, r2, #28
 8007e5c:	bf44      	itt	mi
 8007e5e:	232b      	movmi	r3, #43	; 0x2b
 8007e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e64:	f89a 3000 	ldrb.w	r3, [sl]
 8007e68:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6a:	d015      	beq.n	8007e98 <_vfiprintf_r+0x120>
 8007e6c:	9a07      	ldr	r2, [sp, #28]
 8007e6e:	4654      	mov	r4, sl
 8007e70:	2000      	movs	r0, #0
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4621      	mov	r1, r4
 8007e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7c:	3b30      	subs	r3, #48	; 0x30
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d94d      	bls.n	8007f1e <_vfiprintf_r+0x1a6>
 8007e82:	b1b0      	cbz	r0, 8007eb2 <_vfiprintf_r+0x13a>
 8007e84:	9207      	str	r2, [sp, #28]
 8007e86:	e014      	b.n	8007eb2 <_vfiprintf_r+0x13a>
 8007e88:	eba0 0308 	sub.w	r3, r0, r8
 8007e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	46a2      	mov	sl, r4
 8007e96:	e7d2      	b.n	8007e3e <_vfiprintf_r+0xc6>
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	1d19      	adds	r1, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	9103      	str	r1, [sp, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bfbb      	ittet	lt
 8007ea4:	425b      	neglt	r3, r3
 8007ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eaa:	9307      	strge	r3, [sp, #28]
 8007eac:	9307      	strlt	r3, [sp, #28]
 8007eae:	bfb8      	it	lt
 8007eb0:	9204      	strlt	r2, [sp, #16]
 8007eb2:	7823      	ldrb	r3, [r4, #0]
 8007eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb6:	d10c      	bne.n	8007ed2 <_vfiprintf_r+0x15a>
 8007eb8:	7863      	ldrb	r3, [r4, #1]
 8007eba:	2b2a      	cmp	r3, #42	; 0x2a
 8007ebc:	d134      	bne.n	8007f28 <_vfiprintf_r+0x1b0>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9203      	str	r2, [sp, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfb8      	it	lt
 8007eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ece:	3402      	adds	r4, #2
 8007ed0:	9305      	str	r3, [sp, #20]
 8007ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fa8 <_vfiprintf_r+0x230>
 8007ed6:	7821      	ldrb	r1, [r4, #0]
 8007ed8:	2203      	movs	r2, #3
 8007eda:	4650      	mov	r0, sl
 8007edc:	f7f8 f980 	bl	80001e0 <memchr>
 8007ee0:	b138      	cbz	r0, 8007ef2 <_vfiprintf_r+0x17a>
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	eba0 000a 	sub.w	r0, r0, sl
 8007ee8:	2240      	movs	r2, #64	; 0x40
 8007eea:	4082      	lsls	r2, r0
 8007eec:	4313      	orrs	r3, r2
 8007eee:	3401      	adds	r4, #1
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef6:	4829      	ldr	r0, [pc, #164]	; (8007f9c <_vfiprintf_r+0x224>)
 8007ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007efc:	2206      	movs	r2, #6
 8007efe:	f7f8 f96f 	bl	80001e0 <memchr>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d03f      	beq.n	8007f86 <_vfiprintf_r+0x20e>
 8007f06:	4b26      	ldr	r3, [pc, #152]	; (8007fa0 <_vfiprintf_r+0x228>)
 8007f08:	bb1b      	cbnz	r3, 8007f52 <_vfiprintf_r+0x1da>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	3307      	adds	r3, #7
 8007f0e:	f023 0307 	bic.w	r3, r3, #7
 8007f12:	3308      	adds	r3, #8
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	443b      	add	r3, r7
 8007f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1c:	e768      	b.n	8007df0 <_vfiprintf_r+0x78>
 8007f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f22:	460c      	mov	r4, r1
 8007f24:	2001      	movs	r0, #1
 8007f26:	e7a6      	b.n	8007e76 <_vfiprintf_r+0xfe>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4620      	mov	r0, r4
 8007f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3a:	3a30      	subs	r2, #48	; 0x30
 8007f3c:	2a09      	cmp	r2, #9
 8007f3e:	d903      	bls.n	8007f48 <_vfiprintf_r+0x1d0>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0c6      	beq.n	8007ed2 <_vfiprintf_r+0x15a>
 8007f44:	9105      	str	r1, [sp, #20]
 8007f46:	e7c4      	b.n	8007ed2 <_vfiprintf_r+0x15a>
 8007f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7f0      	b.n	8007f34 <_vfiprintf_r+0x1bc>
 8007f52:	ab03      	add	r3, sp, #12
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	462a      	mov	r2, r5
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <_vfiprintf_r+0x22c>)
 8007f5a:	a904      	add	r1, sp, #16
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7fc f999 	bl	8004294 <_printf_float>
 8007f62:	4607      	mov	r7, r0
 8007f64:	1c78      	adds	r0, r7, #1
 8007f66:	d1d6      	bne.n	8007f16 <_vfiprintf_r+0x19e>
 8007f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f6a:	07d9      	lsls	r1, r3, #31
 8007f6c:	d405      	bmi.n	8007f7a <_vfiprintf_r+0x202>
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	059a      	lsls	r2, r3, #22
 8007f72:	d402      	bmi.n	8007f7a <_vfiprintf_r+0x202>
 8007f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f76:	f7fd fab7 	bl	80054e8 <__retarget_lock_release_recursive>
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	065b      	lsls	r3, r3, #25
 8007f7e:	f53f af1d 	bmi.w	8007dbc <_vfiprintf_r+0x44>
 8007f82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f84:	e71c      	b.n	8007dc0 <_vfiprintf_r+0x48>
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <_vfiprintf_r+0x22c>)
 8007f8e:	a904      	add	r1, sp, #16
 8007f90:	4630      	mov	r0, r6
 8007f92:	f7fc fc23 	bl	80047dc <_printf_i>
 8007f96:	e7e4      	b.n	8007f62 <_vfiprintf_r+0x1ea>
 8007f98:	08008f51 	.word	0x08008f51
 8007f9c:	08008f5b 	.word	0x08008f5b
 8007fa0:	08004295 	.word	0x08004295
 8007fa4:	08007d53 	.word	0x08007d53
 8007fa8:	08008f57 	.word	0x08008f57

08007fac <__sflush_r>:
 8007fac:	898a      	ldrh	r2, [r1, #12]
 8007fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	0710      	lsls	r0, r2, #28
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	d458      	bmi.n	800806c <__sflush_r+0xc0>
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc05      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	dc02      	bgt.n	8007fcc <__sflush_r+0x20>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fce:	2e00      	cmp	r6, #0
 8007fd0:	d0f9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd8:	682f      	ldr	r7, [r5, #0]
 8007fda:	6a21      	ldr	r1, [r4, #32]
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	d032      	beq.n	8008046 <__sflush_r+0x9a>
 8007fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	075a      	lsls	r2, r3, #29
 8007fe6:	d505      	bpl.n	8007ff4 <__sflush_r+0x48>
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	1ac0      	subs	r0, r0, r3
 8007fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fee:	b10b      	cbz	r3, 8007ff4 <__sflush_r+0x48>
 8007ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ff2:	1ac0      	subs	r0, r0, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ffa:	6a21      	ldr	r1, [r4, #32]
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b0      	blx	r6
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	d106      	bne.n	8008014 <__sflush_r+0x68>
 8008006:	6829      	ldr	r1, [r5, #0]
 8008008:	291d      	cmp	r1, #29
 800800a:	d82b      	bhi.n	8008064 <__sflush_r+0xb8>
 800800c:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <__sflush_r+0x108>)
 800800e:	410a      	asrs	r2, r1
 8008010:	07d6      	lsls	r6, r2, #31
 8008012:	d427      	bmi.n	8008064 <__sflush_r+0xb8>
 8008014:	2200      	movs	r2, #0
 8008016:	6062      	str	r2, [r4, #4]
 8008018:	04d9      	lsls	r1, r3, #19
 800801a:	6922      	ldr	r2, [r4, #16]
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	d504      	bpl.n	800802a <__sflush_r+0x7e>
 8008020:	1c42      	adds	r2, r0, #1
 8008022:	d101      	bne.n	8008028 <__sflush_r+0x7c>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b903      	cbnz	r3, 800802a <__sflush_r+0x7e>
 8008028:	6560      	str	r0, [r4, #84]	; 0x54
 800802a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802c:	602f      	str	r7, [r5, #0]
 800802e:	2900      	cmp	r1, #0
 8008030:	d0c9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008036:	4299      	cmp	r1, r3
 8008038:	d002      	beq.n	8008040 <__sflush_r+0x94>
 800803a:	4628      	mov	r0, r5
 800803c:	f7fe f8d6 	bl	80061ec <_free_r>
 8008040:	2000      	movs	r0, #0
 8008042:	6360      	str	r0, [r4, #52]	; 0x34
 8008044:	e7c0      	b.n	8007fc8 <__sflush_r+0x1c>
 8008046:	2301      	movs	r3, #1
 8008048:	4628      	mov	r0, r5
 800804a:	47b0      	blx	r6
 800804c:	1c41      	adds	r1, r0, #1
 800804e:	d1c8      	bne.n	8007fe2 <__sflush_r+0x36>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0c5      	beq.n	8007fe2 <__sflush_r+0x36>
 8008056:	2b1d      	cmp	r3, #29
 8008058:	d001      	beq.n	800805e <__sflush_r+0xb2>
 800805a:	2b16      	cmp	r3, #22
 800805c:	d101      	bne.n	8008062 <__sflush_r+0xb6>
 800805e:	602f      	str	r7, [r5, #0]
 8008060:	e7b1      	b.n	8007fc6 <__sflush_r+0x1a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7ad      	b.n	8007fc8 <__sflush_r+0x1c>
 800806c:	690f      	ldr	r7, [r1, #16]
 800806e:	2f00      	cmp	r7, #0
 8008070:	d0a9      	beq.n	8007fc6 <__sflush_r+0x1a>
 8008072:	0793      	lsls	r3, r2, #30
 8008074:	680e      	ldr	r6, [r1, #0]
 8008076:	bf08      	it	eq
 8008078:	694b      	ldreq	r3, [r1, #20]
 800807a:	600f      	str	r7, [r1, #0]
 800807c:	bf18      	it	ne
 800807e:	2300      	movne	r3, #0
 8008080:	eba6 0807 	sub.w	r8, r6, r7
 8008084:	608b      	str	r3, [r1, #8]
 8008086:	f1b8 0f00 	cmp.w	r8, #0
 800808a:	dd9c      	ble.n	8007fc6 <__sflush_r+0x1a>
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008090:	4643      	mov	r3, r8
 8008092:	463a      	mov	r2, r7
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	2800      	cmp	r0, #0
 800809a:	dc06      	bgt.n	80080aa <__sflush_r+0xfe>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e78e      	b.n	8007fc8 <__sflush_r+0x1c>
 80080aa:	4407      	add	r7, r0
 80080ac:	eba8 0800 	sub.w	r8, r8, r0
 80080b0:	e7e9      	b.n	8008086 <__sflush_r+0xda>
 80080b2:	bf00      	nop
 80080b4:	dfbffffe 	.word	0xdfbffffe

080080b8 <_fflush_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	690b      	ldr	r3, [r1, #16]
 80080bc:	4605      	mov	r5, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b913      	cbnz	r3, 80080c8 <_fflush_r+0x10>
 80080c2:	2500      	movs	r5, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	b118      	cbz	r0, 80080d2 <_fflush_r+0x1a>
 80080ca:	6a03      	ldr	r3, [r0, #32]
 80080cc:	b90b      	cbnz	r3, 80080d2 <_fflush_r+0x1a>
 80080ce:	f7fc ff43 	bl	8004f58 <__sinit>
 80080d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f3      	beq.n	80080c2 <_fflush_r+0xa>
 80080da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080dc:	07d0      	lsls	r0, r2, #31
 80080de:	d404      	bmi.n	80080ea <_fflush_r+0x32>
 80080e0:	0599      	lsls	r1, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_fflush_r+0x32>
 80080e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e6:	f7fd f9fe 	bl	80054e6 <__retarget_lock_acquire_recursive>
 80080ea:	4628      	mov	r0, r5
 80080ec:	4621      	mov	r1, r4
 80080ee:	f7ff ff5d 	bl	8007fac <__sflush_r>
 80080f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f4:	07da      	lsls	r2, r3, #31
 80080f6:	4605      	mov	r5, r0
 80080f8:	d4e4      	bmi.n	80080c4 <_fflush_r+0xc>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	059b      	lsls	r3, r3, #22
 80080fe:	d4e1      	bmi.n	80080c4 <_fflush_r+0xc>
 8008100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008102:	f7fd f9f1 	bl	80054e8 <__retarget_lock_release_recursive>
 8008106:	e7dd      	b.n	80080c4 <_fflush_r+0xc>

08008108 <__swhatbuf_r>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008110:	2900      	cmp	r1, #0
 8008112:	b096      	sub	sp, #88	; 0x58
 8008114:	4615      	mov	r5, r2
 8008116:	461e      	mov	r6, r3
 8008118:	da0d      	bge.n	8008136 <__swhatbuf_r+0x2e>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	bf0c      	ite	eq
 8008126:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800812a:	2340      	movne	r3, #64	; 0x40
 800812c:	2000      	movs	r0, #0
 800812e:	6031      	str	r1, [r6, #0]
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	b016      	add	sp, #88	; 0x58
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	466a      	mov	r2, sp
 8008138:	f000 f874 	bl	8008224 <_fstat_r>
 800813c:	2800      	cmp	r0, #0
 800813e:	dbec      	blt.n	800811a <__swhatbuf_r+0x12>
 8008140:	9901      	ldr	r1, [sp, #4]
 8008142:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008146:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800814a:	4259      	negs	r1, r3
 800814c:	4159      	adcs	r1, r3
 800814e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008152:	e7eb      	b.n	800812c <__swhatbuf_r+0x24>

08008154 <__smakebuf_r>:
 8008154:	898b      	ldrh	r3, [r1, #12]
 8008156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008158:	079d      	lsls	r5, r3, #30
 800815a:	4606      	mov	r6, r0
 800815c:	460c      	mov	r4, r1
 800815e:	d507      	bpl.n	8008170 <__smakebuf_r+0x1c>
 8008160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	2301      	movs	r3, #1
 800816a:	6163      	str	r3, [r4, #20]
 800816c:	b002      	add	sp, #8
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	ab01      	add	r3, sp, #4
 8008172:	466a      	mov	r2, sp
 8008174:	f7ff ffc8 	bl	8008108 <__swhatbuf_r>
 8008178:	9900      	ldr	r1, [sp, #0]
 800817a:	4605      	mov	r5, r0
 800817c:	4630      	mov	r0, r6
 800817e:	f7fe f8a9 	bl	80062d4 <_malloc_r>
 8008182:	b948      	cbnz	r0, 8008198 <__smakebuf_r+0x44>
 8008184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008188:	059a      	lsls	r2, r3, #22
 800818a:	d4ef      	bmi.n	800816c <__smakebuf_r+0x18>
 800818c:	f023 0303 	bic.w	r3, r3, #3
 8008190:	f043 0302 	orr.w	r3, r3, #2
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	e7e3      	b.n	8008160 <__smakebuf_r+0xc>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	6020      	str	r0, [r4, #0]
 800819c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	9b00      	ldr	r3, [sp, #0]
 80081a4:	6163      	str	r3, [r4, #20]
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	6120      	str	r0, [r4, #16]
 80081aa:	b15b      	cbz	r3, 80081c4 <__smakebuf_r+0x70>
 80081ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f849 	bl	8008248 <_isatty_r>
 80081b6:	b128      	cbz	r0, 80081c4 <__smakebuf_r+0x70>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f023 0303 	bic.w	r3, r3, #3
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	431d      	orrs	r5, r3
 80081c8:	81a5      	strh	r5, [r4, #12]
 80081ca:	e7cf      	b.n	800816c <__smakebuf_r+0x18>

080081cc <memmove>:
 80081cc:	4288      	cmp	r0, r1
 80081ce:	b510      	push	{r4, lr}
 80081d0:	eb01 0402 	add.w	r4, r1, r2
 80081d4:	d902      	bls.n	80081dc <memmove+0x10>
 80081d6:	4284      	cmp	r4, r0
 80081d8:	4623      	mov	r3, r4
 80081da:	d807      	bhi.n	80081ec <memmove+0x20>
 80081dc:	1e43      	subs	r3, r0, #1
 80081de:	42a1      	cmp	r1, r4
 80081e0:	d008      	beq.n	80081f4 <memmove+0x28>
 80081e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ea:	e7f8      	b.n	80081de <memmove+0x12>
 80081ec:	4402      	add	r2, r0
 80081ee:	4601      	mov	r1, r0
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d100      	bne.n	80081f6 <memmove+0x2a>
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fe:	e7f7      	b.n	80081f0 <memmove+0x24>

08008200 <strncmp>:
 8008200:	b510      	push	{r4, lr}
 8008202:	b16a      	cbz	r2, 8008220 <strncmp+0x20>
 8008204:	3901      	subs	r1, #1
 8008206:	1884      	adds	r4, r0, r2
 8008208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008210:	429a      	cmp	r2, r3
 8008212:	d103      	bne.n	800821c <strncmp+0x1c>
 8008214:	42a0      	cmp	r0, r4
 8008216:	d001      	beq.n	800821c <strncmp+0x1c>
 8008218:	2a00      	cmp	r2, #0
 800821a:	d1f5      	bne.n	8008208 <strncmp+0x8>
 800821c:	1ad0      	subs	r0, r2, r3
 800821e:	bd10      	pop	{r4, pc}
 8008220:	4610      	mov	r0, r2
 8008222:	e7fc      	b.n	800821e <strncmp+0x1e>

08008224 <_fstat_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d07      	ldr	r5, [pc, #28]	; (8008244 <_fstat_r+0x20>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	f7f9 fb66 	bl	8001902 <_fstat>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d102      	bne.n	8008240 <_fstat_r+0x1c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	b103      	cbz	r3, 8008240 <_fstat_r+0x1c>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	2000041c 	.word	0x2000041c

08008248 <_isatty_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_isatty_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f9 fb65 	bl	8001922 <_isatty>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_isatty_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_isatty_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	2000041c 	.word	0x2000041c

08008268 <_sbrk_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	; (8008284 <_sbrk_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7f9 fb6e 	bl	8001954 <_sbrk>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_sbrk_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_sbrk_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	2000041c 	.word	0x2000041c

08008288 <memcpy>:
 8008288:	440a      	add	r2, r1
 800828a:	4291      	cmp	r1, r2
 800828c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008290:	d100      	bne.n	8008294 <memcpy+0xc>
 8008292:	4770      	bx	lr
 8008294:	b510      	push	{r4, lr}
 8008296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800829e:	4291      	cmp	r1, r2
 80082a0:	d1f9      	bne.n	8008296 <memcpy+0xe>
 80082a2:	bd10      	pop	{r4, pc}
 80082a4:	0000      	movs	r0, r0
	...

080082a8 <nan>:
 80082a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082b0 <nan+0x8>
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	00000000 	.word	0x00000000
 80082b4:	7ff80000 	.word	0x7ff80000

080082b8 <__assert_func>:
 80082b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ba:	4614      	mov	r4, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <__assert_func+0x2c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4605      	mov	r5, r0
 80082c4:	68d8      	ldr	r0, [r3, #12]
 80082c6:	b14c      	cbz	r4, 80082dc <__assert_func+0x24>
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <__assert_func+0x30>)
 80082ca:	9100      	str	r1, [sp, #0]
 80082cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082d0:	4906      	ldr	r1, [pc, #24]	; (80082ec <__assert_func+0x34>)
 80082d2:	462b      	mov	r3, r5
 80082d4:	f000 fbca 	bl	8008a6c <fiprintf>
 80082d8:	f000 fbda 	bl	8008a90 <abort>
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <__assert_func+0x38>)
 80082de:	461c      	mov	r4, r3
 80082e0:	e7f3      	b.n	80082ca <__assert_func+0x12>
 80082e2:	bf00      	nop
 80082e4:	20000064 	.word	0x20000064
 80082e8:	08008f6a 	.word	0x08008f6a
 80082ec:	08008f77 	.word	0x08008f77
 80082f0:	08008fa5 	.word	0x08008fa5

080082f4 <_calloc_r>:
 80082f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082f6:	fba1 2402 	umull	r2, r4, r1, r2
 80082fa:	b94c      	cbnz	r4, 8008310 <_calloc_r+0x1c>
 80082fc:	4611      	mov	r1, r2
 80082fe:	9201      	str	r2, [sp, #4]
 8008300:	f7fd ffe8 	bl	80062d4 <_malloc_r>
 8008304:	9a01      	ldr	r2, [sp, #4]
 8008306:	4605      	mov	r5, r0
 8008308:	b930      	cbnz	r0, 8008318 <_calloc_r+0x24>
 800830a:	4628      	mov	r0, r5
 800830c:	b003      	add	sp, #12
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	220c      	movs	r2, #12
 8008312:	6002      	str	r2, [r0, #0]
 8008314:	2500      	movs	r5, #0
 8008316:	e7f8      	b.n	800830a <_calloc_r+0x16>
 8008318:	4621      	mov	r1, r4
 800831a:	f7fd f867 	bl	80053ec <memset>
 800831e:	e7f4      	b.n	800830a <_calloc_r+0x16>

08008320 <rshift>:
 8008320:	6903      	ldr	r3, [r0, #16]
 8008322:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800832a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800832e:	f100 0414 	add.w	r4, r0, #20
 8008332:	dd45      	ble.n	80083c0 <rshift+0xa0>
 8008334:	f011 011f 	ands.w	r1, r1, #31
 8008338:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800833c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008340:	d10c      	bne.n	800835c <rshift+0x3c>
 8008342:	f100 0710 	add.w	r7, r0, #16
 8008346:	4629      	mov	r1, r5
 8008348:	42b1      	cmp	r1, r6
 800834a:	d334      	bcc.n	80083b6 <rshift+0x96>
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	1eea      	subs	r2, r5, #3
 8008352:	4296      	cmp	r6, r2
 8008354:	bf38      	it	cc
 8008356:	2300      	movcc	r3, #0
 8008358:	4423      	add	r3, r4
 800835a:	e015      	b.n	8008388 <rshift+0x68>
 800835c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008360:	f1c1 0820 	rsb	r8, r1, #32
 8008364:	40cf      	lsrs	r7, r1
 8008366:	f105 0e04 	add.w	lr, r5, #4
 800836a:	46a1      	mov	r9, r4
 800836c:	4576      	cmp	r6, lr
 800836e:	46f4      	mov	ip, lr
 8008370:	d815      	bhi.n	800839e <rshift+0x7e>
 8008372:	1a9a      	subs	r2, r3, r2
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	3a04      	subs	r2, #4
 8008378:	3501      	adds	r5, #1
 800837a:	42ae      	cmp	r6, r5
 800837c:	bf38      	it	cc
 800837e:	2200      	movcc	r2, #0
 8008380:	18a3      	adds	r3, r4, r2
 8008382:	50a7      	str	r7, [r4, r2]
 8008384:	b107      	cbz	r7, 8008388 <rshift+0x68>
 8008386:	3304      	adds	r3, #4
 8008388:	1b1a      	subs	r2, r3, r4
 800838a:	42a3      	cmp	r3, r4
 800838c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008390:	bf08      	it	eq
 8008392:	2300      	moveq	r3, #0
 8008394:	6102      	str	r2, [r0, #16]
 8008396:	bf08      	it	eq
 8008398:	6143      	streq	r3, [r0, #20]
 800839a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800839e:	f8dc c000 	ldr.w	ip, [ip]
 80083a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80083a6:	ea4c 0707 	orr.w	r7, ip, r7
 80083aa:	f849 7b04 	str.w	r7, [r9], #4
 80083ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083b2:	40cf      	lsrs	r7, r1
 80083b4:	e7da      	b.n	800836c <rshift+0x4c>
 80083b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80083ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80083be:	e7c3      	b.n	8008348 <rshift+0x28>
 80083c0:	4623      	mov	r3, r4
 80083c2:	e7e1      	b.n	8008388 <rshift+0x68>

080083c4 <__hexdig_fun>:
 80083c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d802      	bhi.n	80083d2 <__hexdig_fun+0xe>
 80083cc:	3820      	subs	r0, #32
 80083ce:	b2c0      	uxtb	r0, r0
 80083d0:	4770      	bx	lr
 80083d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d801      	bhi.n	80083de <__hexdig_fun+0x1a>
 80083da:	3847      	subs	r0, #71	; 0x47
 80083dc:	e7f7      	b.n	80083ce <__hexdig_fun+0xa>
 80083de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d801      	bhi.n	80083ea <__hexdig_fun+0x26>
 80083e6:	3827      	subs	r0, #39	; 0x27
 80083e8:	e7f1      	b.n	80083ce <__hexdig_fun+0xa>
 80083ea:	2000      	movs	r0, #0
 80083ec:	4770      	bx	lr
	...

080083f0 <__gethex>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	4617      	mov	r7, r2
 80083f6:	680a      	ldr	r2, [r1, #0]
 80083f8:	b085      	sub	sp, #20
 80083fa:	f102 0b02 	add.w	fp, r2, #2
 80083fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008402:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008406:	4681      	mov	r9, r0
 8008408:	468a      	mov	sl, r1
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	32fe      	adds	r2, #254	; 0xfe
 800840e:	eb02 030b 	add.w	r3, r2, fp
 8008412:	46d8      	mov	r8, fp
 8008414:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	2830      	cmp	r0, #48	; 0x30
 800841c:	d0f7      	beq.n	800840e <__gethex+0x1e>
 800841e:	f7ff ffd1 	bl	80083c4 <__hexdig_fun>
 8008422:	4604      	mov	r4, r0
 8008424:	2800      	cmp	r0, #0
 8008426:	d138      	bne.n	800849a <__gethex+0xaa>
 8008428:	49a7      	ldr	r1, [pc, #668]	; (80086c8 <__gethex+0x2d8>)
 800842a:	2201      	movs	r2, #1
 800842c:	4640      	mov	r0, r8
 800842e:	f7ff fee7 	bl	8008200 <strncmp>
 8008432:	4606      	mov	r6, r0
 8008434:	2800      	cmp	r0, #0
 8008436:	d169      	bne.n	800850c <__gethex+0x11c>
 8008438:	f898 0001 	ldrb.w	r0, [r8, #1]
 800843c:	465d      	mov	r5, fp
 800843e:	f7ff ffc1 	bl	80083c4 <__hexdig_fun>
 8008442:	2800      	cmp	r0, #0
 8008444:	d064      	beq.n	8008510 <__gethex+0x120>
 8008446:	465a      	mov	r2, fp
 8008448:	7810      	ldrb	r0, [r2, #0]
 800844a:	2830      	cmp	r0, #48	; 0x30
 800844c:	4690      	mov	r8, r2
 800844e:	f102 0201 	add.w	r2, r2, #1
 8008452:	d0f9      	beq.n	8008448 <__gethex+0x58>
 8008454:	f7ff ffb6 	bl	80083c4 <__hexdig_fun>
 8008458:	2301      	movs	r3, #1
 800845a:	fab0 f480 	clz	r4, r0
 800845e:	0964      	lsrs	r4, r4, #5
 8008460:	465e      	mov	r6, fp
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	4642      	mov	r2, r8
 8008466:	4615      	mov	r5, r2
 8008468:	3201      	adds	r2, #1
 800846a:	7828      	ldrb	r0, [r5, #0]
 800846c:	f7ff ffaa 	bl	80083c4 <__hexdig_fun>
 8008470:	2800      	cmp	r0, #0
 8008472:	d1f8      	bne.n	8008466 <__gethex+0x76>
 8008474:	4994      	ldr	r1, [pc, #592]	; (80086c8 <__gethex+0x2d8>)
 8008476:	2201      	movs	r2, #1
 8008478:	4628      	mov	r0, r5
 800847a:	f7ff fec1 	bl	8008200 <strncmp>
 800847e:	b978      	cbnz	r0, 80084a0 <__gethex+0xb0>
 8008480:	b946      	cbnz	r6, 8008494 <__gethex+0xa4>
 8008482:	1c6e      	adds	r6, r5, #1
 8008484:	4632      	mov	r2, r6
 8008486:	4615      	mov	r5, r2
 8008488:	3201      	adds	r2, #1
 800848a:	7828      	ldrb	r0, [r5, #0]
 800848c:	f7ff ff9a 	bl	80083c4 <__hexdig_fun>
 8008490:	2800      	cmp	r0, #0
 8008492:	d1f8      	bne.n	8008486 <__gethex+0x96>
 8008494:	1b73      	subs	r3, r6, r5
 8008496:	009e      	lsls	r6, r3, #2
 8008498:	e004      	b.n	80084a4 <__gethex+0xb4>
 800849a:	2400      	movs	r4, #0
 800849c:	4626      	mov	r6, r4
 800849e:	e7e1      	b.n	8008464 <__gethex+0x74>
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	d1f7      	bne.n	8008494 <__gethex+0xa4>
 80084a4:	782b      	ldrb	r3, [r5, #0]
 80084a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084aa:	2b50      	cmp	r3, #80	; 0x50
 80084ac:	d13d      	bne.n	800852a <__gethex+0x13a>
 80084ae:	786b      	ldrb	r3, [r5, #1]
 80084b0:	2b2b      	cmp	r3, #43	; 0x2b
 80084b2:	d02f      	beq.n	8008514 <__gethex+0x124>
 80084b4:	2b2d      	cmp	r3, #45	; 0x2d
 80084b6:	d031      	beq.n	800851c <__gethex+0x12c>
 80084b8:	1c69      	adds	r1, r5, #1
 80084ba:	f04f 0b00 	mov.w	fp, #0
 80084be:	7808      	ldrb	r0, [r1, #0]
 80084c0:	f7ff ff80 	bl	80083c4 <__hexdig_fun>
 80084c4:	1e42      	subs	r2, r0, #1
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	2a18      	cmp	r2, #24
 80084ca:	d82e      	bhi.n	800852a <__gethex+0x13a>
 80084cc:	f1a0 0210 	sub.w	r2, r0, #16
 80084d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084d4:	f7ff ff76 	bl	80083c4 <__hexdig_fun>
 80084d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80084dc:	fa5f fc8c 	uxtb.w	ip, ip
 80084e0:	f1bc 0f18 	cmp.w	ip, #24
 80084e4:	d91d      	bls.n	8008522 <__gethex+0x132>
 80084e6:	f1bb 0f00 	cmp.w	fp, #0
 80084ea:	d000      	beq.n	80084ee <__gethex+0xfe>
 80084ec:	4252      	negs	r2, r2
 80084ee:	4416      	add	r6, r2
 80084f0:	f8ca 1000 	str.w	r1, [sl]
 80084f4:	b1dc      	cbz	r4, 800852e <__gethex+0x13e>
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf14      	ite	ne
 80084fc:	f04f 0800 	movne.w	r8, #0
 8008500:	f04f 0806 	moveq.w	r8, #6
 8008504:	4640      	mov	r0, r8
 8008506:	b005      	add	sp, #20
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850c:	4645      	mov	r5, r8
 800850e:	4626      	mov	r6, r4
 8008510:	2401      	movs	r4, #1
 8008512:	e7c7      	b.n	80084a4 <__gethex+0xb4>
 8008514:	f04f 0b00 	mov.w	fp, #0
 8008518:	1ca9      	adds	r1, r5, #2
 800851a:	e7d0      	b.n	80084be <__gethex+0xce>
 800851c:	f04f 0b01 	mov.w	fp, #1
 8008520:	e7fa      	b.n	8008518 <__gethex+0x128>
 8008522:	230a      	movs	r3, #10
 8008524:	fb03 0002 	mla	r0, r3, r2, r0
 8008528:	e7d0      	b.n	80084cc <__gethex+0xdc>
 800852a:	4629      	mov	r1, r5
 800852c:	e7e0      	b.n	80084f0 <__gethex+0x100>
 800852e:	eba5 0308 	sub.w	r3, r5, r8
 8008532:	3b01      	subs	r3, #1
 8008534:	4621      	mov	r1, r4
 8008536:	2b07      	cmp	r3, #7
 8008538:	dc0a      	bgt.n	8008550 <__gethex+0x160>
 800853a:	4648      	mov	r0, r9
 800853c:	f7fd ff56 	bl	80063ec <_Balloc>
 8008540:	4604      	mov	r4, r0
 8008542:	b940      	cbnz	r0, 8008556 <__gethex+0x166>
 8008544:	4b61      	ldr	r3, [pc, #388]	; (80086cc <__gethex+0x2dc>)
 8008546:	4602      	mov	r2, r0
 8008548:	21e4      	movs	r1, #228	; 0xe4
 800854a:	4861      	ldr	r0, [pc, #388]	; (80086d0 <__gethex+0x2e0>)
 800854c:	f7ff feb4 	bl	80082b8 <__assert_func>
 8008550:	3101      	adds	r1, #1
 8008552:	105b      	asrs	r3, r3, #1
 8008554:	e7ef      	b.n	8008536 <__gethex+0x146>
 8008556:	f100 0a14 	add.w	sl, r0, #20
 800855a:	2300      	movs	r3, #0
 800855c:	495a      	ldr	r1, [pc, #360]	; (80086c8 <__gethex+0x2d8>)
 800855e:	f8cd a004 	str.w	sl, [sp, #4]
 8008562:	469b      	mov	fp, r3
 8008564:	45a8      	cmp	r8, r5
 8008566:	d342      	bcc.n	80085ee <__gethex+0x1fe>
 8008568:	9801      	ldr	r0, [sp, #4]
 800856a:	f840 bb04 	str.w	fp, [r0], #4
 800856e:	eba0 000a 	sub.w	r0, r0, sl
 8008572:	1080      	asrs	r0, r0, #2
 8008574:	6120      	str	r0, [r4, #16]
 8008576:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800857a:	4658      	mov	r0, fp
 800857c:	f7fe f828 	bl	80065d0 <__hi0bits>
 8008580:	683d      	ldr	r5, [r7, #0]
 8008582:	eba8 0000 	sub.w	r0, r8, r0
 8008586:	42a8      	cmp	r0, r5
 8008588:	dd59      	ble.n	800863e <__gethex+0x24e>
 800858a:	eba0 0805 	sub.w	r8, r0, r5
 800858e:	4641      	mov	r1, r8
 8008590:	4620      	mov	r0, r4
 8008592:	f7fe fbb7 	bl	8006d04 <__any_on>
 8008596:	4683      	mov	fp, r0
 8008598:	b1b8      	cbz	r0, 80085ca <__gethex+0x1da>
 800859a:	f108 33ff 	add.w	r3, r8, #4294967295
 800859e:	1159      	asrs	r1, r3, #5
 80085a0:	f003 021f 	and.w	r2, r3, #31
 80085a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085a8:	f04f 0b01 	mov.w	fp, #1
 80085ac:	fa0b f202 	lsl.w	r2, fp, r2
 80085b0:	420a      	tst	r2, r1
 80085b2:	d00a      	beq.n	80085ca <__gethex+0x1da>
 80085b4:	455b      	cmp	r3, fp
 80085b6:	dd06      	ble.n	80085c6 <__gethex+0x1d6>
 80085b8:	f1a8 0102 	sub.w	r1, r8, #2
 80085bc:	4620      	mov	r0, r4
 80085be:	f7fe fba1 	bl	8006d04 <__any_on>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d138      	bne.n	8008638 <__gethex+0x248>
 80085c6:	f04f 0b02 	mov.w	fp, #2
 80085ca:	4641      	mov	r1, r8
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fea7 	bl	8008320 <rshift>
 80085d2:	4446      	add	r6, r8
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	42b3      	cmp	r3, r6
 80085d8:	da41      	bge.n	800865e <__gethex+0x26e>
 80085da:	4621      	mov	r1, r4
 80085dc:	4648      	mov	r0, r9
 80085de:	f7fd ff45 	bl	800646c <_Bfree>
 80085e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085e4:	2300      	movs	r3, #0
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80085ec:	e78a      	b.n	8008504 <__gethex+0x114>
 80085ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80085f2:	2a2e      	cmp	r2, #46	; 0x2e
 80085f4:	d014      	beq.n	8008620 <__gethex+0x230>
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d106      	bne.n	8008608 <__gethex+0x218>
 80085fa:	9b01      	ldr	r3, [sp, #4]
 80085fc:	f843 bb04 	str.w	fp, [r3], #4
 8008600:	f04f 0b00 	mov.w	fp, #0
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	465b      	mov	r3, fp
 8008608:	7828      	ldrb	r0, [r5, #0]
 800860a:	9303      	str	r3, [sp, #12]
 800860c:	f7ff feda 	bl	80083c4 <__hexdig_fun>
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	f000 000f 	and.w	r0, r0, #15
 8008616:	4098      	lsls	r0, r3
 8008618:	ea4b 0b00 	orr.w	fp, fp, r0
 800861c:	3304      	adds	r3, #4
 800861e:	e7a1      	b.n	8008564 <__gethex+0x174>
 8008620:	45a8      	cmp	r8, r5
 8008622:	d8e8      	bhi.n	80085f6 <__gethex+0x206>
 8008624:	2201      	movs	r2, #1
 8008626:	4628      	mov	r0, r5
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	f7ff fde9 	bl	8008200 <strncmp>
 800862e:	4926      	ldr	r1, [pc, #152]	; (80086c8 <__gethex+0x2d8>)
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	2800      	cmp	r0, #0
 8008634:	d1df      	bne.n	80085f6 <__gethex+0x206>
 8008636:	e795      	b.n	8008564 <__gethex+0x174>
 8008638:	f04f 0b03 	mov.w	fp, #3
 800863c:	e7c5      	b.n	80085ca <__gethex+0x1da>
 800863e:	da0b      	bge.n	8008658 <__gethex+0x268>
 8008640:	eba5 0800 	sub.w	r8, r5, r0
 8008644:	4621      	mov	r1, r4
 8008646:	4642      	mov	r2, r8
 8008648:	4648      	mov	r0, r9
 800864a:	f7fe f929 	bl	80068a0 <__lshift>
 800864e:	eba6 0608 	sub.w	r6, r6, r8
 8008652:	4604      	mov	r4, r0
 8008654:	f100 0a14 	add.w	sl, r0, #20
 8008658:	f04f 0b00 	mov.w	fp, #0
 800865c:	e7ba      	b.n	80085d4 <__gethex+0x1e4>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	42b3      	cmp	r3, r6
 8008662:	dd73      	ble.n	800874c <__gethex+0x35c>
 8008664:	1b9e      	subs	r6, r3, r6
 8008666:	42b5      	cmp	r5, r6
 8008668:	dc34      	bgt.n	80086d4 <__gethex+0x2e4>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d023      	beq.n	80086b8 <__gethex+0x2c8>
 8008670:	2b03      	cmp	r3, #3
 8008672:	d025      	beq.n	80086c0 <__gethex+0x2d0>
 8008674:	2b01      	cmp	r3, #1
 8008676:	d115      	bne.n	80086a4 <__gethex+0x2b4>
 8008678:	42b5      	cmp	r5, r6
 800867a:	d113      	bne.n	80086a4 <__gethex+0x2b4>
 800867c:	2d01      	cmp	r5, #1
 800867e:	d10b      	bne.n	8008698 <__gethex+0x2a8>
 8008680:	9a02      	ldr	r2, [sp, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	2301      	movs	r3, #1
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	f8ca 3000 	str.w	r3, [sl]
 800868e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008690:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008694:	601c      	str	r4, [r3, #0]
 8008696:	e735      	b.n	8008504 <__gethex+0x114>
 8008698:	1e69      	subs	r1, r5, #1
 800869a:	4620      	mov	r0, r4
 800869c:	f7fe fb32 	bl	8006d04 <__any_on>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d1ed      	bne.n	8008680 <__gethex+0x290>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4648      	mov	r0, r9
 80086a8:	f7fd fee0 	bl	800646c <_Bfree>
 80086ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ae:	2300      	movs	r3, #0
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80086b6:	e725      	b.n	8008504 <__gethex+0x114>
 80086b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1f2      	bne.n	80086a4 <__gethex+0x2b4>
 80086be:	e7df      	b.n	8008680 <__gethex+0x290>
 80086c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1dc      	bne.n	8008680 <__gethex+0x290>
 80086c6:	e7ed      	b.n	80086a4 <__gethex+0x2b4>
 80086c8:	08008dfc 	.word	0x08008dfc
 80086cc:	08008c95 	.word	0x08008c95
 80086d0:	08008fa6 	.word	0x08008fa6
 80086d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80086d8:	f1bb 0f00 	cmp.w	fp, #0
 80086dc:	d133      	bne.n	8008746 <__gethex+0x356>
 80086de:	f1b8 0f00 	cmp.w	r8, #0
 80086e2:	d004      	beq.n	80086ee <__gethex+0x2fe>
 80086e4:	4641      	mov	r1, r8
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7fe fb0c 	bl	8006d04 <__any_on>
 80086ec:	4683      	mov	fp, r0
 80086ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 80086f2:	2301      	movs	r3, #1
 80086f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086f8:	f008 081f 	and.w	r8, r8, #31
 80086fc:	fa03 f308 	lsl.w	r3, r3, r8
 8008700:	4213      	tst	r3, r2
 8008702:	4631      	mov	r1, r6
 8008704:	4620      	mov	r0, r4
 8008706:	bf18      	it	ne
 8008708:	f04b 0b02 	orrne.w	fp, fp, #2
 800870c:	1bad      	subs	r5, r5, r6
 800870e:	f7ff fe07 	bl	8008320 <rshift>
 8008712:	687e      	ldr	r6, [r7, #4]
 8008714:	f04f 0802 	mov.w	r8, #2
 8008718:	f1bb 0f00 	cmp.w	fp, #0
 800871c:	d04a      	beq.n	80087b4 <__gethex+0x3c4>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d016      	beq.n	8008752 <__gethex+0x362>
 8008724:	2b03      	cmp	r3, #3
 8008726:	d018      	beq.n	800875a <__gethex+0x36a>
 8008728:	2b01      	cmp	r3, #1
 800872a:	d109      	bne.n	8008740 <__gethex+0x350>
 800872c:	f01b 0f02 	tst.w	fp, #2
 8008730:	d006      	beq.n	8008740 <__gethex+0x350>
 8008732:	f8da 3000 	ldr.w	r3, [sl]
 8008736:	ea4b 0b03 	orr.w	fp, fp, r3
 800873a:	f01b 0f01 	tst.w	fp, #1
 800873e:	d10f      	bne.n	8008760 <__gethex+0x370>
 8008740:	f048 0810 	orr.w	r8, r8, #16
 8008744:	e036      	b.n	80087b4 <__gethex+0x3c4>
 8008746:	f04f 0b01 	mov.w	fp, #1
 800874a:	e7d0      	b.n	80086ee <__gethex+0x2fe>
 800874c:	f04f 0801 	mov.w	r8, #1
 8008750:	e7e2      	b.n	8008718 <__gethex+0x328>
 8008752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008754:	f1c3 0301 	rsb	r3, r3, #1
 8008758:	930f      	str	r3, [sp, #60]	; 0x3c
 800875a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0ef      	beq.n	8008740 <__gethex+0x350>
 8008760:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008764:	f104 0214 	add.w	r2, r4, #20
 8008768:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008772:	2300      	movs	r3, #0
 8008774:	4694      	mov	ip, r2
 8008776:	f852 1b04 	ldr.w	r1, [r2], #4
 800877a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800877e:	d01e      	beq.n	80087be <__gethex+0x3ce>
 8008780:	3101      	adds	r1, #1
 8008782:	f8cc 1000 	str.w	r1, [ip]
 8008786:	f1b8 0f02 	cmp.w	r8, #2
 800878a:	f104 0214 	add.w	r2, r4, #20
 800878e:	d13d      	bne.n	800880c <__gethex+0x41c>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	3b01      	subs	r3, #1
 8008794:	42ab      	cmp	r3, r5
 8008796:	d10b      	bne.n	80087b0 <__gethex+0x3c0>
 8008798:	1169      	asrs	r1, r5, #5
 800879a:	2301      	movs	r3, #1
 800879c:	f005 051f 	and.w	r5, r5, #31
 80087a0:	fa03 f505 	lsl.w	r5, r3, r5
 80087a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a8:	421d      	tst	r5, r3
 80087aa:	bf18      	it	ne
 80087ac:	f04f 0801 	movne.w	r8, #1
 80087b0:	f048 0820 	orr.w	r8, r8, #32
 80087b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b6:	601c      	str	r4, [r3, #0]
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	601e      	str	r6, [r3, #0]
 80087bc:	e6a2      	b.n	8008504 <__gethex+0x114>
 80087be:	4290      	cmp	r0, r2
 80087c0:	f842 3c04 	str.w	r3, [r2, #-4]
 80087c4:	d8d6      	bhi.n	8008774 <__gethex+0x384>
 80087c6:	68a2      	ldr	r2, [r4, #8]
 80087c8:	4593      	cmp	fp, r2
 80087ca:	db17      	blt.n	80087fc <__gethex+0x40c>
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4648      	mov	r0, r9
 80087d0:	3101      	adds	r1, #1
 80087d2:	f7fd fe0b 	bl	80063ec <_Balloc>
 80087d6:	4682      	mov	sl, r0
 80087d8:	b918      	cbnz	r0, 80087e2 <__gethex+0x3f2>
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <__gethex+0x458>)
 80087dc:	4602      	mov	r2, r0
 80087de:	2184      	movs	r1, #132	; 0x84
 80087e0:	e6b3      	b.n	800854a <__gethex+0x15a>
 80087e2:	6922      	ldr	r2, [r4, #16]
 80087e4:	3202      	adds	r2, #2
 80087e6:	f104 010c 	add.w	r1, r4, #12
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	300c      	adds	r0, #12
 80087ee:	f7ff fd4b 	bl	8008288 <memcpy>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4648      	mov	r0, r9
 80087f6:	f7fd fe39 	bl	800646c <_Bfree>
 80087fa:	4654      	mov	r4, sl
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	1c51      	adds	r1, r2, #1
 8008800:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008804:	6121      	str	r1, [r4, #16]
 8008806:	2101      	movs	r1, #1
 8008808:	6151      	str	r1, [r2, #20]
 800880a:	e7bc      	b.n	8008786 <__gethex+0x396>
 800880c:	6921      	ldr	r1, [r4, #16]
 800880e:	4559      	cmp	r1, fp
 8008810:	dd0b      	ble.n	800882a <__gethex+0x43a>
 8008812:	2101      	movs	r1, #1
 8008814:	4620      	mov	r0, r4
 8008816:	f7ff fd83 	bl	8008320 <rshift>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	3601      	adds	r6, #1
 800881e:	42b3      	cmp	r3, r6
 8008820:	f6ff aedb 	blt.w	80085da <__gethex+0x1ea>
 8008824:	f04f 0801 	mov.w	r8, #1
 8008828:	e7c2      	b.n	80087b0 <__gethex+0x3c0>
 800882a:	f015 051f 	ands.w	r5, r5, #31
 800882e:	d0f9      	beq.n	8008824 <__gethex+0x434>
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	441a      	add	r2, r3
 8008834:	f1c5 0520 	rsb	r5, r5, #32
 8008838:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800883c:	f7fd fec8 	bl	80065d0 <__hi0bits>
 8008840:	42a8      	cmp	r0, r5
 8008842:	dbe6      	blt.n	8008812 <__gethex+0x422>
 8008844:	e7ee      	b.n	8008824 <__gethex+0x434>
 8008846:	bf00      	nop
 8008848:	08008c95 	.word	0x08008c95

0800884c <L_shift>:
 800884c:	f1c2 0208 	rsb	r2, r2, #8
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	b570      	push	{r4, r5, r6, lr}
 8008854:	f1c2 0620 	rsb	r6, r2, #32
 8008858:	6843      	ldr	r3, [r0, #4]
 800885a:	6804      	ldr	r4, [r0, #0]
 800885c:	fa03 f506 	lsl.w	r5, r3, r6
 8008860:	432c      	orrs	r4, r5
 8008862:	40d3      	lsrs	r3, r2
 8008864:	6004      	str	r4, [r0, #0]
 8008866:	f840 3f04 	str.w	r3, [r0, #4]!
 800886a:	4288      	cmp	r0, r1
 800886c:	d3f4      	bcc.n	8008858 <L_shift+0xc>
 800886e:	bd70      	pop	{r4, r5, r6, pc}

08008870 <__match>:
 8008870:	b530      	push	{r4, r5, lr}
 8008872:	6803      	ldr	r3, [r0, #0]
 8008874:	3301      	adds	r3, #1
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	b914      	cbnz	r4, 8008882 <__match+0x12>
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	2001      	movs	r0, #1
 8008880:	bd30      	pop	{r4, r5, pc}
 8008882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008886:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800888a:	2d19      	cmp	r5, #25
 800888c:	bf98      	it	ls
 800888e:	3220      	addls	r2, #32
 8008890:	42a2      	cmp	r2, r4
 8008892:	d0f0      	beq.n	8008876 <__match+0x6>
 8008894:	2000      	movs	r0, #0
 8008896:	e7f3      	b.n	8008880 <__match+0x10>

08008898 <__hexnan>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	680b      	ldr	r3, [r1, #0]
 800889e:	6801      	ldr	r1, [r0, #0]
 80088a0:	115e      	asrs	r6, r3, #5
 80088a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088a6:	f013 031f 	ands.w	r3, r3, #31
 80088aa:	b087      	sub	sp, #28
 80088ac:	bf18      	it	ne
 80088ae:	3604      	addne	r6, #4
 80088b0:	2500      	movs	r5, #0
 80088b2:	1f37      	subs	r7, r6, #4
 80088b4:	4682      	mov	sl, r0
 80088b6:	4690      	mov	r8, r2
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80088be:	46b9      	mov	r9, r7
 80088c0:	463c      	mov	r4, r7
 80088c2:	9502      	str	r5, [sp, #8]
 80088c4:	46ab      	mov	fp, r5
 80088c6:	784a      	ldrb	r2, [r1, #1]
 80088c8:	1c4b      	adds	r3, r1, #1
 80088ca:	9303      	str	r3, [sp, #12]
 80088cc:	b342      	cbz	r2, 8008920 <__hexnan+0x88>
 80088ce:	4610      	mov	r0, r2
 80088d0:	9105      	str	r1, [sp, #20]
 80088d2:	9204      	str	r2, [sp, #16]
 80088d4:	f7ff fd76 	bl	80083c4 <__hexdig_fun>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d14f      	bne.n	800897c <__hexnan+0xe4>
 80088dc:	9a04      	ldr	r2, [sp, #16]
 80088de:	9905      	ldr	r1, [sp, #20]
 80088e0:	2a20      	cmp	r2, #32
 80088e2:	d818      	bhi.n	8008916 <__hexnan+0x7e>
 80088e4:	9b02      	ldr	r3, [sp, #8]
 80088e6:	459b      	cmp	fp, r3
 80088e8:	dd13      	ble.n	8008912 <__hexnan+0x7a>
 80088ea:	454c      	cmp	r4, r9
 80088ec:	d206      	bcs.n	80088fc <__hexnan+0x64>
 80088ee:	2d07      	cmp	r5, #7
 80088f0:	dc04      	bgt.n	80088fc <__hexnan+0x64>
 80088f2:	462a      	mov	r2, r5
 80088f4:	4649      	mov	r1, r9
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff ffa8 	bl	800884c <L_shift>
 80088fc:	4544      	cmp	r4, r8
 80088fe:	d950      	bls.n	80089a2 <__hexnan+0x10a>
 8008900:	2300      	movs	r3, #0
 8008902:	f1a4 0904 	sub.w	r9, r4, #4
 8008906:	f844 3c04 	str.w	r3, [r4, #-4]
 800890a:	f8cd b008 	str.w	fp, [sp, #8]
 800890e:	464c      	mov	r4, r9
 8008910:	461d      	mov	r5, r3
 8008912:	9903      	ldr	r1, [sp, #12]
 8008914:	e7d7      	b.n	80088c6 <__hexnan+0x2e>
 8008916:	2a29      	cmp	r2, #41	; 0x29
 8008918:	d155      	bne.n	80089c6 <__hexnan+0x12e>
 800891a:	3102      	adds	r1, #2
 800891c:	f8ca 1000 	str.w	r1, [sl]
 8008920:	f1bb 0f00 	cmp.w	fp, #0
 8008924:	d04f      	beq.n	80089c6 <__hexnan+0x12e>
 8008926:	454c      	cmp	r4, r9
 8008928:	d206      	bcs.n	8008938 <__hexnan+0xa0>
 800892a:	2d07      	cmp	r5, #7
 800892c:	dc04      	bgt.n	8008938 <__hexnan+0xa0>
 800892e:	462a      	mov	r2, r5
 8008930:	4649      	mov	r1, r9
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff ff8a 	bl	800884c <L_shift>
 8008938:	4544      	cmp	r4, r8
 800893a:	d934      	bls.n	80089a6 <__hexnan+0x10e>
 800893c:	f1a8 0204 	sub.w	r2, r8, #4
 8008940:	4623      	mov	r3, r4
 8008942:	f853 1b04 	ldr.w	r1, [r3], #4
 8008946:	f842 1f04 	str.w	r1, [r2, #4]!
 800894a:	429f      	cmp	r7, r3
 800894c:	d2f9      	bcs.n	8008942 <__hexnan+0xaa>
 800894e:	1b3b      	subs	r3, r7, r4
 8008950:	f023 0303 	bic.w	r3, r3, #3
 8008954:	3304      	adds	r3, #4
 8008956:	3e03      	subs	r6, #3
 8008958:	3401      	adds	r4, #1
 800895a:	42a6      	cmp	r6, r4
 800895c:	bf38      	it	cc
 800895e:	2304      	movcc	r3, #4
 8008960:	4443      	add	r3, r8
 8008962:	2200      	movs	r2, #0
 8008964:	f843 2b04 	str.w	r2, [r3], #4
 8008968:	429f      	cmp	r7, r3
 800896a:	d2fb      	bcs.n	8008964 <__hexnan+0xcc>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	b91b      	cbnz	r3, 8008978 <__hexnan+0xe0>
 8008970:	4547      	cmp	r7, r8
 8008972:	d126      	bne.n	80089c2 <__hexnan+0x12a>
 8008974:	2301      	movs	r3, #1
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	2005      	movs	r0, #5
 800897a:	e025      	b.n	80089c8 <__hexnan+0x130>
 800897c:	3501      	adds	r5, #1
 800897e:	2d08      	cmp	r5, #8
 8008980:	f10b 0b01 	add.w	fp, fp, #1
 8008984:	dd06      	ble.n	8008994 <__hexnan+0xfc>
 8008986:	4544      	cmp	r4, r8
 8008988:	d9c3      	bls.n	8008912 <__hexnan+0x7a>
 800898a:	2300      	movs	r3, #0
 800898c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008990:	2501      	movs	r5, #1
 8008992:	3c04      	subs	r4, #4
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	f000 000f 	and.w	r0, r0, #15
 800899a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800899e:	6020      	str	r0, [r4, #0]
 80089a0:	e7b7      	b.n	8008912 <__hexnan+0x7a>
 80089a2:	2508      	movs	r5, #8
 80089a4:	e7b5      	b.n	8008912 <__hexnan+0x7a>
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0df      	beq.n	800896c <__hexnan+0xd4>
 80089ac:	f1c3 0320 	rsb	r3, r3, #32
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	40da      	lsrs	r2, r3
 80089b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089ba:	4013      	ands	r3, r2
 80089bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80089c0:	e7d4      	b.n	800896c <__hexnan+0xd4>
 80089c2:	3f04      	subs	r7, #4
 80089c4:	e7d2      	b.n	800896c <__hexnan+0xd4>
 80089c6:	2004      	movs	r0, #4
 80089c8:	b007      	add	sp, #28
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089ce <__ascii_mbtowc>:
 80089ce:	b082      	sub	sp, #8
 80089d0:	b901      	cbnz	r1, 80089d4 <__ascii_mbtowc+0x6>
 80089d2:	a901      	add	r1, sp, #4
 80089d4:	b142      	cbz	r2, 80089e8 <__ascii_mbtowc+0x1a>
 80089d6:	b14b      	cbz	r3, 80089ec <__ascii_mbtowc+0x1e>
 80089d8:	7813      	ldrb	r3, [r2, #0]
 80089da:	600b      	str	r3, [r1, #0]
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	1e10      	subs	r0, r2, #0
 80089e0:	bf18      	it	ne
 80089e2:	2001      	movne	r0, #1
 80089e4:	b002      	add	sp, #8
 80089e6:	4770      	bx	lr
 80089e8:	4610      	mov	r0, r2
 80089ea:	e7fb      	b.n	80089e4 <__ascii_mbtowc+0x16>
 80089ec:	f06f 0001 	mvn.w	r0, #1
 80089f0:	e7f8      	b.n	80089e4 <__ascii_mbtowc+0x16>

080089f2 <_realloc_r>:
 80089f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	4680      	mov	r8, r0
 80089f8:	4614      	mov	r4, r2
 80089fa:	460e      	mov	r6, r1
 80089fc:	b921      	cbnz	r1, 8008a08 <_realloc_r+0x16>
 80089fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a02:	4611      	mov	r1, r2
 8008a04:	f7fd bc66 	b.w	80062d4 <_malloc_r>
 8008a08:	b92a      	cbnz	r2, 8008a16 <_realloc_r+0x24>
 8008a0a:	f7fd fbef 	bl	80061ec <_free_r>
 8008a0e:	4625      	mov	r5, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a16:	f000 f842 	bl	8008a9e <_malloc_usable_size_r>
 8008a1a:	4284      	cmp	r4, r0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	d802      	bhi.n	8008a26 <_realloc_r+0x34>
 8008a20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a24:	d812      	bhi.n	8008a4c <_realloc_r+0x5a>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4640      	mov	r0, r8
 8008a2a:	f7fd fc53 	bl	80062d4 <_malloc_r>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0ed      	beq.n	8008a10 <_realloc_r+0x1e>
 8008a34:	42bc      	cmp	r4, r7
 8008a36:	4622      	mov	r2, r4
 8008a38:	4631      	mov	r1, r6
 8008a3a:	bf28      	it	cs
 8008a3c:	463a      	movcs	r2, r7
 8008a3e:	f7ff fc23 	bl	8008288 <memcpy>
 8008a42:	4631      	mov	r1, r6
 8008a44:	4640      	mov	r0, r8
 8008a46:	f7fd fbd1 	bl	80061ec <_free_r>
 8008a4a:	e7e1      	b.n	8008a10 <_realloc_r+0x1e>
 8008a4c:	4635      	mov	r5, r6
 8008a4e:	e7df      	b.n	8008a10 <_realloc_r+0x1e>

08008a50 <__ascii_wctomb>:
 8008a50:	b149      	cbz	r1, 8008a66 <__ascii_wctomb+0x16>
 8008a52:	2aff      	cmp	r2, #255	; 0xff
 8008a54:	bf85      	ittet	hi
 8008a56:	238a      	movhi	r3, #138	; 0x8a
 8008a58:	6003      	strhi	r3, [r0, #0]
 8008a5a:	700a      	strbls	r2, [r1, #0]
 8008a5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a60:	bf98      	it	ls
 8008a62:	2001      	movls	r0, #1
 8008a64:	4770      	bx	lr
 8008a66:	4608      	mov	r0, r1
 8008a68:	4770      	bx	lr
	...

08008a6c <fiprintf>:
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	b503      	push	{r0, r1, lr}
 8008a70:	4601      	mov	r1, r0
 8008a72:	ab03      	add	r3, sp, #12
 8008a74:	4805      	ldr	r0, [pc, #20]	; (8008a8c <fiprintf+0x20>)
 8008a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f7ff f97b 	bl	8007d78 <_vfiprintf_r>
 8008a82:	b002      	add	sp, #8
 8008a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a88:	b003      	add	sp, #12
 8008a8a:	4770      	bx	lr
 8008a8c:	20000064 	.word	0x20000064

08008a90 <abort>:
 8008a90:	b508      	push	{r3, lr}
 8008a92:	2006      	movs	r0, #6
 8008a94:	f000 f834 	bl	8008b00 <raise>
 8008a98:	2001      	movs	r0, #1
 8008a9a:	f7f8 fee3 	bl	8001864 <_exit>

08008a9e <_malloc_usable_size_r>:
 8008a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa2:	1f18      	subs	r0, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfbc      	itt	lt
 8008aa8:	580b      	ldrlt	r3, [r1, r0]
 8008aaa:	18c0      	addlt	r0, r0, r3
 8008aac:	4770      	bx	lr

08008aae <_raise_r>:
 8008aae:	291f      	cmp	r1, #31
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	d904      	bls.n	8008ac2 <_raise_r+0x14>
 8008ab8:	2316      	movs	r3, #22
 8008aba:	6003      	str	r3, [r0, #0]
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
 8008ac2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ac4:	b112      	cbz	r2, 8008acc <_raise_r+0x1e>
 8008ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008aca:	b94b      	cbnz	r3, 8008ae0 <_raise_r+0x32>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f831 	bl	8008b34 <_getpid_r>
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008adc:	f000 b818 	b.w	8008b10 <_kill_r>
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d00a      	beq.n	8008afa <_raise_r+0x4c>
 8008ae4:	1c59      	adds	r1, r3, #1
 8008ae6:	d103      	bne.n	8008af0 <_raise_r+0x42>
 8008ae8:	2316      	movs	r3, #22
 8008aea:	6003      	str	r3, [r0, #0]
 8008aec:	2001      	movs	r0, #1
 8008aee:	e7e7      	b.n	8008ac0 <_raise_r+0x12>
 8008af0:	2400      	movs	r4, #0
 8008af2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008af6:	4628      	mov	r0, r5
 8008af8:	4798      	blx	r3
 8008afa:	2000      	movs	r0, #0
 8008afc:	e7e0      	b.n	8008ac0 <_raise_r+0x12>
	...

08008b00 <raise>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <raise+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f7ff bfd2 	b.w	8008aae <_raise_r>
 8008b0a:	bf00      	nop
 8008b0c:	20000064 	.word	0x20000064

08008b10 <_kill_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	; (8008b30 <_kill_r+0x20>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	f7f8 fe91 	bl	8001844 <_kill>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d102      	bne.n	8008b2c <_kill_r+0x1c>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	b103      	cbz	r3, 8008b2c <_kill_r+0x1c>
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	bf00      	nop
 8008b30:	2000041c 	.word	0x2000041c

08008b34 <_getpid_r>:
 8008b34:	f7f8 be7e 	b.w	8001834 <_getpid>

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
