
Test007-Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005458  08005458  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  080054c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080054c8  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d01e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da2  00000000  00000000  0002d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c8  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017201  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1cc  00000000  00000000  000476f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009000b  00000000  00000000  000558c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004154  00000000  00000000  000e58d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e9a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005238 	.word	0x08005238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005238 	.word	0x08005238

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc19 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f831 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f93b 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f90f 	bl	80007b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000592:	f000 f895 	bl	80006c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Motor Control - Servo");
 8000596:	4810      	ldr	r0, [pc, #64]	; (80005d8 <main+0x5c>)
 8000598:	f000 f9f0 	bl	800097c <ProgramStart>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0x60>)
 80005a0:	f001 fc7c 	bl	8001e9c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cval = 23, dr = 1;
 80005a4:	2317      	movs	r3, #23
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Input angle : "); scanf("%d", &cval);
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x64>)
 80005ae:	f002 ff59 	bl	8003464 <iprintf>
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x68>)
 80005b8:	f002 ffc2 	bl	8003540 <iscanf>
	  htim3.Instance->CCR2 = cval;
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0x60>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
	  printf("Angle : %d\r\n",cval);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x6c>)
 80005ca:	f002 ff4b 	bl	8003464 <iprintf>
	  HAL_Delay(20);
 80005ce:	2014      	movs	r0, #20
 80005d0:	f000 fc64 	bl	8000e9c <HAL_Delay>
  {
 80005d4:	e7ea      	b.n	80005ac <main+0x30>
 80005d6:	bf00      	nop
 80005d8:	08005250 	.word	0x08005250
 80005dc:	20000084 	.word	0x20000084
 80005e0:	08005268 	.word	0x08005268
 80005e4:	08005278 	.word	0x08005278
 80005e8:	0800527c 	.word	0x0800527c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f958 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fed2 	bl	800141c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f92f 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f934 	bl	800190c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f000 f919 	bl	80008e0 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
 80006ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_TIM3_Init+0xe8>)
 80006f2:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <MX_TIM3_Init+0xec>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_TIM3_Init+0xe8>)
 80006f8:	f240 628f 	movw	r2, #1679	; 0x68f
 80006fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000706:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_TIM3_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <MX_TIM3_Init+0xe8>)
 800071a:	f001 fb17 	bl	8001d4c <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000724:	f000 f8dc 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000732:	4619      	mov	r1, r3
 8000734:	481c      	ldr	r0, [pc, #112]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000736:	f001 fd23 	bl	8002180 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000740:	f000 f8ce 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000744:	4818      	ldr	r0, [pc, #96]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000746:	f001 fb50 	bl	8001dea <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000750:	f000 f8c6 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4619      	mov	r1, r3
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <MX_TIM3_Init+0xe8>)
 8000764:	f002 f8ac 	bl	80028c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800076e:	f000 f8b7 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	2360      	movs	r3, #96	; 0x60
 8000774:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2204      	movs	r2, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <MX_TIM3_Init+0xe8>)
 800078a:	f001 fc37 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000794:	f000 f8a4 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <MX_TIM3_Init+0xe8>)
 800079a:	f000 f981 	bl	8000aa0 <HAL_TIM_MspPostInit>

}
 800079e:	bf00      	nop
 80007a0:	3738      	adds	r7, #56	; 0x38
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000084 	.word	0x20000084
 80007ac:	40000400 	.word	0x40000400

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f002 f8d8 	bl	800299c <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f875 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000890:	f000 fdaa 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0xd8>)
 80008ac:	f000 fc00 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0xd4>)
 80008c8:	f000 fbf2 	bl	80010b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <__io_getchar>:
extern UART_HandleTypeDef huart2;
//I2C_HandleTypeDef *hi2c = NULL;


int __io_getchar(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 80008f2:	bf00      	nop
 80008f4:	1df9      	adds	r1, r7, #7
 80008f6:	230a      	movs	r3, #10
 80008f8:	2201      	movs	r2, #1
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <__io_getchar+0x44>)
 80008fc:	f002 f929 	bl	8002b52 <HAL_UART_Receive>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f6      	bne.n	80008f4 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10); //echo
 8000906:	1df9      	adds	r1, r7, #7
 8000908:	230a      	movs	r3, #10
 800090a:	2201      	movs	r2, #1
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <__io_getchar+0x44>)
 800090e:	f002 f895 	bl	8002a3c <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b0d      	cmp	r3, #13
 8000916:	d105      	bne.n	8000924 <__io_getchar+0x38>
 8000918:	230a      	movs	r3, #10
 800091a:	2201      	movs	r2, #1
 800091c:	4905      	ldr	r1, [pc, #20]	; (8000934 <__io_getchar+0x48>)
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <__io_getchar+0x44>)
 8000920:	f002 f88c 	bl	8002a3c <HAL_UART_Transmit>
	return ch;
 8000924:	79fb      	ldrb	r3, [r7, #7]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000cc 	.word	0x200000cc
 8000934:	0800528c 	.word	0x0800528c

08000938 <__io_putchar>:

int __io_putchar(int ch)  //4byte
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	230a      	movs	r3, #10
 8000944:	2201      	movs	r2, #1
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <__io_putchar+0x20>)
 8000948:	f002 f878 	bl	8002a3c <HAL_UART_Transmit>
	return ch;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000cc 	.word	0x200000cc

0800095c <Standby>:

void Standby()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)); //wait until B1 == 0 (Press)
 8000960:	bf00      	nop
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <Standby+0x1c>)
 8000968:	f000 fd26 	bl	80013b8 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f7      	bne.n	8000962 <Standby+0x6>
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40020800 	.word	0x40020800

0800097c <ProgramStart>:

void ProgramStart (char* str)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]


	//printf("\033[2J\033[0;0H");
	cls();
 8000984:	f000 f820 	bl	80009c8 <cls>
	Cursor(0,0);
 8000988:	2100      	movs	r1, #0
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f826 	bl	80009dc <Cursor>
	printf("Program Name - %s\r\n", str);
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <ProgramStart+0x40>)
 8000994:	f002 fd66 	bl	8003464 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <ProgramStart+0x44>)
 800099a:	f002 fdc9 	bl	8003530 <puts>
	setvbuf(stdin, NULL, _IONBF, 0);
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <ProgramStart+0x48>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6858      	ldr	r0, [r3, #4]
 80009a4:	2300      	movs	r3, #0
 80009a6:	2202      	movs	r2, #2
 80009a8:	2100      	movs	r1, #0
 80009aa:	f002 fddb 	bl	8003564 <setvbuf>
	Standby();
 80009ae:	f7ff ffd5 	bl	800095c <Standby>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08005290 	.word	0x08005290
 80009c0:	080052a4 	.word	0x080052a4
 80009c4:	20000064 	.word	0x20000064

080009c8 <cls>:

void cls()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	printf("\033[2J");
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <cls+0x10>)
 80009ce:	f002 fd49 	bl	8003464 <iprintf>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	080052c8 	.word	0x080052c8

080009dc <Cursor>:
void Cursor(int x, int y)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 80009e6:	f107 000c 	add.w	r0, r7, #12
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	4906      	ldr	r1, [pc, #24]	; (8000a08 <Cursor+0x2c>)
 80009f0:	f002 fe66 	bl	80036c0 <siprintf>
	puts(buf);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fd99 	bl	8003530 <puts>
}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	080052d0 	.word	0x080052d0

08000a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fafc 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10d      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_TIM_Base_MspInit+0x40>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_TIM_MspPostInit+0x68>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d11d      	bne.n	8000afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_TIM_MspPostInit+0x70>)
 8000afa:	f000 fad9 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f000 fa91 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f934 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f7ff fe6f 	bl	80008ec <__io_getchar>
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe73 	bl	8000938 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
  }
  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f002 fe22 	bl	800394c <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000114 	.word	0x20000114
 8000d3c:	20000268 	.word	0x20000268

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fde1 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fbf1 	bl	800057c <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da8:	08005460 	.word	0x08005460
  ldr r2, =_sbss
 8000dac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db0:	20000268 	.word	0x20000268

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f931 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe0e 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f93b 	bl	8001096 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f911 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000118 	.word	0x20000118

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000118 	.word	0x20000118

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff5c 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb0 	bl	8001004 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e159      	b.n	8001380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	f040 8148 	bne.w	800137a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d005      	beq.n	8001102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d130      	bne.n	8001164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 0201 	and.w	r2, r3, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b03      	cmp	r3, #3
 800116e:	d017      	beq.n	80011a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	69b9      	ldr	r1, [r7, #24]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a2 	beq.w	800137a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a56      	ldr	r2, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x2e8>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001252:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2ec>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a49      	ldr	r2, [pc, #292]	; (80013a0 <HAL_GPIO_Init+0x2f0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x202>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a48      	ldr	r2, [pc, #288]	; (80013a4 <HAL_GPIO_Init+0x2f4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x1fe>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x2f8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x1fa>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_GPIO_Init+0x2fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x1f6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x300>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x1f2>
 800129e:	2304      	movs	r3, #4
 80012a0:	e008      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e004      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_GPIO_Init+0x204>
 80012b2:	2300      	movs	r3, #0
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	f002 0203 	and.w	r2, r2, #3
 80012ba:	0092      	lsls	r2, r2, #2
 80012bc:	4093      	lsls	r3, r2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <HAL_GPIO_Init+0x2ec>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x304>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001320:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	f67f aea2 	bls.w	80010cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	041a      	lsls	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	619a      	str	r2, [r3, #24]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e267      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e242      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6c      	ldr	r2, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcd6 	bl	8000e84 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcd2 	bl	8000e84 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e207      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcc2 	bl	8000e84 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fcbe 	bl	8000e84 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f3      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c7      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fc77 	bl	8000e84 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc73 	bl	8000e84 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a8      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4925      	ldr	r1, [pc, #148]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc56 	bl	8000e84 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc52 	bl	8000e84 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e187      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fc36 	bl	8000e84 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc32 	bl	8000e84 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e167      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fc1f 	bl	8000e84 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00e      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fc1b 	bl	8000e84 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d907      	bls.n	8001668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e150      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470000 	.word	0x42470000
 8001664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ea      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8097 	beq.w	80017b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a73      	ldr	r2, [pc, #460]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fbdb 	bl	8000e84 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fbd7 	bl	8000e84 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e10c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ea>
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x30c>
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fb9c 	bl	8000e84 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb98 	bl	8000e84 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb86 	bl	8000e84 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb82 	bl	8000e84 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0b5      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a1 	beq.w	80018fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d05c      	beq.n	8001880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d141      	bne.n	8001852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb56 	bl	8000e84 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb52 	bl	8000e84 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb2b 	bl	8000e84 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fb27 	bl	8000e84 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e05c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x416>
 8001850:	e054      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb14 	bl	8000e84 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb10 	bl	8000e84 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e045      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e038      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff fa42 	bl	8000e84 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff fa3e 	bl	8000e84 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f9a2 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	080052e8 	.word	0x080052e8
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b094      	sub	sp, #80	; 0x50
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80e1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e0db      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b10:	e0db      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e0d8      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
 8001b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0159      	lsls	r1, r3, #5
 8001b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5c:	0150      	lsls	r0, r2, #5
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4621      	mov	r1, r4
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	6139      	str	r1, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4651      	mov	r1, sl
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b90:	4659      	mov	r1, fp
 8001b92:	eb63 0901 	sbc.w	r9, r3, r1
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	eb18 0303 	adds.w	r3, r8, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	eb49 0303 	adc.w	r3, r9, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	024b      	lsls	r3, r1, #9
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	024a      	lsls	r2, r1, #9
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be8:	f7fe fb4a 	bl	8000280 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4611      	mov	r1, r2
 8001c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c10:	4642      	mov	r2, r8
 8001c12:	464b      	mov	r3, r9
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0159      	lsls	r1, r3, #5
 8001c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c22:	0150      	lsls	r0, r2, #5
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4641      	mov	r1, r8
 8001c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c48:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00eb      	lsls	r3, r5, #3
 8001c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5e:	00e2      	lsls	r2, r4, #3
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4643      	mov	r3, r8
 8001c66:	18e3      	adds	r3, r4, r3
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	eb45 0303 	adc.w	r3, r5, r3
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	2200      	movs	r2, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9c:	f7fe faf0 	bl	8000280 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3750      	adds	r7, #80	; 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	080052f8 	.word	0x080052f8

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	080052f8 	.word	0x080052f8

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fe72 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 fac0 	bl	8002310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e041      	b.n	8001e80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f839 	bl	8001e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4610      	mov	r0, r2
 8001e2a:	f000 fa71 	bl	8002310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_TIM_PWM_Start+0x24>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e022      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d109      	bne.n	8001eda <HAL_TIM_PWM_Start+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e015      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d109      	bne.n	8001ef4 <HAL_TIM_PWM_Start+0x58>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e008      	b.n	8001f06 <HAL_TIM_PWM_Start+0x6a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e068      	b.n	8001fe0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x82>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1c:	e013      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0x92>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f2c:	e00b      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d104      	bne.n	8001f3e <HAL_TIM_PWM_Start+0xa2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f3c:	e003      	b.n	8001f46 <HAL_TIM_PWM_Start+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fc90 	bl	8002874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_TIM_PWM_Start+0x14c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d107      	bne.n	8001f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_TIM_PWM_Start+0x14c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_TIM_PWM_Start+0x10e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d013      	beq.n	8001faa <HAL_TIM_PWM_Start+0x10e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_TIM_PWM_Start+0x150>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIM_PWM_Start+0x10e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_TIM_PWM_Start+0x154>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_TIM_PWM_Start+0x10e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_TIM_PWM_Start+0x158>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIM_PWM_Start+0x10e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_TIM_PWM_Start+0x15c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d111      	bne.n	8001fce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	d010      	beq.n	8001fde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fcc:	e007      	b.n	8001fde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40014000 	.word	0x40014000

08001ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0ae      	b.n	8002178 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	f200 809f 	bhi.w	8002168 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002065 	.word	0x08002065
 8002034:	08002169 	.word	0x08002169
 8002038:	08002169 	.word	0x08002169
 800203c:	08002169 	.word	0x08002169
 8002040:	080020a5 	.word	0x080020a5
 8002044:	08002169 	.word	0x08002169
 8002048:	08002169 	.word	0x08002169
 800204c:	08002169 	.word	0x08002169
 8002050:	080020e7 	.word	0x080020e7
 8002054:	08002169 	.word	0x08002169
 8002058:	08002169 	.word	0x08002169
 800205c:	08002169 	.word	0x08002169
 8002060:	08002127 	.word	0x08002127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f9dc 	bl	8002428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0208 	orr.w	r2, r2, #8
 800207e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6999      	ldr	r1, [r3, #24]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	619a      	str	r2, [r3, #24]
      break;
 80020a2:	e064      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fa22 	bl	80024f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6999      	ldr	r1, [r3, #24]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	021a      	lsls	r2, r3, #8
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	619a      	str	r2, [r3, #24]
      break;
 80020e4:	e043      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fa6d 	bl	80025cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0204 	bic.w	r2, r2, #4
 8002110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69d9      	ldr	r1, [r3, #28]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	61da      	str	r2, [r3, #28]
      break;
 8002124:	e023      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fab7 	bl	80026a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69d9      	ldr	r1, [r3, #28]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	021a      	lsls	r2, r3, #8
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	61da      	str	r2, [r3, #28]
      break;
 8002166:	e002      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	75fb      	strb	r3, [r7, #23]
      break;
 800216c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_TIM_ConfigClockSource+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e0b4      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x186>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d4:	d03e      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0xd4>
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	f200 8087 	bhi.w	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e2:	f000 8086 	beq.w	80022f2 <HAL_TIM_ConfigClockSource+0x172>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d87f      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b70      	cmp	r3, #112	; 0x70
 80021ee:	d01a      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xa6>
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d87b      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b60      	cmp	r3, #96	; 0x60
 80021f6:	d050      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x11a>
 80021f8:	2b60      	cmp	r3, #96	; 0x60
 80021fa:	d877      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b50      	cmp	r3, #80	; 0x50
 80021fe:	d03c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xfa>
 8002200:	2b50      	cmp	r3, #80	; 0x50
 8002202:	d873      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d058      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x13a>
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d86f      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b30      	cmp	r3, #48	; 0x30
 800220e:	d064      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002210:	2b30      	cmp	r3, #48	; 0x30
 8002212:	d86b      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b20      	cmp	r3, #32
 8002216:	d060      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	2b20      	cmp	r3, #32
 800221a:	d867      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05c      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b10      	cmp	r3, #16
 8002222:	d05a      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x15a>
 8002224:	e062      	b.n	80022ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	f000 fafd 	bl	8002834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	609a      	str	r2, [r3, #8]
      break;
 8002252:	e04f      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	f000 fae6 	bl	8002834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002276:	609a      	str	r2, [r3, #8]
      break;
 8002278:	e03c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002286:	461a      	mov	r2, r3
 8002288:	f000 fa5a 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2150      	movs	r1, #80	; 0x50
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fab3 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002298:	e02c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a6:	461a      	mov	r2, r3
 80022a8:	f000 fa79 	bl	800279e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2160      	movs	r1, #96	; 0x60
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 faa3 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80022b8:	e01c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c6:	461a      	mov	r2, r3
 80022c8:	f000 fa3a 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fa93 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80022d8:	e00c      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fa8a 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80022ea:	e003      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e000      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <TIM_Base_SetConfig+0xfc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00f      	beq.n	8002348 <TIM_Base_SetConfig+0x38>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232e:	d00b      	beq.n	8002348 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a37      	ldr	r2, [pc, #220]	; (8002410 <TIM_Base_SetConfig+0x100>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <TIM_Base_SetConfig+0x104>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a35      	ldr	r2, [pc, #212]	; (8002418 <TIM_Base_SetConfig+0x108>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a2b      	ldr	r2, [pc, #172]	; (800240c <TIM_Base_SetConfig+0xfc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01b      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002368:	d017      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a28      	ldr	r2, [pc, #160]	; (8002410 <TIM_Base_SetConfig+0x100>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <TIM_Base_SetConfig+0x104>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00f      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM_Base_SetConfig+0x108>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00b      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0x10c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a24      	ldr	r2, [pc, #144]	; (8002420 <TIM_Base_SetConfig+0x110>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d003      	beq.n	800239a <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a23      	ldr	r2, [pc, #140]	; (8002424 <TIM_Base_SetConfig+0x114>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d108      	bne.n	80023ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <TIM_Base_SetConfig+0xfc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d103      	bne.n	80023e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]
  }
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800

08002428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 0201 	bic.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40010000 	.word	0x40010000

080024f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 0210 	bic.w	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0320 	bic.w	r3, r3, #32
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <TIM_OC2_SetConfig+0xd4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <TIM_OC2_SetConfig+0xd4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d113      	bne.n	80025a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000

080025cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40010000 	.word	0x40010000

080026a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	031b      	lsls	r3, r3, #12
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <TIM_OC4_SetConfig+0x9c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0210 	bic.w	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	031b      	lsls	r3, r3, #12
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	f043 0307 	orr.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	431a      	orrs	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2201      	movs	r2, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	43db      	mvns	r3, r3
 8002896:	401a      	ands	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e050      	b.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d013      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10c      	bne.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40014000 	.word	0x40014000

0800299c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e042      	b.n	8002a34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe f8a6 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa09 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d175      	bne.n	8002b48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_Transmit+0x2c>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e06e      	b.n	8002b4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2221      	movs	r2, #33	; 0x21
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fa03 	bl	8000e84 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	88fa      	ldrh	r2, [r7, #6]
 8002a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d108      	bne.n	8002aa8 <HAL_UART_Transmit+0x6c>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e003      	b.n	8002ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab0:	e02e      	b.n	8002b10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f8df 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e03a      	b.n	8002b4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10b      	bne.n	8002af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	3302      	adds	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	e007      	b.n	8002b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1cb      	bne.n	8002ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2140      	movs	r1, #64	; 0x40
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f8ab 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e006      	b.n	8002b4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08a      	sub	sp, #40	; 0x28
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	f040 8081 	bne.w	8002c76 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Receive+0x2e>
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e079      	b.n	8002c78 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2222      	movs	r2, #34	; 0x22
 8002b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b98:	f7fe f974 	bl	8000e84 <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	d108      	bne.n	8002bc6 <HAL_UART_Receive+0x74>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e003      	b.n	8002bce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002bce:	e047      	b.n	8002c60 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2120      	movs	r1, #32
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f850 	bl	8002c80 <UART_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e042      	b.n	8002c78 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10c      	bne.n	8002c12 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e01f      	b.n	8002c52 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	d007      	beq.n	8002c2c <HAL_UART_Receive+0xda>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <HAL_UART_Receive+0xe8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e008      	b.n	8002c4c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1b2      	bne.n	8002bd0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c90:	e03b      	b.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d037      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe f8f3 	bl	8000e84 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e03a      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d023      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d020      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d01d      	beq.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d116      	bne.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f81d 	bl	8002d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0b4      	beq.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b095      	sub	sp, #84	; 0x54
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d5a:	643a      	str	r2, [r7, #64]	; 0x40
 8002d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3314      	adds	r3, #20
 8002d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e5      	bne.n	8002d6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d119      	bne.n	8002dde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f023 0310 	bic.w	r3, r3, #16
 8002dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dca:	61ba      	str	r2, [r7, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dec:	bf00      	nop
 8002dee:	3754      	adds	r7, #84	; 0x54
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b0c0      	sub	sp, #256	; 0x100
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	ea40 0301 	orr.w	r3, r0, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e50:	f021 010c 	bic.w	r1, r1, #12
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	6999      	ldr	r1, [r3, #24]
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	ea40 0301 	orr.w	r3, r0, r1
 8002e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <UART_SetConfig+0x2cc>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0xa0>
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b8d      	ldr	r3, [pc, #564]	; (80030c8 <UART_SetConfig+0x2d0>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d104      	bne.n	8002ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7fe ff44 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ea0:	e003      	b.n	8002eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7fe ff2b 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	f040 810c 	bne.w	80030d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	1891      	adds	r1, r2, r2
 8002ed0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed2:	415b      	adcs	r3, r3
 8002ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eda:	4621      	mov	r1, r4
 8002edc:	eb12 0801 	adds.w	r8, r2, r1
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb43 0901 	adc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f08:	462b      	mov	r3, r5
 8002f0a:	eb49 0303 	adc.w	r3, r9, r3
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f26:	460b      	mov	r3, r1
 8002f28:	18db      	adds	r3, r3, r3
 8002f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	eb42 0303 	adc.w	r3, r2, r3
 8002f32:	657b      	str	r3, [r7, #84]	; 0x54
 8002f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f3c:	f7fd f9a0 	bl	8000280 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	011c      	lsls	r4, r3, #4
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f70:	4641      	mov	r1, r8
 8002f72:	eb12 0a01 	adds.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb43 0b01 	adc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f90:	4692      	mov	sl, r2
 8002f92:	469b      	mov	fp, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	18db      	adds	r3, r3, r3
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fd2:	f7fd f955 	bl	8000280 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	; 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003000:	441c      	add	r4, r3
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800300c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	63b9      	str	r1, [r7, #56]	; 0x38
 800301c:	415b      	adcs	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003024:	4641      	mov	r1, r8
 8003026:	1851      	adds	r1, r2, r1
 8003028:	6339      	str	r1, [r7, #48]	; 0x30
 800302a:	4649      	mov	r1, r9
 800302c:	414b      	adcs	r3, r1
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800303c:	4659      	mov	r1, fp
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	4651      	mov	r1, sl
 8003048:	00ca      	lsls	r2, r1, #3
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	4603      	mov	r3, r0
 8003050:	4642      	mov	r2, r8
 8003052:	189b      	adds	r3, r3, r2
 8003054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003070:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800308e:	f7fd f8f7 	bl	8000280 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <UART_SetConfig+0x2d4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <UART_SetConfig+0x2d4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c0:	e106      	b.n	80032d0 <UART_SetConfig+0x4d8>
 80030c2:	bf00      	nop
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40011400 	.word	0x40011400
 80030cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	6239      	str	r1, [r7, #32]
 80030ea:	415b      	adcs	r3, r3
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f2:	4641      	mov	r1, r8
 80030f4:	1854      	adds	r4, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0501 	adc.w	r5, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003118:	464b      	mov	r3, r9
 800311a:	eb45 0303 	adc.w	r3, r5, r3
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800312e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800313e:	4629      	mov	r1, r5
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003148:	4621      	mov	r1, r4
 800314a:	008a      	lsls	r2, r1, #2
 800314c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003150:	f7fd f896 	bl	8000280 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b60      	ldr	r3, [pc, #384]	; (80032dc <UART_SetConfig+0x4e4>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011c      	lsls	r4, r3, #4
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800316c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	61b9      	str	r1, [r7, #24]
 800317c:	415b      	adcs	r3, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6139      	str	r1, [r7, #16]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031dc:	4649      	mov	r1, r9
 80031de:	008b      	lsls	r3, r1, #2
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e6:	4641      	mov	r1, r8
 80031e8:	008a      	lsls	r2, r1, #2
 80031ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031ee:	f7fd f847 	bl	8000280 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	4b38      	ldr	r3, [pc, #224]	; (80032dc <UART_SetConfig+0x4e4>)
 80031fa:	fba3 2301 	umull	r2, r3, r3, r1
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2264      	movs	r2, #100	; 0x64
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	1acb      	subs	r3, r1, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	; 0x32
 800320c:	4a33      	ldr	r2, [pc, #204]	; (80032dc <UART_SetConfig+0x4e4>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003218:	441c      	add	r4, r3
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	673b      	str	r3, [r7, #112]	; 0x70
 8003222:	677a      	str	r2, [r7, #116]	; 0x74
 8003224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	415b      	adcs	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
 800326a:	464b      	mov	r3, r9
 800326c:	460a      	mov	r2, r1
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
 800327e:	667a      	str	r2, [r7, #100]	; 0x64
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800328c:	4649      	mov	r1, r9
 800328e:	008b      	lsls	r3, r1, #2
 8003290:	4641      	mov	r1, r8
 8003292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003296:	4641      	mov	r1, r8
 8003298:	008a      	lsls	r2, r1, #2
 800329a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800329e:	f7fc ffef 	bl	8000280 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <UART_SetConfig+0x4e4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	; 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	; (80032dc <UART_SetConfig+0x4e4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <std>:
 80032e0:	2300      	movs	r3, #0
 80032e2:	b510      	push	{r4, lr}
 80032e4:	4604      	mov	r4, r0
 80032e6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ee:	6083      	str	r3, [r0, #8]
 80032f0:	8181      	strh	r1, [r0, #12]
 80032f2:	6643      	str	r3, [r0, #100]	; 0x64
 80032f4:	81c2      	strh	r2, [r0, #14]
 80032f6:	6183      	str	r3, [r0, #24]
 80032f8:	4619      	mov	r1, r3
 80032fa:	2208      	movs	r2, #8
 80032fc:	305c      	adds	r0, #92	; 0x5c
 80032fe:	f000 fad7 	bl	80038b0 <memset>
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <std+0x58>)
 8003304:	6263      	str	r3, [r4, #36]	; 0x24
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <std+0x5c>)
 8003308:	62a3      	str	r3, [r4, #40]	; 0x28
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <std+0x60>)
 800330c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <std+0x64>)
 8003310:	6323      	str	r3, [r4, #48]	; 0x30
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <std+0x68>)
 8003314:	6224      	str	r4, [r4, #32]
 8003316:	429c      	cmp	r4, r3
 8003318:	d006      	beq.n	8003328 <std+0x48>
 800331a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800331e:	4294      	cmp	r4, r2
 8003320:	d002      	beq.n	8003328 <std+0x48>
 8003322:	33d0      	adds	r3, #208	; 0xd0
 8003324:	429c      	cmp	r4, r3
 8003326:	d105      	bne.n	8003334 <std+0x54>
 8003328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003330:	f000 bb36 	b.w	80039a0 <__retarget_lock_init_recursive>
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003701 	.word	0x08003701
 800333c:	08003723 	.word	0x08003723
 8003340:	0800375b 	.word	0x0800375b
 8003344:	0800377f 	.word	0x0800377f
 8003348:	2000011c 	.word	0x2000011c

0800334c <stdio_exit_handler>:
 800334c:	4a02      	ldr	r2, [pc, #8]	; (8003358 <stdio_exit_handler+0xc>)
 800334e:	4903      	ldr	r1, [pc, #12]	; (800335c <stdio_exit_handler+0x10>)
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <stdio_exit_handler+0x14>)
 8003352:	f000 b869 	b.w	8003428 <_fwalk_sglue>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c
 800335c:	08004b15 	.word	0x08004b15
 8003360:	20000018 	.word	0x20000018

08003364 <cleanup_stdio>:
 8003364:	6841      	ldr	r1, [r0, #4]
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <cleanup_stdio+0x34>)
 8003368:	4299      	cmp	r1, r3
 800336a:	b510      	push	{r4, lr}
 800336c:	4604      	mov	r4, r0
 800336e:	d001      	beq.n	8003374 <cleanup_stdio+0x10>
 8003370:	f001 fbd0 	bl	8004b14 <_fflush_r>
 8003374:	68a1      	ldr	r1, [r4, #8]
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <cleanup_stdio+0x38>)
 8003378:	4299      	cmp	r1, r3
 800337a:	d002      	beq.n	8003382 <cleanup_stdio+0x1e>
 800337c:	4620      	mov	r0, r4
 800337e:	f001 fbc9 	bl	8004b14 <_fflush_r>
 8003382:	68e1      	ldr	r1, [r4, #12]
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <cleanup_stdio+0x3c>)
 8003386:	4299      	cmp	r1, r3
 8003388:	d004      	beq.n	8003394 <cleanup_stdio+0x30>
 800338a:	4620      	mov	r0, r4
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f001 bbc0 	b.w	8004b14 <_fflush_r>
 8003394:	bd10      	pop	{r4, pc}
 8003396:	bf00      	nop
 8003398:	2000011c 	.word	0x2000011c
 800339c:	20000184 	.word	0x20000184
 80033a0:	200001ec 	.word	0x200001ec

080033a4 <global_stdio_init.part.0>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <global_stdio_init.part.0+0x30>)
 80033a8:	4c0b      	ldr	r4, [pc, #44]	; (80033d8 <global_stdio_init.part.0+0x34>)
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <global_stdio_init.part.0+0x38>)
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4620      	mov	r0, r4
 80033b0:	2200      	movs	r2, #0
 80033b2:	2104      	movs	r1, #4
 80033b4:	f7ff ff94 	bl	80032e0 <std>
 80033b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033bc:	2201      	movs	r2, #1
 80033be:	2109      	movs	r1, #9
 80033c0:	f7ff ff8e 	bl	80032e0 <std>
 80033c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033c8:	2202      	movs	r2, #2
 80033ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ce:	2112      	movs	r1, #18
 80033d0:	f7ff bf86 	b.w	80032e0 <std>
 80033d4:	20000254 	.word	0x20000254
 80033d8:	2000011c 	.word	0x2000011c
 80033dc:	0800334d 	.word	0x0800334d

080033e0 <__sfp_lock_acquire>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__sfp_lock_acquire+0x8>)
 80033e2:	f000 bade 	b.w	80039a2 <__retarget_lock_acquire_recursive>
 80033e6:	bf00      	nop
 80033e8:	2000025d 	.word	0x2000025d

080033ec <__sfp_lock_release>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__sfp_lock_release+0x8>)
 80033ee:	f000 bad9 	b.w	80039a4 <__retarget_lock_release_recursive>
 80033f2:	bf00      	nop
 80033f4:	2000025d 	.word	0x2000025d

080033f8 <__sinit>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0
 80033fc:	f7ff fff0 	bl	80033e0 <__sfp_lock_acquire>
 8003400:	6a23      	ldr	r3, [r4, #32]
 8003402:	b11b      	cbz	r3, 800340c <__sinit+0x14>
 8003404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003408:	f7ff bff0 	b.w	80033ec <__sfp_lock_release>
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__sinit+0x28>)
 800340e:	6223      	str	r3, [r4, #32]
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__sinit+0x2c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f5      	bne.n	8003404 <__sinit+0xc>
 8003418:	f7ff ffc4 	bl	80033a4 <global_stdio_init.part.0>
 800341c:	e7f2      	b.n	8003404 <__sinit+0xc>
 800341e:	bf00      	nop
 8003420:	08003365 	.word	0x08003365
 8003424:	20000254 	.word	0x20000254

08003428 <_fwalk_sglue>:
 8003428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800342c:	4607      	mov	r7, r0
 800342e:	4688      	mov	r8, r1
 8003430:	4614      	mov	r4, r2
 8003432:	2600      	movs	r6, #0
 8003434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003438:	f1b9 0901 	subs.w	r9, r9, #1
 800343c:	d505      	bpl.n	800344a <_fwalk_sglue+0x22>
 800343e:	6824      	ldr	r4, [r4, #0]
 8003440:	2c00      	cmp	r4, #0
 8003442:	d1f7      	bne.n	8003434 <_fwalk_sglue+0xc>
 8003444:	4630      	mov	r0, r6
 8003446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d907      	bls.n	8003460 <_fwalk_sglue+0x38>
 8003450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003454:	3301      	adds	r3, #1
 8003456:	d003      	beq.n	8003460 <_fwalk_sglue+0x38>
 8003458:	4629      	mov	r1, r5
 800345a:	4638      	mov	r0, r7
 800345c:	47c0      	blx	r8
 800345e:	4306      	orrs	r6, r0
 8003460:	3568      	adds	r5, #104	; 0x68
 8003462:	e7e9      	b.n	8003438 <_fwalk_sglue+0x10>

08003464 <iprintf>:
 8003464:	b40f      	push	{r0, r1, r2, r3}
 8003466:	b507      	push	{r0, r1, r2, lr}
 8003468:	4906      	ldr	r1, [pc, #24]	; (8003484 <iprintf+0x20>)
 800346a:	ab04      	add	r3, sp, #16
 800346c:	6808      	ldr	r0, [r1, #0]
 800346e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003472:	6881      	ldr	r1, [r0, #8]
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	f000 fd19 	bl	8003eac <_vfiprintf_r>
 800347a:	b003      	add	sp, #12
 800347c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr
 8003484:	20000064 	.word	0x20000064

08003488 <_puts_r>:
 8003488:	6a03      	ldr	r3, [r0, #32]
 800348a:	b570      	push	{r4, r5, r6, lr}
 800348c:	6884      	ldr	r4, [r0, #8]
 800348e:	4605      	mov	r5, r0
 8003490:	460e      	mov	r6, r1
 8003492:	b90b      	cbnz	r3, 8003498 <_puts_r+0x10>
 8003494:	f7ff ffb0 	bl	80033f8 <__sinit>
 8003498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800349a:	07db      	lsls	r3, r3, #31
 800349c:	d405      	bmi.n	80034aa <_puts_r+0x22>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	0598      	lsls	r0, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_puts_r+0x22>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f000 fa7c 	bl	80039a2 <__retarget_lock_acquire_recursive>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	0719      	lsls	r1, r3, #28
 80034ae:	d513      	bpl.n	80034d8 <_puts_r+0x50>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	b18b      	cbz	r3, 80034d8 <_puts_r+0x50>
 80034b4:	3e01      	subs	r6, #1
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034bc:	3b01      	subs	r3, #1
 80034be:	60a3      	str	r3, [r4, #8]
 80034c0:	b9e9      	cbnz	r1, 80034fe <_puts_r+0x76>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da2e      	bge.n	8003524 <_puts_r+0x9c>
 80034c6:	4622      	mov	r2, r4
 80034c8:	210a      	movs	r1, #10
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f95b 	bl	8003786 <__swbuf_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d007      	beq.n	80034e4 <_puts_r+0x5c>
 80034d4:	250a      	movs	r5, #10
 80034d6:	e007      	b.n	80034e8 <_puts_r+0x60>
 80034d8:	4621      	mov	r1, r4
 80034da:	4628      	mov	r0, r5
 80034dc:	f000 f990 	bl	8003800 <__swsetup_r>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d0e7      	beq.n	80034b4 <_puts_r+0x2c>
 80034e4:	f04f 35ff 	mov.w	r5, #4294967295
 80034e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ea:	07da      	lsls	r2, r3, #31
 80034ec:	d405      	bmi.n	80034fa <_puts_r+0x72>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	059b      	lsls	r3, r3, #22
 80034f2:	d402      	bmi.n	80034fa <_puts_r+0x72>
 80034f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f6:	f000 fa55 	bl	80039a4 <__retarget_lock_release_recursive>
 80034fa:	4628      	mov	r0, r5
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da04      	bge.n	800350c <_puts_r+0x84>
 8003502:	69a2      	ldr	r2, [r4, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	dc06      	bgt.n	8003516 <_puts_r+0x8e>
 8003508:	290a      	cmp	r1, #10
 800350a:	d004      	beq.n	8003516 <_puts_r+0x8e>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	6022      	str	r2, [r4, #0]
 8003512:	7019      	strb	r1, [r3, #0]
 8003514:	e7cf      	b.n	80034b6 <_puts_r+0x2e>
 8003516:	4622      	mov	r2, r4
 8003518:	4628      	mov	r0, r5
 800351a:	f000 f934 	bl	8003786 <__swbuf_r>
 800351e:	3001      	adds	r0, #1
 8003520:	d1c9      	bne.n	80034b6 <_puts_r+0x2e>
 8003522:	e7df      	b.n	80034e4 <_puts_r+0x5c>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	250a      	movs	r5, #10
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	6022      	str	r2, [r4, #0]
 800352c:	701d      	strb	r5, [r3, #0]
 800352e:	e7db      	b.n	80034e8 <_puts_r+0x60>

08003530 <puts>:
 8003530:	4b02      	ldr	r3, [pc, #8]	; (800353c <puts+0xc>)
 8003532:	4601      	mov	r1, r0
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f7ff bfa7 	b.w	8003488 <_puts_r>
 800353a:	bf00      	nop
 800353c:	20000064 	.word	0x20000064

08003540 <iscanf>:
 8003540:	b40f      	push	{r0, r1, r2, r3}
 8003542:	b507      	push	{r0, r1, r2, lr}
 8003544:	4906      	ldr	r1, [pc, #24]	; (8003560 <iscanf+0x20>)
 8003546:	ab04      	add	r3, sp, #16
 8003548:	6808      	ldr	r0, [r1, #0]
 800354a:	f853 2b04 	ldr.w	r2, [r3], #4
 800354e:	6841      	ldr	r1, [r0, #4]
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	f001 f8f7 	bl	8004744 <_vfiscanf_r>
 8003556:	b003      	add	sp, #12
 8003558:	f85d eb04 	ldr.w	lr, [sp], #4
 800355c:	b004      	add	sp, #16
 800355e:	4770      	bx	lr
 8003560:	20000064 	.word	0x20000064

08003564 <setvbuf>:
 8003564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003568:	461d      	mov	r5, r3
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <setvbuf+0x158>)
 800356c:	681f      	ldr	r7, [r3, #0]
 800356e:	4604      	mov	r4, r0
 8003570:	460e      	mov	r6, r1
 8003572:	4690      	mov	r8, r2
 8003574:	b127      	cbz	r7, 8003580 <setvbuf+0x1c>
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	b913      	cbnz	r3, 8003580 <setvbuf+0x1c>
 800357a:	4638      	mov	r0, r7
 800357c:	f7ff ff3c 	bl	80033f8 <__sinit>
 8003580:	f1b8 0f02 	cmp.w	r8, #2
 8003584:	d006      	beq.n	8003594 <setvbuf+0x30>
 8003586:	f1b8 0f01 	cmp.w	r8, #1
 800358a:	f200 8094 	bhi.w	80036b6 <setvbuf+0x152>
 800358e:	2d00      	cmp	r5, #0
 8003590:	f2c0 8091 	blt.w	80036b6 <setvbuf+0x152>
 8003594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003596:	07da      	lsls	r2, r3, #31
 8003598:	d405      	bmi.n	80035a6 <setvbuf+0x42>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	059b      	lsls	r3, r3, #22
 800359e:	d402      	bmi.n	80035a6 <setvbuf+0x42>
 80035a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a2:	f000 f9fe 	bl	80039a2 <__retarget_lock_acquire_recursive>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4638      	mov	r0, r7
 80035aa:	f001 fab3 	bl	8004b14 <_fflush_r>
 80035ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035b0:	b141      	cbz	r1, 80035c4 <setvbuf+0x60>
 80035b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035b6:	4299      	cmp	r1, r3
 80035b8:	d002      	beq.n	80035c0 <setvbuf+0x5c>
 80035ba:	4638      	mov	r0, r7
 80035bc:	f000 f9f4 	bl	80039a8 <_free_r>
 80035c0:	2300      	movs	r3, #0
 80035c2:	6363      	str	r3, [r4, #52]	; 0x34
 80035c4:	2300      	movs	r3, #0
 80035c6:	61a3      	str	r3, [r4, #24]
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	0618      	lsls	r0, r3, #24
 80035ce:	d503      	bpl.n	80035d8 <setvbuf+0x74>
 80035d0:	6921      	ldr	r1, [r4, #16]
 80035d2:	4638      	mov	r0, r7
 80035d4:	f000 f9e8 	bl	80039a8 <_free_r>
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	f1b8 0f02 	cmp.w	r8, #2
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	d05f      	beq.n	80036aa <setvbuf+0x146>
 80035ea:	ab01      	add	r3, sp, #4
 80035ec:	466a      	mov	r2, sp
 80035ee:	4621      	mov	r1, r4
 80035f0:	4638      	mov	r0, r7
 80035f2:	f001 fab7 	bl	8004b64 <__swhatbuf_r>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	4318      	orrs	r0, r3
 80035fa:	81a0      	strh	r0, [r4, #12]
 80035fc:	bb2d      	cbnz	r5, 800364a <setvbuf+0xe6>
 80035fe:	9d00      	ldr	r5, [sp, #0]
 8003600:	4628      	mov	r0, r5
 8003602:	f000 fa1d 	bl	8003a40 <malloc>
 8003606:	4606      	mov	r6, r0
 8003608:	2800      	cmp	r0, #0
 800360a:	d150      	bne.n	80036ae <setvbuf+0x14a>
 800360c:	f8dd 9000 	ldr.w	r9, [sp]
 8003610:	45a9      	cmp	r9, r5
 8003612:	d13e      	bne.n	8003692 <setvbuf+0x12e>
 8003614:	f04f 35ff 	mov.w	r5, #4294967295
 8003618:	2200      	movs	r2, #0
 800361a:	60a2      	str	r2, [r4, #8]
 800361c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003620:	6022      	str	r2, [r4, #0]
 8003622:	6122      	str	r2, [r4, #16]
 8003624:	2201      	movs	r2, #1
 8003626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800362a:	6162      	str	r2, [r4, #20]
 800362c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	07d1      	lsls	r1, r2, #31
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	d404      	bmi.n	8003642 <setvbuf+0xde>
 8003638:	059b      	lsls	r3, r3, #22
 800363a:	d402      	bmi.n	8003642 <setvbuf+0xde>
 800363c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363e:	f000 f9b1 	bl	80039a4 <__retarget_lock_release_recursive>
 8003642:	4628      	mov	r0, r5
 8003644:	b003      	add	sp, #12
 8003646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800364a:	2e00      	cmp	r6, #0
 800364c:	d0d8      	beq.n	8003600 <setvbuf+0x9c>
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	b913      	cbnz	r3, 8003658 <setvbuf+0xf4>
 8003652:	4638      	mov	r0, r7
 8003654:	f7ff fed0 	bl	80033f8 <__sinit>
 8003658:	f1b8 0f01 	cmp.w	r8, #1
 800365c:	bf08      	it	eq
 800365e:	89a3      	ldrheq	r3, [r4, #12]
 8003660:	6026      	str	r6, [r4, #0]
 8003662:	bf04      	itt	eq
 8003664:	f043 0301 	orreq.w	r3, r3, #1
 8003668:	81a3      	strheq	r3, [r4, #12]
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	f013 0208 	ands.w	r2, r3, #8
 8003670:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003674:	d01d      	beq.n	80036b2 <setvbuf+0x14e>
 8003676:	07da      	lsls	r2, r3, #31
 8003678:	bf41      	itttt	mi
 800367a:	2200      	movmi	r2, #0
 800367c:	426d      	negmi	r5, r5
 800367e:	60a2      	strmi	r2, [r4, #8]
 8003680:	61a5      	strmi	r5, [r4, #24]
 8003682:	bf58      	it	pl
 8003684:	60a5      	strpl	r5, [r4, #8]
 8003686:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003688:	f015 0501 	ands.w	r5, r5, #1
 800368c:	d0d4      	beq.n	8003638 <setvbuf+0xd4>
 800368e:	2500      	movs	r5, #0
 8003690:	e7d7      	b.n	8003642 <setvbuf+0xde>
 8003692:	4648      	mov	r0, r9
 8003694:	f000 f9d4 	bl	8003a40 <malloc>
 8003698:	4606      	mov	r6, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	d0ba      	beq.n	8003614 <setvbuf+0xb0>
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	464d      	mov	r5, r9
 80036a8:	e7d1      	b.n	800364e <setvbuf+0xea>
 80036aa:	2500      	movs	r5, #0
 80036ac:	e7b4      	b.n	8003618 <setvbuf+0xb4>
 80036ae:	46a9      	mov	r9, r5
 80036b0:	e7f5      	b.n	800369e <setvbuf+0x13a>
 80036b2:	60a2      	str	r2, [r4, #8]
 80036b4:	e7e7      	b.n	8003686 <setvbuf+0x122>
 80036b6:	f04f 35ff 	mov.w	r5, #4294967295
 80036ba:	e7c2      	b.n	8003642 <setvbuf+0xde>
 80036bc:	20000064 	.word	0x20000064

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b500      	push	{lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	ab1d      	add	r3, sp, #116	; 0x74
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <siprintf+0x38>)
 80036d2:	9107      	str	r1, [sp, #28]
 80036d4:	9104      	str	r1, [sp, #16]
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <siprintf+0x3c>)
 80036d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036dc:	9105      	str	r1, [sp, #20]
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	a902      	add	r1, sp, #8
 80036e4:	f000 faba 	bl	8003c5c <_svfiprintf_r>
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	b01c      	add	sp, #112	; 0x70
 80036f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f4:	b003      	add	sp, #12
 80036f6:	4770      	bx	lr
 80036f8:	20000064 	.word	0x20000064
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <__sread>:
 8003700:	b510      	push	{r4, lr}
 8003702:	460c      	mov	r4, r1
 8003704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003708:	f000 f8fc 	bl	8003904 <_read_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	bfab      	itete	ge
 8003710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003712:	89a3      	ldrhlt	r3, [r4, #12]
 8003714:	181b      	addge	r3, r3, r0
 8003716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800371a:	bfac      	ite	ge
 800371c:	6563      	strge	r3, [r4, #84]	; 0x54
 800371e:	81a3      	strhlt	r3, [r4, #12]
 8003720:	bd10      	pop	{r4, pc}

08003722 <__swrite>:
 8003722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003726:	461f      	mov	r7, r3
 8003728:	898b      	ldrh	r3, [r1, #12]
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	4605      	mov	r5, r0
 800372e:	460c      	mov	r4, r1
 8003730:	4616      	mov	r6, r2
 8003732:	d505      	bpl.n	8003740 <__swrite+0x1e>
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	2302      	movs	r3, #2
 800373a:	2200      	movs	r2, #0
 800373c:	f000 f8d0 	bl	80038e0 <_lseek_r>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	4632      	mov	r2, r6
 800374e:	463b      	mov	r3, r7
 8003750:	4628      	mov	r0, r5
 8003752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	f000 b8e7 	b.w	8003928 <_write_r>

0800375a <__sseek>:
 800375a:	b510      	push	{r4, lr}
 800375c:	460c      	mov	r4, r1
 800375e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003762:	f000 f8bd 	bl	80038e0 <_lseek_r>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	bf15      	itete	ne
 800376c:	6560      	strne	r0, [r4, #84]	; 0x54
 800376e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003776:	81a3      	strheq	r3, [r4, #12]
 8003778:	bf18      	it	ne
 800377a:	81a3      	strhne	r3, [r4, #12]
 800377c:	bd10      	pop	{r4, pc}

0800377e <__sclose>:
 800377e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003782:	f000 b89d 	b.w	80038c0 <_close_r>

08003786 <__swbuf_r>:
 8003786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003788:	460e      	mov	r6, r1
 800378a:	4614      	mov	r4, r2
 800378c:	4605      	mov	r5, r0
 800378e:	b118      	cbz	r0, 8003798 <__swbuf_r+0x12>
 8003790:	6a03      	ldr	r3, [r0, #32]
 8003792:	b90b      	cbnz	r3, 8003798 <__swbuf_r+0x12>
 8003794:	f7ff fe30 	bl	80033f8 <__sinit>
 8003798:	69a3      	ldr	r3, [r4, #24]
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	071a      	lsls	r2, r3, #28
 80037a0:	d525      	bpl.n	80037ee <__swbuf_r+0x68>
 80037a2:	6923      	ldr	r3, [r4, #16]
 80037a4:	b31b      	cbz	r3, 80037ee <__swbuf_r+0x68>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	1a98      	subs	r0, r3, r2
 80037ac:	6963      	ldr	r3, [r4, #20]
 80037ae:	b2f6      	uxtb	r6, r6
 80037b0:	4283      	cmp	r3, r0
 80037b2:	4637      	mov	r7, r6
 80037b4:	dc04      	bgt.n	80037c0 <__swbuf_r+0x3a>
 80037b6:	4621      	mov	r1, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	f001 f9ab 	bl	8004b14 <_fflush_r>
 80037be:	b9e0      	cbnz	r0, 80037fa <__swbuf_r+0x74>
 80037c0:	68a3      	ldr	r3, [r4, #8]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60a3      	str	r3, [r4, #8]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	6022      	str	r2, [r4, #0]
 80037cc:	701e      	strb	r6, [r3, #0]
 80037ce:	6962      	ldr	r2, [r4, #20]
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d004      	beq.n	80037e0 <__swbuf_r+0x5a>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	07db      	lsls	r3, r3, #31
 80037da:	d506      	bpl.n	80037ea <__swbuf_r+0x64>
 80037dc:	2e0a      	cmp	r6, #10
 80037de:	d104      	bne.n	80037ea <__swbuf_r+0x64>
 80037e0:	4621      	mov	r1, r4
 80037e2:	4628      	mov	r0, r5
 80037e4:	f001 f996 	bl	8004b14 <_fflush_r>
 80037e8:	b938      	cbnz	r0, 80037fa <__swbuf_r+0x74>
 80037ea:	4638      	mov	r0, r7
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ee:	4621      	mov	r1, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 f805 	bl	8003800 <__swsetup_r>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d0d5      	beq.n	80037a6 <__swbuf_r+0x20>
 80037fa:	f04f 37ff 	mov.w	r7, #4294967295
 80037fe:	e7f4      	b.n	80037ea <__swbuf_r+0x64>

08003800 <__swsetup_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <__swsetup_r+0xac>)
 8003804:	4605      	mov	r5, r0
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	460c      	mov	r4, r1
 800380a:	b118      	cbz	r0, 8003814 <__swsetup_r+0x14>
 800380c:	6a03      	ldr	r3, [r0, #32]
 800380e:	b90b      	cbnz	r3, 8003814 <__swsetup_r+0x14>
 8003810:	f7ff fdf2 	bl	80033f8 <__sinit>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800381a:	0718      	lsls	r0, r3, #28
 800381c:	d422      	bmi.n	8003864 <__swsetup_r+0x64>
 800381e:	06d9      	lsls	r1, r3, #27
 8003820:	d407      	bmi.n	8003832 <__swsetup_r+0x32>
 8003822:	2309      	movs	r3, #9
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800382a:	81a3      	strh	r3, [r4, #12]
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	e034      	b.n	800389c <__swsetup_r+0x9c>
 8003832:	0758      	lsls	r0, r3, #29
 8003834:	d512      	bpl.n	800385c <__swsetup_r+0x5c>
 8003836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003838:	b141      	cbz	r1, 800384c <__swsetup_r+0x4c>
 800383a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800383e:	4299      	cmp	r1, r3
 8003840:	d002      	beq.n	8003848 <__swsetup_r+0x48>
 8003842:	4628      	mov	r0, r5
 8003844:	f000 f8b0 	bl	80039a8 <_free_r>
 8003848:	2300      	movs	r3, #0
 800384a:	6363      	str	r3, [r4, #52]	; 0x34
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	2300      	movs	r3, #0
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f043 0308 	orr.w	r3, r3, #8
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	6923      	ldr	r3, [r4, #16]
 8003866:	b94b      	cbnz	r3, 800387c <__swsetup_r+0x7c>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800386e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003872:	d003      	beq.n	800387c <__swsetup_r+0x7c>
 8003874:	4621      	mov	r1, r4
 8003876:	4628      	mov	r0, r5
 8003878:	f001 f99a 	bl	8004bb0 <__smakebuf_r>
 800387c:	89a0      	ldrh	r0, [r4, #12]
 800387e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003882:	f010 0301 	ands.w	r3, r0, #1
 8003886:	d00a      	beq.n	800389e <__swsetup_r+0x9e>
 8003888:	2300      	movs	r3, #0
 800388a:	60a3      	str	r3, [r4, #8]
 800388c:	6963      	ldr	r3, [r4, #20]
 800388e:	425b      	negs	r3, r3
 8003890:	61a3      	str	r3, [r4, #24]
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	b943      	cbnz	r3, 80038a8 <__swsetup_r+0xa8>
 8003896:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800389a:	d1c4      	bne.n	8003826 <__swsetup_r+0x26>
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	0781      	lsls	r1, r0, #30
 80038a0:	bf58      	it	pl
 80038a2:	6963      	ldrpl	r3, [r4, #20]
 80038a4:	60a3      	str	r3, [r4, #8]
 80038a6:	e7f4      	b.n	8003892 <__swsetup_r+0x92>
 80038a8:	2000      	movs	r0, #0
 80038aa:	e7f7      	b.n	800389c <__swsetup_r+0x9c>
 80038ac:	20000064 	.word	0x20000064

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <_close_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_close_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd f9cd 	bl	8000c6a <_close>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_close_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_close_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20000258 	.word	0x20000258

080038e0 <_lseek_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d07      	ldr	r5, [pc, #28]	; (8003900 <_lseek_r+0x20>)
 80038e4:	4604      	mov	r4, r0
 80038e6:	4608      	mov	r0, r1
 80038e8:	4611      	mov	r1, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	602a      	str	r2, [r5, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f7fd f9e2 	bl	8000cb8 <_lseek>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_lseek_r+0x1e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_lseek_r+0x1e>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	20000258 	.word	0x20000258

08003904 <_read_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_read_r+0x20>)
 8003908:	4604      	mov	r4, r0
 800390a:	4608      	mov	r0, r1
 800390c:	4611      	mov	r1, r2
 800390e:	2200      	movs	r2, #0
 8003910:	602a      	str	r2, [r5, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fd f970 	bl	8000bf8 <_read>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_read_r+0x1e>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_read_r+0x1e>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	20000258 	.word	0x20000258

08003928 <_write_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d07      	ldr	r5, [pc, #28]	; (8003948 <_write_r+0x20>)
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	2200      	movs	r2, #0
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fd f97b 	bl	8000c32 <_write>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_write_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_write_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20000258 	.word	0x20000258

0800394c <__errno>:
 800394c:	4b01      	ldr	r3, [pc, #4]	; (8003954 <__errno+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000064 	.word	0x20000064

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4d0d      	ldr	r5, [pc, #52]	; (8003990 <__libc_init_array+0x38>)
 800395c:	4c0d      	ldr	r4, [pc, #52]	; (8003994 <__libc_init_array+0x3c>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	2600      	movs	r6, #0
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	4d0b      	ldr	r5, [pc, #44]	; (8003998 <__libc_init_array+0x40>)
 800396a:	4c0c      	ldr	r4, [pc, #48]	; (800399c <__libc_init_array+0x44>)
 800396c:	f001 fc64 	bl	8005238 <_init>
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	2600      	movs	r6, #0
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	08005458 	.word	0x08005458
 8003994:	08005458 	.word	0x08005458
 8003998:	08005458 	.word	0x08005458
 800399c:	0800545c 	.word	0x0800545c

080039a0 <__retarget_lock_init_recursive>:
 80039a0:	4770      	bx	lr

080039a2 <__retarget_lock_acquire_recursive>:
 80039a2:	4770      	bx	lr

080039a4 <__retarget_lock_release_recursive>:
 80039a4:	4770      	bx	lr
	...

080039a8 <_free_r>:
 80039a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039aa:	2900      	cmp	r1, #0
 80039ac:	d044      	beq.n	8003a38 <_free_r+0x90>
 80039ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b2:	9001      	str	r0, [sp, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f1a1 0404 	sub.w	r4, r1, #4
 80039ba:	bfb8      	it	lt
 80039bc:	18e4      	addlt	r4, r4, r3
 80039be:	f000 f8e7 	bl	8003b90 <__malloc_lock>
 80039c2:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <_free_r+0x94>)
 80039c4:	9801      	ldr	r0, [sp, #4]
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	b933      	cbnz	r3, 80039d8 <_free_r+0x30>
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	6014      	str	r4, [r2, #0]
 80039ce:	b003      	add	sp, #12
 80039d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039d4:	f000 b8e2 	b.w	8003b9c <__malloc_unlock>
 80039d8:	42a3      	cmp	r3, r4
 80039da:	d908      	bls.n	80039ee <_free_r+0x46>
 80039dc:	6825      	ldr	r5, [r4, #0]
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf01      	itttt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	1949      	addeq	r1, r1, r5
 80039ea:	6021      	streq	r1, [r4, #0]
 80039ec:	e7ed      	b.n	80039ca <_free_r+0x22>
 80039ee:	461a      	mov	r2, r3
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b10b      	cbz	r3, 80039f8 <_free_r+0x50>
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	d9fa      	bls.n	80039ee <_free_r+0x46>
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	1855      	adds	r5, r2, r1
 80039fc:	42a5      	cmp	r5, r4
 80039fe:	d10b      	bne.n	8003a18 <_free_r+0x70>
 8003a00:	6824      	ldr	r4, [r4, #0]
 8003a02:	4421      	add	r1, r4
 8003a04:	1854      	adds	r4, r2, r1
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	d1e0      	bne.n	80039ce <_free_r+0x26>
 8003a0c:	681c      	ldr	r4, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	6053      	str	r3, [r2, #4]
 8003a12:	440c      	add	r4, r1
 8003a14:	6014      	str	r4, [r2, #0]
 8003a16:	e7da      	b.n	80039ce <_free_r+0x26>
 8003a18:	d902      	bls.n	8003a20 <_free_r+0x78>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	6003      	str	r3, [r0, #0]
 8003a1e:	e7d6      	b.n	80039ce <_free_r+0x26>
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	1961      	adds	r1, r4, r5
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf04      	itt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	bf04      	itt	eq
 8003a30:	1949      	addeq	r1, r1, r5
 8003a32:	6021      	streq	r1, [r4, #0]
 8003a34:	6054      	str	r4, [r2, #4]
 8003a36:	e7ca      	b.n	80039ce <_free_r+0x26>
 8003a38:	b003      	add	sp, #12
 8003a3a:	bd30      	pop	{r4, r5, pc}
 8003a3c:	20000260 	.word	0x20000260

08003a40 <malloc>:
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <malloc+0xc>)
 8003a42:	4601      	mov	r1, r0
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f000 b823 	b.w	8003a90 <_malloc_r>
 8003a4a:	bf00      	nop
 8003a4c:	20000064 	.word	0x20000064

08003a50 <sbrk_aligned>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0e      	ldr	r6, [pc, #56]	; (8003a8c <sbrk_aligned+0x3c>)
 8003a54:	460c      	mov	r4, r1
 8003a56:	6831      	ldr	r1, [r6, #0]
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b911      	cbnz	r1, 8003a62 <sbrk_aligned+0x12>
 8003a5c:	f001 fa9e 	bl	8004f9c <_sbrk_r>
 8003a60:	6030      	str	r0, [r6, #0]
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f001 fa99 	bl	8004f9c <_sbrk_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d00a      	beq.n	8003a84 <sbrk_aligned+0x34>
 8003a6e:	1cc4      	adds	r4, r0, #3
 8003a70:	f024 0403 	bic.w	r4, r4, #3
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d007      	beq.n	8003a88 <sbrk_aligned+0x38>
 8003a78:	1a21      	subs	r1, r4, r0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f001 fa8e 	bl	8004f9c <_sbrk_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d101      	bne.n	8003a88 <sbrk_aligned+0x38>
 8003a84:	f04f 34ff 	mov.w	r4, #4294967295
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	20000264 	.word	0x20000264

08003a90 <_malloc_r>:
 8003a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a94:	1ccd      	adds	r5, r1, #3
 8003a96:	f025 0503 	bic.w	r5, r5, #3
 8003a9a:	3508      	adds	r5, #8
 8003a9c:	2d0c      	cmp	r5, #12
 8003a9e:	bf38      	it	cc
 8003aa0:	250c      	movcc	r5, #12
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	db01      	blt.n	8003aac <_malloc_r+0x1c>
 8003aa8:	42a9      	cmp	r1, r5
 8003aaa:	d905      	bls.n	8003ab8 <_malloc_r+0x28>
 8003aac:	230c      	movs	r3, #12
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b8c <_malloc_r+0xfc>
 8003abc:	f000 f868 	bl	8003b90 <__malloc_lock>
 8003ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac4:	461c      	mov	r4, r3
 8003ac6:	bb5c      	cbnz	r4, 8003b20 <_malloc_r+0x90>
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4638      	mov	r0, r7
 8003acc:	f7ff ffc0 	bl	8003a50 <sbrk_aligned>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	d155      	bne.n	8003b82 <_malloc_r+0xf2>
 8003ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8003ada:	4626      	mov	r6, r4
 8003adc:	2e00      	cmp	r6, #0
 8003ade:	d145      	bne.n	8003b6c <_malloc_r+0xdc>
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d048      	beq.n	8003b76 <_malloc_r+0xe6>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4638      	mov	r0, r7
 8003aea:	eb04 0903 	add.w	r9, r4, r3
 8003aee:	f001 fa55 	bl	8004f9c <_sbrk_r>
 8003af2:	4581      	cmp	r9, r0
 8003af4:	d13f      	bne.n	8003b76 <_malloc_r+0xe6>
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	1a6d      	subs	r5, r5, r1
 8003afa:	4629      	mov	r1, r5
 8003afc:	4638      	mov	r0, r7
 8003afe:	f7ff ffa7 	bl	8003a50 <sbrk_aligned>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d037      	beq.n	8003b76 <_malloc_r+0xe6>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	442b      	add	r3, r5
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d038      	beq.n	8003b86 <_malloc_r+0xf6>
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	42a2      	cmp	r2, r4
 8003b18:	d12b      	bne.n	8003b72 <_malloc_r+0xe2>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	e00f      	b.n	8003b40 <_malloc_r+0xb0>
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	1b52      	subs	r2, r2, r5
 8003b24:	d41f      	bmi.n	8003b66 <_malloc_r+0xd6>
 8003b26:	2a0b      	cmp	r2, #11
 8003b28:	d917      	bls.n	8003b5a <_malloc_r+0xca>
 8003b2a:	1961      	adds	r1, r4, r5
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	6025      	str	r5, [r4, #0]
 8003b30:	bf18      	it	ne
 8003b32:	6059      	strne	r1, [r3, #4]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	bf08      	it	eq
 8003b38:	f8c8 1000 	streq.w	r1, [r8]
 8003b3c:	5162      	str	r2, [r4, r5]
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	4638      	mov	r0, r7
 8003b42:	f104 060b 	add.w	r6, r4, #11
 8003b46:	f000 f829 	bl	8003b9c <__malloc_unlock>
 8003b4a:	f026 0607 	bic.w	r6, r6, #7
 8003b4e:	1d23      	adds	r3, r4, #4
 8003b50:	1af2      	subs	r2, r6, r3
 8003b52:	d0ae      	beq.n	8003ab2 <_malloc_r+0x22>
 8003b54:	1b9b      	subs	r3, r3, r6
 8003b56:	50a3      	str	r3, [r4, r2]
 8003b58:	e7ab      	b.n	8003ab2 <_malloc_r+0x22>
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	6862      	ldr	r2, [r4, #4]
 8003b5e:	d1dd      	bne.n	8003b1c <_malloc_r+0x8c>
 8003b60:	f8c8 2000 	str.w	r2, [r8]
 8003b64:	e7ec      	b.n	8003b40 <_malloc_r+0xb0>
 8003b66:	4623      	mov	r3, r4
 8003b68:	6864      	ldr	r4, [r4, #4]
 8003b6a:	e7ac      	b.n	8003ac6 <_malloc_r+0x36>
 8003b6c:	4634      	mov	r4, r6
 8003b6e:	6876      	ldr	r6, [r6, #4]
 8003b70:	e7b4      	b.n	8003adc <_malloc_r+0x4c>
 8003b72:	4613      	mov	r3, r2
 8003b74:	e7cc      	b.n	8003b10 <_malloc_r+0x80>
 8003b76:	230c      	movs	r3, #12
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f000 f80e 	bl	8003b9c <__malloc_unlock>
 8003b80:	e797      	b.n	8003ab2 <_malloc_r+0x22>
 8003b82:	6025      	str	r5, [r4, #0]
 8003b84:	e7dc      	b.n	8003b40 <_malloc_r+0xb0>
 8003b86:	605b      	str	r3, [r3, #4]
 8003b88:	deff      	udf	#255	; 0xff
 8003b8a:	bf00      	nop
 8003b8c:	20000260 	.word	0x20000260

08003b90 <__malloc_lock>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__malloc_lock+0x8>)
 8003b92:	f7ff bf06 	b.w	80039a2 <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	2000025c 	.word	0x2000025c

08003b9c <__malloc_unlock>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__malloc_unlock+0x8>)
 8003b9e:	f7ff bf01 	b.w	80039a4 <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	2000025c 	.word	0x2000025c

08003ba8 <__ssputs_r>:
 8003ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bac:	688e      	ldr	r6, [r1, #8]
 8003bae:	461f      	mov	r7, r3
 8003bb0:	42be      	cmp	r6, r7
 8003bb2:	680b      	ldr	r3, [r1, #0]
 8003bb4:	4682      	mov	sl, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	4690      	mov	r8, r2
 8003bba:	d82c      	bhi.n	8003c16 <__ssputs_r+0x6e>
 8003bbc:	898a      	ldrh	r2, [r1, #12]
 8003bbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bc2:	d026      	beq.n	8003c12 <__ssputs_r+0x6a>
 8003bc4:	6965      	ldr	r5, [r4, #20]
 8003bc6:	6909      	ldr	r1, [r1, #16]
 8003bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bcc:	eba3 0901 	sub.w	r9, r3, r1
 8003bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bd4:	1c7b      	adds	r3, r7, #1
 8003bd6:	444b      	add	r3, r9
 8003bd8:	106d      	asrs	r5, r5, #1
 8003bda:	429d      	cmp	r5, r3
 8003bdc:	bf38      	it	cc
 8003bde:	461d      	movcc	r5, r3
 8003be0:	0553      	lsls	r3, r2, #21
 8003be2:	d527      	bpl.n	8003c34 <__ssputs_r+0x8c>
 8003be4:	4629      	mov	r1, r5
 8003be6:	f7ff ff53 	bl	8003a90 <_malloc_r>
 8003bea:	4606      	mov	r6, r0
 8003bec:	b360      	cbz	r0, 8003c48 <__ssputs_r+0xa0>
 8003bee:	6921      	ldr	r1, [r4, #16]
 8003bf0:	464a      	mov	r2, r9
 8003bf2:	f001 f9e3 	bl	8004fbc <memcpy>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	6126      	str	r6, [r4, #16]
 8003c04:	6165      	str	r5, [r4, #20]
 8003c06:	444e      	add	r6, r9
 8003c08:	eba5 0509 	sub.w	r5, r5, r9
 8003c0c:	6026      	str	r6, [r4, #0]
 8003c0e:	60a5      	str	r5, [r4, #8]
 8003c10:	463e      	mov	r6, r7
 8003c12:	42be      	cmp	r6, r7
 8003c14:	d900      	bls.n	8003c18 <__ssputs_r+0x70>
 8003c16:	463e      	mov	r6, r7
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	f001 f980 	bl	8004f22 <memmove>
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	1b9b      	subs	r3, r3, r6
 8003c26:	60a3      	str	r3, [r4, #8]
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	4433      	add	r3, r6
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	462a      	mov	r2, r5
 8003c36:	f001 f9cf 	bl	8004fd8 <_realloc_r>
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d1e0      	bne.n	8003c02 <__ssputs_r+0x5a>
 8003c40:	6921      	ldr	r1, [r4, #16]
 8003c42:	4650      	mov	r0, sl
 8003c44:	f7ff feb0 	bl	80039a8 <_free_r>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	f8ca 3000 	str.w	r3, [sl]
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5a:	e7e9      	b.n	8003c30 <__ssputs_r+0x88>

08003c5c <_svfiprintf_r>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	4698      	mov	r8, r3
 8003c62:	898b      	ldrh	r3, [r1, #12]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	b09d      	sub	sp, #116	; 0x74
 8003c68:	4607      	mov	r7, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	d50e      	bpl.n	8003c8e <_svfiprintf_r+0x32>
 8003c70:	690b      	ldr	r3, [r1, #16]
 8003c72:	b963      	cbnz	r3, 8003c8e <_svfiprintf_r+0x32>
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	f7ff ff0b 	bl	8003a90 <_malloc_r>
 8003c7a:	6028      	str	r0, [r5, #0]
 8003c7c:	6128      	str	r0, [r5, #16]
 8003c7e:	b920      	cbnz	r0, 8003c8a <_svfiprintf_r+0x2e>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	e0d0      	b.n	8003e2c <_svfiprintf_r+0x1d0>
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	616b      	str	r3, [r5, #20]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9309      	str	r3, [sp, #36]	; 0x24
 8003c92:	2320      	movs	r3, #32
 8003c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c9c:	2330      	movs	r3, #48	; 0x30
 8003c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e44 <_svfiprintf_r+0x1e8>
 8003ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ca6:	f04f 0901 	mov.w	r9, #1
 8003caa:	4623      	mov	r3, r4
 8003cac:	469a      	mov	sl, r3
 8003cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cb2:	b10a      	cbz	r2, 8003cb8 <_svfiprintf_r+0x5c>
 8003cb4:	2a25      	cmp	r2, #37	; 0x25
 8003cb6:	d1f9      	bne.n	8003cac <_svfiprintf_r+0x50>
 8003cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cbc:	d00b      	beq.n	8003cd6 <_svfiprintf_r+0x7a>
 8003cbe:	465b      	mov	r3, fp
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7ff ff6f 	bl	8003ba8 <__ssputs_r>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f000 80a9 	beq.w	8003e22 <_svfiprintf_r+0x1c6>
 8003cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cd2:	445a      	add	r2, fp
 8003cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a1 	beq.w	8003e22 <_svfiprintf_r+0x1c6>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cea:	f10a 0a01 	add.w	sl, sl, #1
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	9307      	str	r3, [sp, #28]
 8003cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003cf8:	4654      	mov	r4, sl
 8003cfa:	2205      	movs	r2, #5
 8003cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d00:	4850      	ldr	r0, [pc, #320]	; (8003e44 <_svfiprintf_r+0x1e8>)
 8003d02:	f7fc fa6d 	bl	80001e0 <memchr>
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	b9d8      	cbnz	r0, 8003d42 <_svfiprintf_r+0xe6>
 8003d0a:	06d0      	lsls	r0, r2, #27
 8003d0c:	bf44      	itt	mi
 8003d0e:	2320      	movmi	r3, #32
 8003d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d14:	0711      	lsls	r1, r2, #28
 8003d16:	bf44      	itt	mi
 8003d18:	232b      	movmi	r3, #43	; 0x2b
 8003d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b2a      	cmp	r3, #42	; 0x2a
 8003d24:	d015      	beq.n	8003d52 <_svfiprintf_r+0xf6>
 8003d26:	9a07      	ldr	r2, [sp, #28]
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f04f 0c0a 	mov.w	ip, #10
 8003d30:	4621      	mov	r1, r4
 8003d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d36:	3b30      	subs	r3, #48	; 0x30
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	d94d      	bls.n	8003dd8 <_svfiprintf_r+0x17c>
 8003d3c:	b1b0      	cbz	r0, 8003d6c <_svfiprintf_r+0x110>
 8003d3e:	9207      	str	r2, [sp, #28]
 8003d40:	e014      	b.n	8003d6c <_svfiprintf_r+0x110>
 8003d42:	eba0 0308 	sub.w	r3, r0, r8
 8003d46:	fa09 f303 	lsl.w	r3, r9, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	46a2      	mov	sl, r4
 8003d50:	e7d2      	b.n	8003cf8 <_svfiprintf_r+0x9c>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	1d19      	adds	r1, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9103      	str	r1, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfbb      	ittet	lt
 8003d5e:	425b      	neglt	r3, r3
 8003d60:	f042 0202 	orrlt.w	r2, r2, #2
 8003d64:	9307      	strge	r3, [sp, #28]
 8003d66:	9307      	strlt	r3, [sp, #28]
 8003d68:	bfb8      	it	lt
 8003d6a:	9204      	strlt	r2, [sp, #16]
 8003d6c:	7823      	ldrb	r3, [r4, #0]
 8003d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d70:	d10c      	bne.n	8003d8c <_svfiprintf_r+0x130>
 8003d72:	7863      	ldrb	r3, [r4, #1]
 8003d74:	2b2a      	cmp	r3, #42	; 0x2a
 8003d76:	d134      	bne.n	8003de2 <_svfiprintf_r+0x186>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	1d1a      	adds	r2, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9203      	str	r2, [sp, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfb8      	it	lt
 8003d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d88:	3402      	adds	r4, #2
 8003d8a:	9305      	str	r3, [sp, #20]
 8003d8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e54 <_svfiprintf_r+0x1f8>
 8003d90:	7821      	ldrb	r1, [r4, #0]
 8003d92:	2203      	movs	r2, #3
 8003d94:	4650      	mov	r0, sl
 8003d96:	f7fc fa23 	bl	80001e0 <memchr>
 8003d9a:	b138      	cbz	r0, 8003dac <_svfiprintf_r+0x150>
 8003d9c:	9b04      	ldr	r3, [sp, #16]
 8003d9e:	eba0 000a 	sub.w	r0, r0, sl
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	4082      	lsls	r2, r0
 8003da6:	4313      	orrs	r3, r2
 8003da8:	3401      	adds	r4, #1
 8003daa:	9304      	str	r3, [sp, #16]
 8003dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db0:	4825      	ldr	r0, [pc, #148]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003db6:	2206      	movs	r2, #6
 8003db8:	f7fc fa12 	bl	80001e0 <memchr>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d038      	beq.n	8003e32 <_svfiprintf_r+0x1d6>
 8003dc0:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <_svfiprintf_r+0x1f0>)
 8003dc2:	bb1b      	cbnz	r3, 8003e0c <_svfiprintf_r+0x1b0>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	3307      	adds	r3, #7
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	3308      	adds	r3, #8
 8003dce:	9303      	str	r3, [sp, #12]
 8003dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd2:	4433      	add	r3, r6
 8003dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd6:	e768      	b.n	8003caa <_svfiprintf_r+0x4e>
 8003dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ddc:	460c      	mov	r4, r1
 8003dde:	2001      	movs	r0, #1
 8003de0:	e7a6      	b.n	8003d30 <_svfiprintf_r+0xd4>
 8003de2:	2300      	movs	r3, #0
 8003de4:	3401      	adds	r4, #1
 8003de6:	9305      	str	r3, [sp, #20]
 8003de8:	4619      	mov	r1, r3
 8003dea:	f04f 0c0a 	mov.w	ip, #10
 8003dee:	4620      	mov	r0, r4
 8003df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003df4:	3a30      	subs	r2, #48	; 0x30
 8003df6:	2a09      	cmp	r2, #9
 8003df8:	d903      	bls.n	8003e02 <_svfiprintf_r+0x1a6>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0c6      	beq.n	8003d8c <_svfiprintf_r+0x130>
 8003dfe:	9105      	str	r1, [sp, #20]
 8003e00:	e7c4      	b.n	8003d8c <_svfiprintf_r+0x130>
 8003e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e06:	4604      	mov	r4, r0
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e7f0      	b.n	8003dee <_svfiprintf_r+0x192>
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	462a      	mov	r2, r5
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <_svfiprintf_r+0x1f4>)
 8003e14:	a904      	add	r1, sp, #16
 8003e16:	4638      	mov	r0, r7
 8003e18:	f3af 8000 	nop.w
 8003e1c:	1c42      	adds	r2, r0, #1
 8003e1e:	4606      	mov	r6, r0
 8003e20:	d1d6      	bne.n	8003dd0 <_svfiprintf_r+0x174>
 8003e22:	89ab      	ldrh	r3, [r5, #12]
 8003e24:	065b      	lsls	r3, r3, #25
 8003e26:	f53f af2d 	bmi.w	8003c84 <_svfiprintf_r+0x28>
 8003e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e2c:	b01d      	add	sp, #116	; 0x74
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e32:	ab03      	add	r3, sp, #12
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	462a      	mov	r2, r5
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <_svfiprintf_r+0x1f4>)
 8003e3a:	a904      	add	r1, sp, #16
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f000 f9bd 	bl	80041bc <_printf_i>
 8003e42:	e7eb      	b.n	8003e1c <_svfiprintf_r+0x1c0>
 8003e44:	08005300 	.word	0x08005300
 8003e48:	0800530a 	.word	0x0800530a
 8003e4c:	00000000 	.word	0x00000000
 8003e50:	08003ba9 	.word	0x08003ba9
 8003e54:	08005306 	.word	0x08005306

08003e58 <__sfputc_r>:
 8003e58:	6893      	ldr	r3, [r2, #8]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	b410      	push	{r4}
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	da08      	bge.n	8003e76 <__sfputc_r+0x1e>
 8003e64:	6994      	ldr	r4, [r2, #24]
 8003e66:	42a3      	cmp	r3, r4
 8003e68:	db01      	blt.n	8003e6e <__sfputc_r+0x16>
 8003e6a:	290a      	cmp	r1, #10
 8003e6c:	d103      	bne.n	8003e76 <__sfputc_r+0x1e>
 8003e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e72:	f7ff bc88 	b.w	8003786 <__swbuf_r>
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	1c58      	adds	r0, r3, #1
 8003e7a:	6010      	str	r0, [r2, #0]
 8003e7c:	7019      	strb	r1, [r3, #0]
 8003e7e:	4608      	mov	r0, r1
 8003e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <__sfputs_r>:
 8003e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e88:	4606      	mov	r6, r0
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	18d5      	adds	r5, r2, r3
 8003e90:	42ac      	cmp	r4, r5
 8003e92:	d101      	bne.n	8003e98 <__sfputs_r+0x12>
 8003e94:	2000      	movs	r0, #0
 8003e96:	e007      	b.n	8003ea8 <__sfputs_r+0x22>
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	463a      	mov	r2, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ffda 	bl	8003e58 <__sfputc_r>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d1f3      	bne.n	8003e90 <__sfputs_r+0xa>
 8003ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eac <_vfiprintf_r>:
 8003eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	460d      	mov	r5, r1
 8003eb2:	b09d      	sub	sp, #116	; 0x74
 8003eb4:	4614      	mov	r4, r2
 8003eb6:	4698      	mov	r8, r3
 8003eb8:	4606      	mov	r6, r0
 8003eba:	b118      	cbz	r0, 8003ec4 <_vfiprintf_r+0x18>
 8003ebc:	6a03      	ldr	r3, [r0, #32]
 8003ebe:	b90b      	cbnz	r3, 8003ec4 <_vfiprintf_r+0x18>
 8003ec0:	f7ff fa9a 	bl	80033f8 <__sinit>
 8003ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ec6:	07d9      	lsls	r1, r3, #31
 8003ec8:	d405      	bmi.n	8003ed6 <_vfiprintf_r+0x2a>
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	059a      	lsls	r2, r3, #22
 8003ece:	d402      	bmi.n	8003ed6 <_vfiprintf_r+0x2a>
 8003ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ed2:	f7ff fd66 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	071b      	lsls	r3, r3, #28
 8003eda:	d501      	bpl.n	8003ee0 <_vfiprintf_r+0x34>
 8003edc:	692b      	ldr	r3, [r5, #16]
 8003ede:	b99b      	cbnz	r3, 8003f08 <_vfiprintf_r+0x5c>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff fc8c 	bl	8003800 <__swsetup_r>
 8003ee8:	b170      	cbz	r0, 8003f08 <_vfiprintf_r+0x5c>
 8003eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eec:	07dc      	lsls	r4, r3, #31
 8003eee:	d504      	bpl.n	8003efa <_vfiprintf_r+0x4e>
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	b01d      	add	sp, #116	; 0x74
 8003ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	0598      	lsls	r0, r3, #22
 8003efe:	d4f7      	bmi.n	8003ef0 <_vfiprintf_r+0x44>
 8003f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f02:	f7ff fd4f 	bl	80039a4 <__retarget_lock_release_recursive>
 8003f06:	e7f3      	b.n	8003ef0 <_vfiprintf_r+0x44>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f16:	2330      	movs	r3, #48	; 0x30
 8003f18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040cc <_vfiprintf_r+0x220>
 8003f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f20:	f04f 0901 	mov.w	r9, #1
 8003f24:	4623      	mov	r3, r4
 8003f26:	469a      	mov	sl, r3
 8003f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f2c:	b10a      	cbz	r2, 8003f32 <_vfiprintf_r+0x86>
 8003f2e:	2a25      	cmp	r2, #37	; 0x25
 8003f30:	d1f9      	bne.n	8003f26 <_vfiprintf_r+0x7a>
 8003f32:	ebba 0b04 	subs.w	fp, sl, r4
 8003f36:	d00b      	beq.n	8003f50 <_vfiprintf_r+0xa4>
 8003f38:	465b      	mov	r3, fp
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f7ff ffa1 	bl	8003e86 <__sfputs_r>
 8003f44:	3001      	adds	r0, #1
 8003f46:	f000 80a9 	beq.w	800409c <_vfiprintf_r+0x1f0>
 8003f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f4c:	445a      	add	r2, fp
 8003f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f50:	f89a 3000 	ldrb.w	r3, [sl]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a1 	beq.w	800409c <_vfiprintf_r+0x1f0>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f64:	f10a 0a01 	add.w	sl, sl, #1
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f70:	931a      	str	r3, [sp, #104]	; 0x68
 8003f72:	4654      	mov	r4, sl
 8003f74:	2205      	movs	r2, #5
 8003f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <_vfiprintf_r+0x220>)
 8003f7c:	f7fc f930 	bl	80001e0 <memchr>
 8003f80:	9a04      	ldr	r2, [sp, #16]
 8003f82:	b9d8      	cbnz	r0, 8003fbc <_vfiprintf_r+0x110>
 8003f84:	06d1      	lsls	r1, r2, #27
 8003f86:	bf44      	itt	mi
 8003f88:	2320      	movmi	r3, #32
 8003f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8e:	0713      	lsls	r3, r2, #28
 8003f90:	bf44      	itt	mi
 8003f92:	232b      	movmi	r3, #43	; 0x2b
 8003f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f98:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d015      	beq.n	8003fcc <_vfiprintf_r+0x120>
 8003fa0:	9a07      	ldr	r2, [sp, #28]
 8003fa2:	4654      	mov	r4, sl
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f04f 0c0a 	mov.w	ip, #10
 8003faa:	4621      	mov	r1, r4
 8003fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb0:	3b30      	subs	r3, #48	; 0x30
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d94d      	bls.n	8004052 <_vfiprintf_r+0x1a6>
 8003fb6:	b1b0      	cbz	r0, 8003fe6 <_vfiprintf_r+0x13a>
 8003fb8:	9207      	str	r2, [sp, #28]
 8003fba:	e014      	b.n	8003fe6 <_vfiprintf_r+0x13a>
 8003fbc:	eba0 0308 	sub.w	r3, r0, r8
 8003fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	9304      	str	r3, [sp, #16]
 8003fc8:	46a2      	mov	sl, r4
 8003fca:	e7d2      	b.n	8003f72 <_vfiprintf_r+0xc6>
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	1d19      	adds	r1, r3, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	9103      	str	r1, [sp, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bfbb      	ittet	lt
 8003fd8:	425b      	neglt	r3, r3
 8003fda:	f042 0202 	orrlt.w	r2, r2, #2
 8003fde:	9307      	strge	r3, [sp, #28]
 8003fe0:	9307      	strlt	r3, [sp, #28]
 8003fe2:	bfb8      	it	lt
 8003fe4:	9204      	strlt	r2, [sp, #16]
 8003fe6:	7823      	ldrb	r3, [r4, #0]
 8003fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fea:	d10c      	bne.n	8004006 <_vfiprintf_r+0x15a>
 8003fec:	7863      	ldrb	r3, [r4, #1]
 8003fee:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff0:	d134      	bne.n	800405c <_vfiprintf_r+0x1b0>
 8003ff2:	9b03      	ldr	r3, [sp, #12]
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	9203      	str	r2, [sp, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfb8      	it	lt
 8003ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004002:	3402      	adds	r4, #2
 8004004:	9305      	str	r3, [sp, #20]
 8004006:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80040dc <_vfiprintf_r+0x230>
 800400a:	7821      	ldrb	r1, [r4, #0]
 800400c:	2203      	movs	r2, #3
 800400e:	4650      	mov	r0, sl
 8004010:	f7fc f8e6 	bl	80001e0 <memchr>
 8004014:	b138      	cbz	r0, 8004026 <_vfiprintf_r+0x17a>
 8004016:	9b04      	ldr	r3, [sp, #16]
 8004018:	eba0 000a 	sub.w	r0, r0, sl
 800401c:	2240      	movs	r2, #64	; 0x40
 800401e:	4082      	lsls	r2, r0
 8004020:	4313      	orrs	r3, r2
 8004022:	3401      	adds	r4, #1
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402a:	4829      	ldr	r0, [pc, #164]	; (80040d0 <_vfiprintf_r+0x224>)
 800402c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004030:	2206      	movs	r2, #6
 8004032:	f7fc f8d5 	bl	80001e0 <memchr>
 8004036:	2800      	cmp	r0, #0
 8004038:	d03f      	beq.n	80040ba <_vfiprintf_r+0x20e>
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <_vfiprintf_r+0x228>)
 800403c:	bb1b      	cbnz	r3, 8004086 <_vfiprintf_r+0x1da>
 800403e:	9b03      	ldr	r3, [sp, #12]
 8004040:	3307      	adds	r3, #7
 8004042:	f023 0307 	bic.w	r3, r3, #7
 8004046:	3308      	adds	r3, #8
 8004048:	9303      	str	r3, [sp, #12]
 800404a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404c:	443b      	add	r3, r7
 800404e:	9309      	str	r3, [sp, #36]	; 0x24
 8004050:	e768      	b.n	8003f24 <_vfiprintf_r+0x78>
 8004052:	fb0c 3202 	mla	r2, ip, r2, r3
 8004056:	460c      	mov	r4, r1
 8004058:	2001      	movs	r0, #1
 800405a:	e7a6      	b.n	8003faa <_vfiprintf_r+0xfe>
 800405c:	2300      	movs	r3, #0
 800405e:	3401      	adds	r4, #1
 8004060:	9305      	str	r3, [sp, #20]
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 0c0a 	mov.w	ip, #10
 8004068:	4620      	mov	r0, r4
 800406a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406e:	3a30      	subs	r2, #48	; 0x30
 8004070:	2a09      	cmp	r2, #9
 8004072:	d903      	bls.n	800407c <_vfiprintf_r+0x1d0>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0c6      	beq.n	8004006 <_vfiprintf_r+0x15a>
 8004078:	9105      	str	r1, [sp, #20]
 800407a:	e7c4      	b.n	8004006 <_vfiprintf_r+0x15a>
 800407c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004080:	4604      	mov	r4, r0
 8004082:	2301      	movs	r3, #1
 8004084:	e7f0      	b.n	8004068 <_vfiprintf_r+0x1bc>
 8004086:	ab03      	add	r3, sp, #12
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	462a      	mov	r2, r5
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <_vfiprintf_r+0x22c>)
 800408e:	a904      	add	r1, sp, #16
 8004090:	4630      	mov	r0, r6
 8004092:	f3af 8000 	nop.w
 8004096:	4607      	mov	r7, r0
 8004098:	1c78      	adds	r0, r7, #1
 800409a:	d1d6      	bne.n	800404a <_vfiprintf_r+0x19e>
 800409c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409e:	07d9      	lsls	r1, r3, #31
 80040a0:	d405      	bmi.n	80040ae <_vfiprintf_r+0x202>
 80040a2:	89ab      	ldrh	r3, [r5, #12]
 80040a4:	059a      	lsls	r2, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_vfiprintf_r+0x202>
 80040a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040aa:	f7ff fc7b 	bl	80039a4 <__retarget_lock_release_recursive>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	065b      	lsls	r3, r3, #25
 80040b2:	f53f af1d 	bmi.w	8003ef0 <_vfiprintf_r+0x44>
 80040b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b8:	e71c      	b.n	8003ef4 <_vfiprintf_r+0x48>
 80040ba:	ab03      	add	r3, sp, #12
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462a      	mov	r2, r5
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <_vfiprintf_r+0x22c>)
 80040c2:	a904      	add	r1, sp, #16
 80040c4:	4630      	mov	r0, r6
 80040c6:	f000 f879 	bl	80041bc <_printf_i>
 80040ca:	e7e4      	b.n	8004096 <_vfiprintf_r+0x1ea>
 80040cc:	08005300 	.word	0x08005300
 80040d0:	0800530a 	.word	0x0800530a
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e87 	.word	0x08003e87
 80040dc:	08005306 	.word	0x08005306

080040e0 <_printf_common>:
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	4616      	mov	r6, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	688a      	ldr	r2, [r1, #8]
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfb8      	it	lt
 80040f4:	4613      	movlt	r3, r2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040fc:	4607      	mov	r7, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b10a      	cbz	r2, 8004106 <_printf_common+0x26>
 8004102:	3301      	adds	r3, #1
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	6833      	ldrmi	r3, [r6, #0]
 800410e:	3302      	addmi	r3, #2
 8004110:	6033      	strmi	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	f015 0506 	ands.w	r5, r5, #6
 8004118:	d106      	bne.n	8004128 <_printf_common+0x48>
 800411a:	f104 0a19 	add.w	sl, r4, #25
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	6832      	ldr	r2, [r6, #0]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	42ab      	cmp	r3, r5
 8004126:	dc26      	bgt.n	8004176 <_printf_common+0x96>
 8004128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800412c:	1e13      	subs	r3, r2, #0
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	2301      	movne	r3, #1
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d42b      	bmi.n	8004190 <_printf_common+0xb0>
 8004138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d01e      	beq.n	8004184 <_printf_common+0xa4>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	6922      	ldr	r2, [r4, #16]
 800414a:	f003 0306 	and.w	r3, r3, #6
 800414e:	2b04      	cmp	r3, #4
 8004150:	bf02      	ittt	eq
 8004152:	68e5      	ldreq	r5, [r4, #12]
 8004154:	6833      	ldreq	r3, [r6, #0]
 8004156:	1aed      	subeq	r5, r5, r3
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	2600      	movs	r6, #0
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xa8>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4649      	mov	r1, r9
 800417c:	4638      	mov	r0, r7
 800417e:	47c0      	blx	r8
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xac>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c6      	b.n	800411e <_printf_common+0x3e>
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	2030      	movs	r0, #48	; 0x30
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419a:	4422      	add	r2, r4
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a4:	3302      	adds	r3, #2
 80041a6:	e7c7      	b.n	8004138 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa4>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x8e>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	7e0f      	ldrb	r7, [r1, #24]
 80041c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c4:	2f78      	cmp	r7, #120	; 0x78
 80041c6:	4691      	mov	r9, r2
 80041c8:	4680      	mov	r8, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	469a      	mov	sl, r3
 80041ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	; 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d4 	beq.w	8004386 <_printf_i+0x1ca>
 80041de:	2f58      	cmp	r7, #88	; 0x58
 80041e0:	f000 80c0 	beq.w	8004364 <_printf_i+0x1a8>
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a101      	add	r1, pc, #4	; (adr r1, 80041fc <_printf_i+0x40>)
 80041f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	0800436d 	.word	0x0800436d
 800422c:	08004295 	.word	0x08004295
 8004230:	08004327 	.word	0x08004327
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	0800438f 	.word	0x0800438f
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004295 	.word	0x08004295
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800432f 	.word	0x0800432f
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	602a      	str	r2, [r5, #0]
 800425c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e09f      	b.n	80043a8 <_printf_i+0x1ec>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	0607      	lsls	r7, r0, #24
 800426e:	f103 0104 	add.w	r1, r3, #4
 8004272:	6029      	str	r1, [r5, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0xbe>
 8004276:	681e      	ldr	r6, [r3, #0]
 8004278:	e003      	b.n	8004282 <_printf_i+0xc6>
 800427a:	0646      	lsls	r6, r0, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0xba>
 800427e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004282:	2e00      	cmp	r6, #0
 8004284:	da03      	bge.n	800428e <_printf_i+0xd2>
 8004286:	232d      	movs	r3, #45	; 0x2d
 8004288:	4276      	negs	r6, r6
 800428a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428e:	485a      	ldr	r0, [pc, #360]	; (80043f8 <_printf_i+0x23c>)
 8004290:	230a      	movs	r3, #10
 8004292:	e012      	b.n	80042ba <_printf_i+0xfe>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6029      	str	r1, [r5, #0]
 800429c:	0605      	lsls	r5, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xe8>
 80042a0:	681e      	ldr	r6, [r3, #0]
 80042a2:	e002      	b.n	80042aa <_printf_i+0xee>
 80042a4:	0641      	lsls	r1, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xe4>
 80042a8:	881e      	ldrh	r6, [r3, #0]
 80042aa:	4853      	ldr	r0, [pc, #332]	; (80043f8 <_printf_i+0x23c>)
 80042ac:	2f6f      	cmp	r7, #111	; 0x6f
 80042ae:	bf0c      	ite	eq
 80042b0:	2308      	moveq	r3, #8
 80042b2:	230a      	movne	r3, #10
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ba:	6865      	ldr	r5, [r4, #4]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	2d00      	cmp	r5, #0
 80042c0:	bfa2      	ittt	ge
 80042c2:	6821      	ldrge	r1, [r4, #0]
 80042c4:	f021 0104 	bicge.w	r1, r1, #4
 80042c8:	6021      	strge	r1, [r4, #0]
 80042ca:	b90e      	cbnz	r6, 80042d0 <_printf_i+0x114>
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	d04b      	beq.n	8004368 <_printf_i+0x1ac>
 80042d0:	4615      	mov	r5, r2
 80042d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042d6:	fb03 6711 	mls	r7, r3, r1, r6
 80042da:	5dc7      	ldrb	r7, [r0, r7]
 80042dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042e0:	4637      	mov	r7, r6
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	460e      	mov	r6, r1
 80042e6:	d9f4      	bls.n	80042d2 <_printf_i+0x116>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <_printf_i+0x148>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07de      	lsls	r6, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_printf_i+0x148>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4299      	cmp	r1, r3
 80042f8:	bfde      	ittt	le
 80042fa:	2330      	movle	r3, #48	; 0x30
 80042fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004304:	1b52      	subs	r2, r2, r5
 8004306:	6122      	str	r2, [r4, #16]
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	464b      	mov	r3, r9
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fee4 	bl	80040e0 <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14a      	bne.n	80043b2 <_printf_i+0x1f6>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b004      	add	sp, #16
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	4833      	ldr	r0, [pc, #204]	; (80043fc <_printf_i+0x240>)
 8004330:	2778      	movs	r7, #120	; 0x78
 8004332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6829      	ldr	r1, [r5, #0]
 800433a:	061f      	lsls	r7, r3, #24
 800433c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004340:	d402      	bmi.n	8004348 <_printf_i+0x18c>
 8004342:	065f      	lsls	r7, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2b6      	uxthmi	r6, r6
 8004348:	07df      	lsls	r7, r3, #31
 800434a:	bf48      	it	mi
 800434c:	f043 0320 	orrmi.w	r3, r3, #32
 8004350:	6029      	str	r1, [r5, #0]
 8004352:	bf48      	it	mi
 8004354:	6023      	strmi	r3, [r4, #0]
 8004356:	b91e      	cbnz	r6, 8004360 <_printf_i+0x1a4>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f023 0320 	bic.w	r3, r3, #32
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	2310      	movs	r3, #16
 8004362:	e7a7      	b.n	80042b4 <_printf_i+0xf8>
 8004364:	4824      	ldr	r0, [pc, #144]	; (80043f8 <_printf_i+0x23c>)
 8004366:	e7e4      	b.n	8004332 <_printf_i+0x176>
 8004368:	4615      	mov	r5, r2
 800436a:	e7bd      	b.n	80042e8 <_printf_i+0x12c>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6826      	ldr	r6, [r4, #0]
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	1d18      	adds	r0, r3, #4
 8004374:	6028      	str	r0, [r5, #0]
 8004376:	0635      	lsls	r5, r6, #24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	d501      	bpl.n	8004380 <_printf_i+0x1c4>
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	e002      	b.n	8004386 <_printf_i+0x1ca>
 8004380:	0670      	lsls	r0, r6, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0x1c0>
 8004384:	8019      	strh	r1, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	4615      	mov	r5, r2
 800438c:	e7bc      	b.n	8004308 <_printf_i+0x14c>
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	602a      	str	r2, [r5, #0]
 8004394:	681d      	ldr	r5, [r3, #0]
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	2100      	movs	r1, #0
 800439a:	4628      	mov	r0, r5
 800439c:	f7fb ff20 	bl	80001e0 <memchr>
 80043a0:	b108      	cbz	r0, 80043a6 <_printf_i+0x1ea>
 80043a2:	1b40      	subs	r0, r0, r5
 80043a4:	6060      	str	r0, [r4, #4]
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b0:	e7aa      	b.n	8004308 <_printf_i+0x14c>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	462a      	mov	r2, r5
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d0ad      	beq.n	800431c <_printf_i+0x160>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	079b      	lsls	r3, r3, #30
 80043c4:	d413      	bmi.n	80043ee <_printf_i+0x232>
 80043c6:	68e0      	ldr	r0, [r4, #12]
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	4298      	cmp	r0, r3
 80043cc:	bfb8      	it	lt
 80043ce:	4618      	movlt	r0, r3
 80043d0:	e7a6      	b.n	8004320 <_printf_i+0x164>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d09d      	beq.n	800431c <_printf_i+0x160>
 80043e0:	3501      	adds	r5, #1
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	9903      	ldr	r1, [sp, #12]
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dcf2      	bgt.n	80043d2 <_printf_i+0x216>
 80043ec:	e7eb      	b.n	80043c6 <_printf_i+0x20a>
 80043ee:	2500      	movs	r5, #0
 80043f0:	f104 0619 	add.w	r6, r4, #25
 80043f4:	e7f5      	b.n	80043e2 <_printf_i+0x226>
 80043f6:	bf00      	nop
 80043f8:	08005311 	.word	0x08005311
 80043fc:	08005322 	.word	0x08005322

08004400 <__svfiscanf_r>:
 8004400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	461d      	mov	r5, r3
 8004406:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004408:	07df      	lsls	r7, r3, #31
 800440a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800440e:	4606      	mov	r6, r0
 8004410:	460c      	mov	r4, r1
 8004412:	4692      	mov	sl, r2
 8004414:	d405      	bmi.n	8004422 <__svfiscanf_r+0x22>
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d402      	bmi.n	8004422 <__svfiscanf_r+0x22>
 800441c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800441e:	f7ff fac0 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8004422:	2300      	movs	r3, #0
 8004424:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004428:	4baa      	ldr	r3, [pc, #680]	; (80046d4 <__svfiscanf_r+0x2d4>)
 800442a:	93a0      	str	r3, [sp, #640]	; 0x280
 800442c:	f10d 0804 	add.w	r8, sp, #4
 8004430:	4ba9      	ldr	r3, [pc, #676]	; (80046d8 <__svfiscanf_r+0x2d8>)
 8004432:	4faa      	ldr	r7, [pc, #680]	; (80046dc <__svfiscanf_r+0x2dc>)
 8004434:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80046e0 <__svfiscanf_r+0x2e0>
 8004438:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800443c:	93a1      	str	r3, [sp, #644]	; 0x284
 800443e:	9500      	str	r5, [sp, #0]
 8004440:	f89a 3000 	ldrb.w	r3, [sl]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8170 	beq.w	800472a <__svfiscanf_r+0x32a>
 800444a:	5cf9      	ldrb	r1, [r7, r3]
 800444c:	f011 0108 	ands.w	r1, r1, #8
 8004450:	f10a 0501 	add.w	r5, sl, #1
 8004454:	d019      	beq.n	800448a <__svfiscanf_r+0x8a>
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	dd0f      	ble.n	800447c <__svfiscanf_r+0x7c>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	5cba      	ldrb	r2, [r7, r2]
 8004462:	0711      	lsls	r1, r2, #28
 8004464:	d401      	bmi.n	800446a <__svfiscanf_r+0x6a>
 8004466:	46aa      	mov	sl, r5
 8004468:	e7ea      	b.n	8004440 <__svfiscanf_r+0x40>
 800446a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800446c:	3201      	adds	r2, #1
 800446e:	9245      	str	r2, [sp, #276]	; 0x114
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	3301      	adds	r3, #1
 8004474:	3a01      	subs	r2, #1
 8004476:	6062      	str	r2, [r4, #4]
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	e7ec      	b.n	8004456 <__svfiscanf_r+0x56>
 800447c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800447e:	4621      	mov	r1, r4
 8004480:	4630      	mov	r0, r6
 8004482:	4798      	blx	r3
 8004484:	2800      	cmp	r0, #0
 8004486:	d0e9      	beq.n	800445c <__svfiscanf_r+0x5c>
 8004488:	e7ed      	b.n	8004466 <__svfiscanf_r+0x66>
 800448a:	2b25      	cmp	r3, #37	; 0x25
 800448c:	d012      	beq.n	80044b4 <__svfiscanf_r+0xb4>
 800448e:	469a      	mov	sl, r3
 8004490:	6863      	ldr	r3, [r4, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f340 8093 	ble.w	80045be <__svfiscanf_r+0x1be>
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	7813      	ldrb	r3, [r2, #0]
 800449c:	4553      	cmp	r3, sl
 800449e:	f040 8144 	bne.w	800472a <__svfiscanf_r+0x32a>
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80044aa:	3201      	adds	r2, #1
 80044ac:	3301      	adds	r3, #1
 80044ae:	6022      	str	r2, [r4, #0]
 80044b0:	9345      	str	r3, [sp, #276]	; 0x114
 80044b2:	e7d8      	b.n	8004466 <__svfiscanf_r+0x66>
 80044b4:	9141      	str	r1, [sp, #260]	; 0x104
 80044b6:	9143      	str	r1, [sp, #268]	; 0x10c
 80044b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80044bc:	2b2a      	cmp	r3, #42	; 0x2a
 80044be:	bf02      	ittt	eq
 80044c0:	2310      	moveq	r3, #16
 80044c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80044c4:	f10a 0502 	addeq.w	r5, sl, #2
 80044c8:	220a      	movs	r2, #10
 80044ca:	46aa      	mov	sl, r5
 80044cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80044d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	d91d      	bls.n	8004514 <__svfiscanf_r+0x114>
 80044d8:	4881      	ldr	r0, [pc, #516]	; (80046e0 <__svfiscanf_r+0x2e0>)
 80044da:	2203      	movs	r2, #3
 80044dc:	f7fb fe80 	bl	80001e0 <memchr>
 80044e0:	b138      	cbz	r0, 80044f2 <__svfiscanf_r+0xf2>
 80044e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80044e4:	eba0 0009 	sub.w	r0, r0, r9
 80044e8:	2301      	movs	r3, #1
 80044ea:	4083      	lsls	r3, r0
 80044ec:	4313      	orrs	r3, r2
 80044ee:	9341      	str	r3, [sp, #260]	; 0x104
 80044f0:	4655      	mov	r5, sl
 80044f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044f6:	2b78      	cmp	r3, #120	; 0x78
 80044f8:	d807      	bhi.n	800450a <__svfiscanf_r+0x10a>
 80044fa:	2b57      	cmp	r3, #87	; 0x57
 80044fc:	d811      	bhi.n	8004522 <__svfiscanf_r+0x122>
 80044fe:	2b25      	cmp	r3, #37	; 0x25
 8004500:	d0c5      	beq.n	800448e <__svfiscanf_r+0x8e>
 8004502:	d857      	bhi.n	80045b4 <__svfiscanf_r+0x1b4>
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80c6 	beq.w	8004696 <__svfiscanf_r+0x296>
 800450a:	2303      	movs	r3, #3
 800450c:	9347      	str	r3, [sp, #284]	; 0x11c
 800450e:	230a      	movs	r3, #10
 8004510:	9342      	str	r3, [sp, #264]	; 0x108
 8004512:	e07f      	b.n	8004614 <__svfiscanf_r+0x214>
 8004514:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004516:	fb02 1103 	mla	r1, r2, r3, r1
 800451a:	3930      	subs	r1, #48	; 0x30
 800451c:	9143      	str	r1, [sp, #268]	; 0x10c
 800451e:	4655      	mov	r5, sl
 8004520:	e7d3      	b.n	80044ca <__svfiscanf_r+0xca>
 8004522:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004526:	2a20      	cmp	r2, #32
 8004528:	d8ef      	bhi.n	800450a <__svfiscanf_r+0x10a>
 800452a:	a101      	add	r1, pc, #4	; (adr r1, 8004530 <__svfiscanf_r+0x130>)
 800452c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004530:	080045f7 	.word	0x080045f7
 8004534:	0800450b 	.word	0x0800450b
 8004538:	0800450b 	.word	0x0800450b
 800453c:	08004655 	.word	0x08004655
 8004540:	0800450b 	.word	0x0800450b
 8004544:	0800450b 	.word	0x0800450b
 8004548:	0800450b 	.word	0x0800450b
 800454c:	0800450b 	.word	0x0800450b
 8004550:	0800450b 	.word	0x0800450b
 8004554:	0800450b 	.word	0x0800450b
 8004558:	0800450b 	.word	0x0800450b
 800455c:	0800466b 	.word	0x0800466b
 8004560:	08004651 	.word	0x08004651
 8004564:	080045bb 	.word	0x080045bb
 8004568:	080045bb 	.word	0x080045bb
 800456c:	080045bb 	.word	0x080045bb
 8004570:	0800450b 	.word	0x0800450b
 8004574:	0800460d 	.word	0x0800460d
 8004578:	0800450b 	.word	0x0800450b
 800457c:	0800450b 	.word	0x0800450b
 8004580:	0800450b 	.word	0x0800450b
 8004584:	0800450b 	.word	0x0800450b
 8004588:	0800467b 	.word	0x0800467b
 800458c:	08004649 	.word	0x08004649
 8004590:	080045ef 	.word	0x080045ef
 8004594:	0800450b 	.word	0x0800450b
 8004598:	0800450b 	.word	0x0800450b
 800459c:	08004677 	.word	0x08004677
 80045a0:	0800450b 	.word	0x0800450b
 80045a4:	08004651 	.word	0x08004651
 80045a8:	0800450b 	.word	0x0800450b
 80045ac:	0800450b 	.word	0x0800450b
 80045b0:	080045f7 	.word	0x080045f7
 80045b4:	3b45      	subs	r3, #69	; 0x45
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d8a7      	bhi.n	800450a <__svfiscanf_r+0x10a>
 80045ba:	2305      	movs	r3, #5
 80045bc:	e029      	b.n	8004612 <__svfiscanf_r+0x212>
 80045be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80045c0:	4621      	mov	r1, r4
 80045c2:	4630      	mov	r0, r6
 80045c4:	4798      	blx	r3
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f43f af66 	beq.w	8004498 <__svfiscanf_r+0x98>
 80045cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ce:	07da      	lsls	r2, r3, #31
 80045d0:	f140 80a3 	bpl.w	800471a <__svfiscanf_r+0x31a>
 80045d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d066      	beq.n	80046a8 <__svfiscanf_r+0x2a8>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045e0:	bf18      	it	ne
 80045e2:	f04f 30ff 	movne.w	r0, #4294967295
 80045e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80045f0:	f042 0220 	orr.w	r2, r2, #32
 80045f4:	9241      	str	r2, [sp, #260]	; 0x104
 80045f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80045f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fc:	9241      	str	r2, [sp, #260]	; 0x104
 80045fe:	2210      	movs	r2, #16
 8004600:	2b6f      	cmp	r3, #111	; 0x6f
 8004602:	9242      	str	r2, [sp, #264]	; 0x108
 8004604:	bf34      	ite	cc
 8004606:	2303      	movcc	r3, #3
 8004608:	2304      	movcs	r3, #4
 800460a:	e002      	b.n	8004612 <__svfiscanf_r+0x212>
 800460c:	2300      	movs	r3, #0
 800460e:	9342      	str	r3, [sp, #264]	; 0x108
 8004610:	2303      	movs	r3, #3
 8004612:	9347      	str	r3, [sp, #284]	; 0x11c
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	dd49      	ble.n	80046ae <__svfiscanf_r+0x2ae>
 800461a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800461c:	065b      	lsls	r3, r3, #25
 800461e:	d404      	bmi.n	800462a <__svfiscanf_r+0x22a>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	5cba      	ldrb	r2, [r7, r2]
 8004626:	0710      	lsls	r0, r2, #28
 8004628:	d448      	bmi.n	80046bc <__svfiscanf_r+0x2bc>
 800462a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800462c:	2b02      	cmp	r3, #2
 800462e:	dc60      	bgt.n	80046f2 <__svfiscanf_r+0x2f2>
 8004630:	466b      	mov	r3, sp
 8004632:	4622      	mov	r2, r4
 8004634:	a941      	add	r1, sp, #260	; 0x104
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f898 	bl	800476c <_scanf_chars>
 800463c:	2801      	cmp	r0, #1
 800463e:	d074      	beq.n	800472a <__svfiscanf_r+0x32a>
 8004640:	2802      	cmp	r0, #2
 8004642:	f47f af10 	bne.w	8004466 <__svfiscanf_r+0x66>
 8004646:	e7c1      	b.n	80045cc <__svfiscanf_r+0x1cc>
 8004648:	2308      	movs	r3, #8
 800464a:	9342      	str	r3, [sp, #264]	; 0x108
 800464c:	2304      	movs	r3, #4
 800464e:	e7e0      	b.n	8004612 <__svfiscanf_r+0x212>
 8004650:	220a      	movs	r2, #10
 8004652:	e7d5      	b.n	8004600 <__svfiscanf_r+0x200>
 8004654:	4629      	mov	r1, r5
 8004656:	4640      	mov	r0, r8
 8004658:	f000 fb6c 	bl	8004d34 <__sccl>
 800465c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800465e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004662:	9341      	str	r3, [sp, #260]	; 0x104
 8004664:	4605      	mov	r5, r0
 8004666:	2301      	movs	r3, #1
 8004668:	e7d3      	b.n	8004612 <__svfiscanf_r+0x212>
 800466a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004670:	9341      	str	r3, [sp, #260]	; 0x104
 8004672:	2300      	movs	r3, #0
 8004674:	e7cd      	b.n	8004612 <__svfiscanf_r+0x212>
 8004676:	2302      	movs	r3, #2
 8004678:	e7cb      	b.n	8004612 <__svfiscanf_r+0x212>
 800467a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800467c:	06c3      	lsls	r3, r0, #27
 800467e:	f53f aef2 	bmi.w	8004466 <__svfiscanf_r+0x66>
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004686:	1d19      	adds	r1, r3, #4
 8004688:	9100      	str	r1, [sp, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	07c0      	lsls	r0, r0, #31
 800468e:	bf4c      	ite	mi
 8004690:	801a      	strhmi	r2, [r3, #0]
 8004692:	601a      	strpl	r2, [r3, #0]
 8004694:	e6e7      	b.n	8004466 <__svfiscanf_r+0x66>
 8004696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004698:	07d8      	lsls	r0, r3, #31
 800469a:	d405      	bmi.n	80046a8 <__svfiscanf_r+0x2a8>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	0599      	lsls	r1, r3, #22
 80046a0:	d402      	bmi.n	80046a8 <__svfiscanf_r+0x2a8>
 80046a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a4:	f7ff f97e 	bl	80039a4 <__retarget_lock_release_recursive>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e79b      	b.n	80045e6 <__svfiscanf_r+0x1e6>
 80046ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046b0:	4621      	mov	r1, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	4798      	blx	r3
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0af      	beq.n	800461a <__svfiscanf_r+0x21a>
 80046ba:	e787      	b.n	80045cc <__svfiscanf_r+0x1cc>
 80046bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046be:	3201      	adds	r2, #1
 80046c0:	9245      	str	r2, [sp, #276]	; 0x114
 80046c2:	6862      	ldr	r2, [r4, #4]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	6062      	str	r2, [r4, #4]
 80046ca:	dd0b      	ble.n	80046e4 <__svfiscanf_r+0x2e4>
 80046cc:	3301      	adds	r3, #1
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	e7a6      	b.n	8004620 <__svfiscanf_r+0x220>
 80046d2:	bf00      	nop
 80046d4:	08004e1b 	.word	0x08004e1b
 80046d8:	08004c45 	.word	0x08004c45
 80046dc:	0800534f 	.word	0x0800534f
 80046e0:	08005306 	.word	0x08005306
 80046e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046e6:	4621      	mov	r1, r4
 80046e8:	4630      	mov	r0, r6
 80046ea:	4798      	blx	r3
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d097      	beq.n	8004620 <__svfiscanf_r+0x220>
 80046f0:	e76c      	b.n	80045cc <__svfiscanf_r+0x1cc>
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	dc06      	bgt.n	8004704 <__svfiscanf_r+0x304>
 80046f6:	466b      	mov	r3, sp
 80046f8:	4622      	mov	r2, r4
 80046fa:	a941      	add	r1, sp, #260	; 0x104
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f88f 	bl	8004820 <_scanf_i>
 8004702:	e79b      	b.n	800463c <__svfiscanf_r+0x23c>
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <__svfiscanf_r+0x340>)
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f aead 	beq.w	8004466 <__svfiscanf_r+0x66>
 800470c:	466b      	mov	r3, sp
 800470e:	4622      	mov	r2, r4
 8004710:	a941      	add	r1, sp, #260	; 0x104
 8004712:	4630      	mov	r0, r6
 8004714:	f3af 8000 	nop.w
 8004718:	e790      	b.n	800463c <__svfiscanf_r+0x23c>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	0599      	lsls	r1, r3, #22
 800471e:	f53f af59 	bmi.w	80045d4 <__svfiscanf_r+0x1d4>
 8004722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004724:	f7ff f93e 	bl	80039a4 <__retarget_lock_release_recursive>
 8004728:	e754      	b.n	80045d4 <__svfiscanf_r+0x1d4>
 800472a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800472c:	07da      	lsls	r2, r3, #31
 800472e:	d405      	bmi.n	800473c <__svfiscanf_r+0x33c>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	059b      	lsls	r3, r3, #22
 8004734:	d402      	bmi.n	800473c <__svfiscanf_r+0x33c>
 8004736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004738:	f7ff f934 	bl	80039a4 <__retarget_lock_release_recursive>
 800473c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800473e:	e752      	b.n	80045e6 <__svfiscanf_r+0x1e6>
 8004740:	00000000 	.word	0x00000000

08004744 <_vfiscanf_r>:
 8004744:	b530      	push	{r4, r5, lr}
 8004746:	4604      	mov	r4, r0
 8004748:	b085      	sub	sp, #20
 800474a:	b148      	cbz	r0, 8004760 <_vfiscanf_r+0x1c>
 800474c:	6a05      	ldr	r5, [r0, #32]
 800474e:	b93d      	cbnz	r5, 8004760 <_vfiscanf_r+0x1c>
 8004750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004754:	9101      	str	r1, [sp, #4]
 8004756:	f7fe fe4f 	bl	80033f8 <__sinit>
 800475a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800475e:	9901      	ldr	r1, [sp, #4]
 8004760:	4620      	mov	r0, r4
 8004762:	b005      	add	sp, #20
 8004764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004768:	f7ff be4a 	b.w	8004400 <__svfiscanf_r>

0800476c <_scanf_chars>:
 800476c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004770:	4615      	mov	r5, r2
 8004772:	688a      	ldr	r2, [r1, #8]
 8004774:	4680      	mov	r8, r0
 8004776:	460c      	mov	r4, r1
 8004778:	b932      	cbnz	r2, 8004788 <_scanf_chars+0x1c>
 800477a:	698a      	ldr	r2, [r1, #24]
 800477c:	2a00      	cmp	r2, #0
 800477e:	bf0c      	ite	eq
 8004780:	2201      	moveq	r2, #1
 8004782:	f04f 32ff 	movne.w	r2, #4294967295
 8004786:	608a      	str	r2, [r1, #8]
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800481c <_scanf_chars+0xb0>
 800478e:	06d1      	lsls	r1, r2, #27
 8004790:	bf5f      	itttt	pl
 8004792:	681a      	ldrpl	r2, [r3, #0]
 8004794:	1d11      	addpl	r1, r2, #4
 8004796:	6019      	strpl	r1, [r3, #0]
 8004798:	6816      	ldrpl	r6, [r2, #0]
 800479a:	2700      	movs	r7, #0
 800479c:	69a0      	ldr	r0, [r4, #24]
 800479e:	b188      	cbz	r0, 80047c4 <_scanf_chars+0x58>
 80047a0:	2801      	cmp	r0, #1
 80047a2:	d107      	bne.n	80047b4 <_scanf_chars+0x48>
 80047a4:	682a      	ldr	r2, [r5, #0]
 80047a6:	7811      	ldrb	r1, [r2, #0]
 80047a8:	6962      	ldr	r2, [r4, #20]
 80047aa:	5c52      	ldrb	r2, [r2, r1]
 80047ac:	b952      	cbnz	r2, 80047c4 <_scanf_chars+0x58>
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	d031      	beq.n	8004816 <_scanf_chars+0xaa>
 80047b2:	e022      	b.n	80047fa <_scanf_chars+0x8e>
 80047b4:	2802      	cmp	r0, #2
 80047b6:	d120      	bne.n	80047fa <_scanf_chars+0x8e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	d41a      	bmi.n	80047fa <_scanf_chars+0x8e>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	06da      	lsls	r2, r3, #27
 80047c8:	bf5e      	ittt	pl
 80047ca:	682b      	ldrpl	r3, [r5, #0]
 80047cc:	781b      	ldrbpl	r3, [r3, #0]
 80047ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80047d2:	682a      	ldr	r2, [r5, #0]
 80047d4:	686b      	ldr	r3, [r5, #4]
 80047d6:	3201      	adds	r2, #1
 80047d8:	602a      	str	r2, [r5, #0]
 80047da:	68a2      	ldr	r2, [r4, #8]
 80047dc:	3b01      	subs	r3, #1
 80047de:	3a01      	subs	r2, #1
 80047e0:	606b      	str	r3, [r5, #4]
 80047e2:	3701      	adds	r7, #1
 80047e4:	60a2      	str	r2, [r4, #8]
 80047e6:	b142      	cbz	r2, 80047fa <_scanf_chars+0x8e>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dcd7      	bgt.n	800479c <_scanf_chars+0x30>
 80047ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047f0:	4629      	mov	r1, r5
 80047f2:	4640      	mov	r0, r8
 80047f4:	4798      	blx	r3
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d0d0      	beq.n	800479c <_scanf_chars+0x30>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	f013 0310 	ands.w	r3, r3, #16
 8004800:	d105      	bne.n	800480e <_scanf_chars+0xa2>
 8004802:	68e2      	ldr	r2, [r4, #12]
 8004804:	3201      	adds	r2, #1
 8004806:	60e2      	str	r2, [r4, #12]
 8004808:	69a2      	ldr	r2, [r4, #24]
 800480a:	b102      	cbz	r2, 800480e <_scanf_chars+0xa2>
 800480c:	7033      	strb	r3, [r6, #0]
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	443b      	add	r3, r7
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	2000      	movs	r0, #0
 8004816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800481a:	bf00      	nop
 800481c:	0800534f 	.word	0x0800534f

08004820 <_scanf_i>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	4698      	mov	r8, r3
 8004826:	4b74      	ldr	r3, [pc, #464]	; (80049f8 <_scanf_i+0x1d8>)
 8004828:	460c      	mov	r4, r1
 800482a:	4682      	mov	sl, r0
 800482c:	4616      	mov	r6, r2
 800482e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004832:	b087      	sub	sp, #28
 8004834:	ab03      	add	r3, sp, #12
 8004836:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800483a:	4b70      	ldr	r3, [pc, #448]	; (80049fc <_scanf_i+0x1dc>)
 800483c:	69a1      	ldr	r1, [r4, #24]
 800483e:	4a70      	ldr	r2, [pc, #448]	; (8004a00 <_scanf_i+0x1e0>)
 8004840:	2903      	cmp	r1, #3
 8004842:	bf18      	it	ne
 8004844:	461a      	movne	r2, r3
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	9201      	str	r2, [sp, #4]
 800484a:	1e5a      	subs	r2, r3, #1
 800484c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004850:	bf88      	it	hi
 8004852:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004856:	4627      	mov	r7, r4
 8004858:	bf82      	ittt	hi
 800485a:	eb03 0905 	addhi.w	r9, r3, r5
 800485e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004862:	60a3      	strhi	r3, [r4, #8]
 8004864:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004868:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800486c:	bf98      	it	ls
 800486e:	f04f 0900 	movls.w	r9, #0
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	463d      	mov	r5, r7
 8004876:	f04f 0b00 	mov.w	fp, #0
 800487a:	6831      	ldr	r1, [r6, #0]
 800487c:	ab03      	add	r3, sp, #12
 800487e:	7809      	ldrb	r1, [r1, #0]
 8004880:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004884:	2202      	movs	r2, #2
 8004886:	f7fb fcab 	bl	80001e0 <memchr>
 800488a:	b328      	cbz	r0, 80048d8 <_scanf_i+0xb8>
 800488c:	f1bb 0f01 	cmp.w	fp, #1
 8004890:	d159      	bne.n	8004946 <_scanf_i+0x126>
 8004892:	6862      	ldr	r2, [r4, #4]
 8004894:	b92a      	cbnz	r2, 80048a2 <_scanf_i+0x82>
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	2308      	movs	r3, #8
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	6022      	str	r2, [r4, #0]
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	68a2      	ldr	r2, [r4, #8]
 80048ac:	1e51      	subs	r1, r2, #1
 80048ae:	60a1      	str	r1, [r4, #8]
 80048b0:	b192      	cbz	r2, 80048d8 <_scanf_i+0xb8>
 80048b2:	6832      	ldr	r2, [r6, #0]
 80048b4:	1c51      	adds	r1, r2, #1
 80048b6:	6031      	str	r1, [r6, #0]
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	f805 2b01 	strb.w	r2, [r5], #1
 80048be:	6872      	ldr	r2, [r6, #4]
 80048c0:	3a01      	subs	r2, #1
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	6072      	str	r2, [r6, #4]
 80048c6:	dc07      	bgt.n	80048d8 <_scanf_i+0xb8>
 80048c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80048cc:	4631      	mov	r1, r6
 80048ce:	4650      	mov	r0, sl
 80048d0:	4790      	blx	r2
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f040 8085 	bne.w	80049e2 <_scanf_i+0x1c2>
 80048d8:	f10b 0b01 	add.w	fp, fp, #1
 80048dc:	f1bb 0f03 	cmp.w	fp, #3
 80048e0:	d1cb      	bne.n	800487a <_scanf_i+0x5a>
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	b90b      	cbnz	r3, 80048ea <_scanf_i+0xca>
 80048e6:	230a      	movs	r3, #10
 80048e8:	6063      	str	r3, [r4, #4]
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	4945      	ldr	r1, [pc, #276]	; (8004a04 <_scanf_i+0x1e4>)
 80048ee:	6960      	ldr	r0, [r4, #20]
 80048f0:	1ac9      	subs	r1, r1, r3
 80048f2:	f000 fa1f 	bl	8004d34 <__sccl>
 80048f6:	f04f 0b00 	mov.w	fp, #0
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03d      	beq.n	800497e <_scanf_i+0x15e>
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	6960      	ldr	r0, [r4, #20]
 8004906:	f891 c000 	ldrb.w	ip, [r1]
 800490a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800490e:	2800      	cmp	r0, #0
 8004910:	d035      	beq.n	800497e <_scanf_i+0x15e>
 8004912:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004916:	d124      	bne.n	8004962 <_scanf_i+0x142>
 8004918:	0510      	lsls	r0, r2, #20
 800491a:	d522      	bpl.n	8004962 <_scanf_i+0x142>
 800491c:	f10b 0b01 	add.w	fp, fp, #1
 8004920:	f1b9 0f00 	cmp.w	r9, #0
 8004924:	d003      	beq.n	800492e <_scanf_i+0x10e>
 8004926:	3301      	adds	r3, #1
 8004928:	f109 39ff 	add.w	r9, r9, #4294967295
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6873      	ldr	r3, [r6, #4]
 8004930:	3b01      	subs	r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	6073      	str	r3, [r6, #4]
 8004936:	dd1b      	ble.n	8004970 <_scanf_i+0x150>
 8004938:	6833      	ldr	r3, [r6, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	6033      	str	r3, [r6, #0]
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	3b01      	subs	r3, #1
 8004942:	60a3      	str	r3, [r4, #8]
 8004944:	e7d9      	b.n	80048fa <_scanf_i+0xda>
 8004946:	f1bb 0f02 	cmp.w	fp, #2
 800494a:	d1ae      	bne.n	80048aa <_scanf_i+0x8a>
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004952:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004956:	d1bf      	bne.n	80048d8 <_scanf_i+0xb8>
 8004958:	2310      	movs	r3, #16
 800495a:	6063      	str	r3, [r4, #4]
 800495c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004960:	e7a2      	b.n	80048a8 <_scanf_i+0x88>
 8004962:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004966:	6022      	str	r2, [r4, #0]
 8004968:	780b      	ldrb	r3, [r1, #0]
 800496a:	f805 3b01 	strb.w	r3, [r5], #1
 800496e:	e7de      	b.n	800492e <_scanf_i+0x10e>
 8004970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004974:	4631      	mov	r1, r6
 8004976:	4650      	mov	r0, sl
 8004978:	4798      	blx	r3
 800497a:	2800      	cmp	r0, #0
 800497c:	d0df      	beq.n	800493e <_scanf_i+0x11e>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	05d9      	lsls	r1, r3, #23
 8004982:	d50d      	bpl.n	80049a0 <_scanf_i+0x180>
 8004984:	42bd      	cmp	r5, r7
 8004986:	d909      	bls.n	800499c <_scanf_i+0x17c>
 8004988:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800498c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004990:	4632      	mov	r2, r6
 8004992:	4650      	mov	r0, sl
 8004994:	4798      	blx	r3
 8004996:	f105 39ff 	add.w	r9, r5, #4294967295
 800499a:	464d      	mov	r5, r9
 800499c:	42bd      	cmp	r5, r7
 800499e:	d028      	beq.n	80049f2 <_scanf_i+0x1d2>
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	f012 0210 	ands.w	r2, r2, #16
 80049a6:	d113      	bne.n	80049d0 <_scanf_i+0x1b0>
 80049a8:	702a      	strb	r2, [r5, #0]
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	9e01      	ldr	r6, [sp, #4]
 80049ae:	4639      	mov	r1, r7
 80049b0:	4650      	mov	r0, sl
 80049b2:	47b0      	blx	r6
 80049b4:	f8d8 3000 	ldr.w	r3, [r8]
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	f8c8 2000 	str.w	r2, [r8]
 80049c0:	f011 0f20 	tst.w	r1, #32
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	d00f      	beq.n	80049e8 <_scanf_i+0x1c8>
 80049c8:	6018      	str	r0, [r3, #0]
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60e3      	str	r3, [r4, #12]
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	1bed      	subs	r5, r5, r7
 80049d4:	445d      	add	r5, fp
 80049d6:	442b      	add	r3, r5
 80049d8:	6123      	str	r3, [r4, #16]
 80049da:	2000      	movs	r0, #0
 80049dc:	b007      	add	sp, #28
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	f04f 0b00 	mov.w	fp, #0
 80049e6:	e7ca      	b.n	800497e <_scanf_i+0x15e>
 80049e8:	07ca      	lsls	r2, r1, #31
 80049ea:	bf4c      	ite	mi
 80049ec:	8018      	strhmi	r0, [r3, #0]
 80049ee:	6018      	strpl	r0, [r3, #0]
 80049f0:	e7eb      	b.n	80049ca <_scanf_i+0x1aa>
 80049f2:	2001      	movs	r0, #1
 80049f4:	e7f2      	b.n	80049dc <_scanf_i+0x1bc>
 80049f6:	bf00      	nop
 80049f8:	080052dc 	.word	0x080052dc
 80049fc:	08005225 	.word	0x08005225
 8004a00:	0800513d 	.word	0x0800513d
 8004a04:	08005343 	.word	0x08005343

08004a08 <__sflush_r>:
 8004a08:	898a      	ldrh	r2, [r1, #12]
 8004a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	4605      	mov	r5, r0
 8004a10:	0710      	lsls	r0, r2, #28
 8004a12:	460c      	mov	r4, r1
 8004a14:	d458      	bmi.n	8004ac8 <__sflush_r+0xc0>
 8004a16:	684b      	ldr	r3, [r1, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dc05      	bgt.n	8004a28 <__sflush_r+0x20>
 8004a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dc02      	bgt.n	8004a28 <__sflush_r+0x20>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2a:	2e00      	cmp	r6, #0
 8004a2c:	d0f9      	beq.n	8004a22 <__sflush_r+0x1a>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a34:	682f      	ldr	r7, [r5, #0]
 8004a36:	6a21      	ldr	r1, [r4, #32]
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	d032      	beq.n	8004aa2 <__sflush_r+0x9a>
 8004a3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	075a      	lsls	r2, r3, #29
 8004a42:	d505      	bpl.n	8004a50 <__sflush_r+0x48>
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	1ac0      	subs	r0, r0, r3
 8004a48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a4a:	b10b      	cbz	r3, 8004a50 <__sflush_r+0x48>
 8004a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a4e:	1ac0      	subs	r0, r0, r3
 8004a50:	2300      	movs	r3, #0
 8004a52:	4602      	mov	r2, r0
 8004a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a56:	6a21      	ldr	r1, [r4, #32]
 8004a58:	4628      	mov	r0, r5
 8004a5a:	47b0      	blx	r6
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	d106      	bne.n	8004a70 <__sflush_r+0x68>
 8004a62:	6829      	ldr	r1, [r5, #0]
 8004a64:	291d      	cmp	r1, #29
 8004a66:	d82b      	bhi.n	8004ac0 <__sflush_r+0xb8>
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <__sflush_r+0x108>)
 8004a6a:	410a      	asrs	r2, r1
 8004a6c:	07d6      	lsls	r6, r2, #31
 8004a6e:	d427      	bmi.n	8004ac0 <__sflush_r+0xb8>
 8004a70:	2200      	movs	r2, #0
 8004a72:	6062      	str	r2, [r4, #4]
 8004a74:	04d9      	lsls	r1, r3, #19
 8004a76:	6922      	ldr	r2, [r4, #16]
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	d504      	bpl.n	8004a86 <__sflush_r+0x7e>
 8004a7c:	1c42      	adds	r2, r0, #1
 8004a7e:	d101      	bne.n	8004a84 <__sflush_r+0x7c>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b903      	cbnz	r3, 8004a86 <__sflush_r+0x7e>
 8004a84:	6560      	str	r0, [r4, #84]	; 0x54
 8004a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a88:	602f      	str	r7, [r5, #0]
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d0c9      	beq.n	8004a22 <__sflush_r+0x1a>
 8004a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a92:	4299      	cmp	r1, r3
 8004a94:	d002      	beq.n	8004a9c <__sflush_r+0x94>
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7fe ff86 	bl	80039a8 <_free_r>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa0:	e7c0      	b.n	8004a24 <__sflush_r+0x1c>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b0      	blx	r6
 8004aa8:	1c41      	adds	r1, r0, #1
 8004aaa:	d1c8      	bne.n	8004a3e <__sflush_r+0x36>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0c5      	beq.n	8004a3e <__sflush_r+0x36>
 8004ab2:	2b1d      	cmp	r3, #29
 8004ab4:	d001      	beq.n	8004aba <__sflush_r+0xb2>
 8004ab6:	2b16      	cmp	r3, #22
 8004ab8:	d101      	bne.n	8004abe <__sflush_r+0xb6>
 8004aba:	602f      	str	r7, [r5, #0]
 8004abc:	e7b1      	b.n	8004a22 <__sflush_r+0x1a>
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	e7ad      	b.n	8004a24 <__sflush_r+0x1c>
 8004ac8:	690f      	ldr	r7, [r1, #16]
 8004aca:	2f00      	cmp	r7, #0
 8004acc:	d0a9      	beq.n	8004a22 <__sflush_r+0x1a>
 8004ace:	0793      	lsls	r3, r2, #30
 8004ad0:	680e      	ldr	r6, [r1, #0]
 8004ad2:	bf08      	it	eq
 8004ad4:	694b      	ldreq	r3, [r1, #20]
 8004ad6:	600f      	str	r7, [r1, #0]
 8004ad8:	bf18      	it	ne
 8004ada:	2300      	movne	r3, #0
 8004adc:	eba6 0807 	sub.w	r8, r6, r7
 8004ae0:	608b      	str	r3, [r1, #8]
 8004ae2:	f1b8 0f00 	cmp.w	r8, #0
 8004ae6:	dd9c      	ble.n	8004a22 <__sflush_r+0x1a>
 8004ae8:	6a21      	ldr	r1, [r4, #32]
 8004aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004aec:	4643      	mov	r3, r8
 8004aee:	463a      	mov	r2, r7
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b0      	blx	r6
 8004af4:	2800      	cmp	r0, #0
 8004af6:	dc06      	bgt.n	8004b06 <__sflush_r+0xfe>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afe:	81a3      	strh	r3, [r4, #12]
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	e78e      	b.n	8004a24 <__sflush_r+0x1c>
 8004b06:	4407      	add	r7, r0
 8004b08:	eba8 0800 	sub.w	r8, r8, r0
 8004b0c:	e7e9      	b.n	8004ae2 <__sflush_r+0xda>
 8004b0e:	bf00      	nop
 8004b10:	dfbffffe 	.word	0xdfbffffe

08004b14 <_fflush_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	b913      	cbnz	r3, 8004b24 <_fflush_r+0x10>
 8004b1e:	2500      	movs	r5, #0
 8004b20:	4628      	mov	r0, r5
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	b118      	cbz	r0, 8004b2e <_fflush_r+0x1a>
 8004b26:	6a03      	ldr	r3, [r0, #32]
 8004b28:	b90b      	cbnz	r3, 8004b2e <_fflush_r+0x1a>
 8004b2a:	f7fe fc65 	bl	80033f8 <__sinit>
 8004b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f3      	beq.n	8004b1e <_fflush_r+0xa>
 8004b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b38:	07d0      	lsls	r0, r2, #31
 8004b3a:	d404      	bmi.n	8004b46 <_fflush_r+0x32>
 8004b3c:	0599      	lsls	r1, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_fflush_r+0x32>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f7fe ff2e 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8004b46:	4628      	mov	r0, r5
 8004b48:	4621      	mov	r1, r4
 8004b4a:	f7ff ff5d 	bl	8004a08 <__sflush_r>
 8004b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b50:	07da      	lsls	r2, r3, #31
 8004b52:	4605      	mov	r5, r0
 8004b54:	d4e4      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	059b      	lsls	r3, r3, #22
 8004b5a:	d4e1      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5e:	f7fe ff21 	bl	80039a4 <__retarget_lock_release_recursive>
 8004b62:	e7dd      	b.n	8004b20 <_fflush_r+0xc>

08004b64 <__swhatbuf_r>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	460c      	mov	r4, r1
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	b096      	sub	sp, #88	; 0x58
 8004b70:	4615      	mov	r5, r2
 8004b72:	461e      	mov	r6, r3
 8004b74:	da0d      	bge.n	8004b92 <__swhatbuf_r+0x2e>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	bf0c      	ite	eq
 8004b82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b86:	2340      	movne	r3, #64	; 0x40
 8004b88:	2000      	movs	r0, #0
 8004b8a:	6031      	str	r1, [r6, #0]
 8004b8c:	602b      	str	r3, [r5, #0]
 8004b8e:	b016      	add	sp, #88	; 0x58
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	466a      	mov	r2, sp
 8004b94:	f000 f9e0 	bl	8004f58 <_fstat_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	dbec      	blt.n	8004b76 <__swhatbuf_r+0x12>
 8004b9c:	9901      	ldr	r1, [sp, #4]
 8004b9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004ba2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ba6:	4259      	negs	r1, r3
 8004ba8:	4159      	adcs	r1, r3
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	e7eb      	b.n	8004b88 <__swhatbuf_r+0x24>

08004bb0 <__smakebuf_r>:
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb4:	079d      	lsls	r5, r3, #30
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	d507      	bpl.n	8004bcc <__smakebuf_r+0x1c>
 8004bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	6123      	str	r3, [r4, #16]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	6163      	str	r3, [r4, #20]
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	ab01      	add	r3, sp, #4
 8004bce:	466a      	mov	r2, sp
 8004bd0:	f7ff ffc8 	bl	8004b64 <__swhatbuf_r>
 8004bd4:	9900      	ldr	r1, [sp, #0]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7fe ff59 	bl	8003a90 <_malloc_r>
 8004bde:	b948      	cbnz	r0, 8004bf4 <__smakebuf_r+0x44>
 8004be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be4:	059a      	lsls	r2, r3, #22
 8004be6:	d4ef      	bmi.n	8004bc8 <__smakebuf_r+0x18>
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	81a3      	strh	r3, [r4, #12]
 8004bf2:	e7e3      	b.n	8004bbc <__smakebuf_r+0xc>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	9b00      	ldr	r3, [sp, #0]
 8004c00:	6163      	str	r3, [r4, #20]
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	6120      	str	r0, [r4, #16]
 8004c06:	b15b      	cbz	r3, 8004c20 <__smakebuf_r+0x70>
 8004c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f000 f9b5 	bl	8004f7c <_isatty_r>
 8004c12:	b128      	cbz	r0, 8004c20 <__smakebuf_r+0x70>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	431d      	orrs	r5, r3
 8004c24:	81a5      	strh	r5, [r4, #12]
 8004c26:	e7cf      	b.n	8004bc8 <__smakebuf_r+0x18>

08004c28 <lflush>:
 8004c28:	898b      	ldrh	r3, [r1, #12]
 8004c2a:	f003 0309 	and.w	r3, r3, #9
 8004c2e:	2b09      	cmp	r3, #9
 8004c30:	d103      	bne.n	8004c3a <lflush+0x12>
 8004c32:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <lflush+0x18>)
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	f7ff bf6d 	b.w	8004b14 <_fflush_r>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000064 	.word	0x20000064

08004c44 <__srefill_r>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	460c      	mov	r4, r1
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b118      	cbz	r0, 8004c54 <__srefill_r+0x10>
 8004c4c:	6a03      	ldr	r3, [r0, #32]
 8004c4e:	b90b      	cbnz	r3, 8004c54 <__srefill_r+0x10>
 8004c50:	f7fe fbd2 	bl	80033f8 <__sinit>
 8004c54:	2300      	movs	r3, #0
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c5e:	069e      	lsls	r6, r3, #26
 8004c60:	d502      	bpl.n	8004c68 <__srefill_r+0x24>
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
 8004c66:	e05c      	b.n	8004d22 <__srefill_r+0xde>
 8004c68:	0758      	lsls	r0, r3, #29
 8004c6a:	d448      	bmi.n	8004cfe <__srefill_r+0xba>
 8004c6c:	06d9      	lsls	r1, r3, #27
 8004c6e:	d405      	bmi.n	8004c7c <__srefill_r+0x38>
 8004c70:	2309      	movs	r3, #9
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	e7f2      	b.n	8004c62 <__srefill_r+0x1e>
 8004c7c:	071a      	lsls	r2, r3, #28
 8004c7e:	d50b      	bpl.n	8004c98 <__srefill_r+0x54>
 8004c80:	4621      	mov	r1, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	f7ff ff46 	bl	8004b14 <_fflush_r>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d1ea      	bne.n	8004c62 <__srefill_r+0x1e>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	60a0      	str	r0, [r4, #8]
 8004c90:	f023 0308 	bic.w	r3, r3, #8
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	61a0      	str	r0, [r4, #24]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	b91b      	cbnz	r3, 8004cac <__srefill_r+0x68>
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f7ff ff82 	bl	8004bb0 <__smakebuf_r>
 8004cac:	89a6      	ldrh	r6, [r4, #12]
 8004cae:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004cb2:	07b3      	lsls	r3, r6, #30
 8004cb4:	d00f      	beq.n	8004cd6 <__srefill_r+0x92>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <__srefill_r+0xe4>)
 8004cba:	491c      	ldr	r1, [pc, #112]	; (8004d2c <__srefill_r+0xe8>)
 8004cbc:	481c      	ldr	r0, [pc, #112]	; (8004d30 <__srefill_r+0xec>)
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	f006 0609 	and.w	r6, r6, #9
 8004cc4:	f7fe fbb0 	bl	8003428 <_fwalk_sglue>
 8004cc8:	2e09      	cmp	r6, #9
 8004cca:	81a7      	strh	r7, [r4, #12]
 8004ccc:	d103      	bne.n	8004cd6 <__srefill_r+0x92>
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f7ff fe99 	bl	8004a08 <__sflush_r>
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cda:	6963      	ldr	r3, [r4, #20]
 8004cdc:	6a21      	ldr	r1, [r4, #32]
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b0      	blx	r6
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	6060      	str	r0, [r4, #4]
 8004ce8:	dc1c      	bgt.n	8004d24 <__srefill_r+0xe0>
 8004cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cee:	bf17      	itett	ne
 8004cf0:	2200      	movne	r2, #0
 8004cf2:	f043 0320 	orreq.w	r3, r3, #32
 8004cf6:	6062      	strne	r2, [r4, #4]
 8004cf8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004cfc:	e7bc      	b.n	8004c78 <__srefill_r+0x34>
 8004cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d0cd      	beq.n	8004ca0 <__srefill_r+0x5c>
 8004d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	d002      	beq.n	8004d12 <__srefill_r+0xce>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7fe fe4b 	bl	80039a8 <_free_r>
 8004d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d14:	6063      	str	r3, [r4, #4]
 8004d16:	2000      	movs	r0, #0
 8004d18:	6360      	str	r0, [r4, #52]	; 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0c0      	beq.n	8004ca0 <__srefill_r+0x5c>
 8004d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d24:	2000      	movs	r0, #0
 8004d26:	e7fc      	b.n	8004d22 <__srefill_r+0xde>
 8004d28:	2000000c 	.word	0x2000000c
 8004d2c:	08004c29 	.word	0x08004c29
 8004d30:	20000018 	.word	0x20000018

08004d34 <__sccl>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	780b      	ldrb	r3, [r1, #0]
 8004d38:	4604      	mov	r4, r0
 8004d3a:	2b5e      	cmp	r3, #94	; 0x5e
 8004d3c:	bf0b      	itete	eq
 8004d3e:	784b      	ldrbeq	r3, [r1, #1]
 8004d40:	1c4a      	addne	r2, r1, #1
 8004d42:	1c8a      	addeq	r2, r1, #2
 8004d44:	2100      	movne	r1, #0
 8004d46:	bf08      	it	eq
 8004d48:	2101      	moveq	r1, #1
 8004d4a:	3801      	subs	r0, #1
 8004d4c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004d50:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004d54:	42a8      	cmp	r0, r5
 8004d56:	d1fb      	bne.n	8004d50 <__sccl+0x1c>
 8004d58:	b90b      	cbnz	r3, 8004d5e <__sccl+0x2a>
 8004d5a:	1e50      	subs	r0, r2, #1
 8004d5c:	bd70      	pop	{r4, r5, r6, pc}
 8004d5e:	f081 0101 	eor.w	r1, r1, #1
 8004d62:	54e1      	strb	r1, [r4, r3]
 8004d64:	4610      	mov	r0, r2
 8004d66:	4602      	mov	r2, r0
 8004d68:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004d6c:	2d2d      	cmp	r5, #45	; 0x2d
 8004d6e:	d005      	beq.n	8004d7c <__sccl+0x48>
 8004d70:	2d5d      	cmp	r5, #93	; 0x5d
 8004d72:	d016      	beq.n	8004da2 <__sccl+0x6e>
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	d0f1      	beq.n	8004d5c <__sccl+0x28>
 8004d78:	462b      	mov	r3, r5
 8004d7a:	e7f2      	b.n	8004d62 <__sccl+0x2e>
 8004d7c:	7846      	ldrb	r6, [r0, #1]
 8004d7e:	2e5d      	cmp	r6, #93	; 0x5d
 8004d80:	d0fa      	beq.n	8004d78 <__sccl+0x44>
 8004d82:	42b3      	cmp	r3, r6
 8004d84:	dcf8      	bgt.n	8004d78 <__sccl+0x44>
 8004d86:	3002      	adds	r0, #2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	4296      	cmp	r6, r2
 8004d8e:	54a1      	strb	r1, [r4, r2]
 8004d90:	dcfb      	bgt.n	8004d8a <__sccl+0x56>
 8004d92:	1af2      	subs	r2, r6, r3
 8004d94:	3a01      	subs	r2, #1
 8004d96:	1c5d      	adds	r5, r3, #1
 8004d98:	42b3      	cmp	r3, r6
 8004d9a:	bfa8      	it	ge
 8004d9c:	2200      	movge	r2, #0
 8004d9e:	18ab      	adds	r3, r5, r2
 8004da0:	e7e1      	b.n	8004d66 <__sccl+0x32>
 8004da2:	4610      	mov	r0, r2
 8004da4:	e7da      	b.n	8004d5c <__sccl+0x28>

08004da6 <__submore>:
 8004da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db2:	4299      	cmp	r1, r3
 8004db4:	d11d      	bne.n	8004df2 <__submore+0x4c>
 8004db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dba:	f7fe fe69 	bl	8003a90 <_malloc_r>
 8004dbe:	b918      	cbnz	r0, 8004dc8 <__submore+0x22>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004dd2:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004dd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ddc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004de0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004de4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004de8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004dec:	6020      	str	r0, [r4, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	e7e8      	b.n	8004dc4 <__submore+0x1e>
 8004df2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004df4:	0077      	lsls	r7, r6, #1
 8004df6:	463a      	mov	r2, r7
 8004df8:	f000 f8ee 	bl	8004fd8 <_realloc_r>
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d0de      	beq.n	8004dc0 <__submore+0x1a>
 8004e02:	eb00 0806 	add.w	r8, r0, r6
 8004e06:	4601      	mov	r1, r0
 8004e08:	4632      	mov	r2, r6
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f000 f8d6 	bl	8004fbc <memcpy>
 8004e10:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004e14:	f8c4 8000 	str.w	r8, [r4]
 8004e18:	e7e9      	b.n	8004dee <__submore+0x48>

08004e1a <_ungetc_r>:
 8004e1a:	b570      	push	{r4, r5, r6, lr}
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	1c4a      	adds	r2, r1, #1
 8004e20:	4606      	mov	r6, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	d103      	bne.n	8004e2e <_ungetc_r+0x14>
 8004e26:	f04f 35ff 	mov.w	r5, #4294967295
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	b118      	cbz	r0, 8004e38 <_ungetc_r+0x1e>
 8004e30:	6a03      	ldr	r3, [r0, #32]
 8004e32:	b90b      	cbnz	r3, 8004e38 <_ungetc_r+0x1e>
 8004e34:	f7fe fae0 	bl	80033f8 <__sinit>
 8004e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d405      	bmi.n	8004e4a <_ungetc_r+0x30>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	0598      	lsls	r0, r3, #22
 8004e42:	d402      	bmi.n	8004e4a <_ungetc_r+0x30>
 8004e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e46:	f7fe fdac 	bl	80039a2 <__retarget_lock_acquire_recursive>
 8004e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	0759      	lsls	r1, r3, #29
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	d423      	bmi.n	8004ea2 <_ungetc_r+0x88>
 8004e5a:	06d3      	lsls	r3, r2, #27
 8004e5c:	d409      	bmi.n	8004e72 <_ungetc_r+0x58>
 8004e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e60:	07dd      	lsls	r5, r3, #31
 8004e62:	d4e0      	bmi.n	8004e26 <_ungetc_r+0xc>
 8004e64:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004e68:	d1dd      	bne.n	8004e26 <_ungetc_r+0xc>
 8004e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e6c:	f7fe fd9a 	bl	80039a4 <__retarget_lock_release_recursive>
 8004e70:	e7d9      	b.n	8004e26 <_ungetc_r+0xc>
 8004e72:	0710      	lsls	r0, r2, #28
 8004e74:	d511      	bpl.n	8004e9a <_ungetc_r+0x80>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff fe4b 	bl	8004b14 <_fflush_r>
 8004e7e:	b130      	cbz	r0, 8004e8e <_ungetc_r+0x74>
 8004e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e82:	07d9      	lsls	r1, r3, #31
 8004e84:	d4cf      	bmi.n	8004e26 <_ungetc_r+0xc>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004e8c:	e7ec      	b.n	8004e68 <_ungetc_r+0x4e>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	60a0      	str	r0, [r4, #8]
 8004e92:	f023 0308 	bic.w	r3, r3, #8
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	61a0      	str	r0, [r4, #24]
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ea4:	6862      	ldr	r2, [r4, #4]
 8004ea6:	b2ed      	uxtb	r5, r5
 8004ea8:	b1d3      	cbz	r3, 8004ee0 <_ungetc_r+0xc6>
 8004eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eac:	4293      	cmp	r3, r2
 8004eae:	dc05      	bgt.n	8004ebc <_ungetc_r+0xa2>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ff77 	bl	8004da6 <__submore>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d1e1      	bne.n	8004e80 <_ungetc_r+0x66>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	6022      	str	r2, [r4, #0]
 8004ec2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ec6:	6863      	ldr	r3, [r4, #4]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ece:	07da      	lsls	r2, r3, #31
 8004ed0:	d4ab      	bmi.n	8004e2a <_ungetc_r+0x10>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	059b      	lsls	r3, r3, #22
 8004ed6:	d4a8      	bmi.n	8004e2a <_ungetc_r+0x10>
 8004ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eda:	f7fe fd63 	bl	80039a4 <__retarget_lock_release_recursive>
 8004ede:	e7a4      	b.n	8004e2a <_ungetc_r+0x10>
 8004ee0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004ee2:	6920      	ldr	r0, [r4, #16]
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f001 0101 	and.w	r1, r1, #1
 8004eea:	b160      	cbz	r0, 8004f06 <_ungetc_r+0xec>
 8004eec:	4298      	cmp	r0, r3
 8004eee:	d20a      	bcs.n	8004f06 <_ungetc_r+0xec>
 8004ef0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8004ef4:	42a8      	cmp	r0, r5
 8004ef6:	d106      	bne.n	8004f06 <_ungetc_r+0xec>
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	3201      	adds	r2, #1
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	6062      	str	r2, [r4, #4]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d192      	bne.n	8004e2a <_ungetc_r+0x10>
 8004f04:	e7e5      	b.n	8004ed2 <_ungetc_r+0xb8>
 8004f06:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f0e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f10:	2303      	movs	r3, #3
 8004f12:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f14:	4623      	mov	r3, r4
 8004f16:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	6063      	str	r3, [r4, #4]
 8004f20:	e7ee      	b.n	8004f00 <_ungetc_r+0xe6>

08004f22 <memmove>:
 8004f22:	4288      	cmp	r0, r1
 8004f24:	b510      	push	{r4, lr}
 8004f26:	eb01 0402 	add.w	r4, r1, r2
 8004f2a:	d902      	bls.n	8004f32 <memmove+0x10>
 8004f2c:	4284      	cmp	r4, r0
 8004f2e:	4623      	mov	r3, r4
 8004f30:	d807      	bhi.n	8004f42 <memmove+0x20>
 8004f32:	1e43      	subs	r3, r0, #1
 8004f34:	42a1      	cmp	r1, r4
 8004f36:	d008      	beq.n	8004f4a <memmove+0x28>
 8004f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f40:	e7f8      	b.n	8004f34 <memmove+0x12>
 8004f42:	4402      	add	r2, r0
 8004f44:	4601      	mov	r1, r0
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d100      	bne.n	8004f4c <memmove+0x2a>
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f54:	e7f7      	b.n	8004f46 <memmove+0x24>
	...

08004f58 <_fstat_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	; (8004f78 <_fstat_r+0x20>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	f7fb fe8c 	bl	8000c82 <_fstat>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d102      	bne.n	8004f74 <_fstat_r+0x1c>
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	b103      	cbz	r3, 8004f74 <_fstat_r+0x1c>
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	bf00      	nop
 8004f78:	20000258 	.word	0x20000258

08004f7c <_isatty_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d06      	ldr	r5, [pc, #24]	; (8004f98 <_isatty_r+0x1c>)
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	f7fb fe8b 	bl	8000ca2 <_isatty>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_isatty_r+0x1a>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_isatty_r+0x1a>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20000258 	.word	0x20000258

08004f9c <_sbrk_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d06      	ldr	r5, [pc, #24]	; (8004fb8 <_sbrk_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fb fe94 	bl	8000cd4 <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_sbrk_r+0x1a>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_sbrk_r+0x1a>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000258 	.word	0x20000258

08004fbc <memcpy>:
 8004fbc:	440a      	add	r2, r1
 8004fbe:	4291      	cmp	r1, r2
 8004fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fc4:	d100      	bne.n	8004fc8 <memcpy+0xc>
 8004fc6:	4770      	bx	lr
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	d1f9      	bne.n	8004fca <memcpy+0xe>
 8004fd6:	bd10      	pop	{r4, pc}

08004fd8 <_realloc_r>:
 8004fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fdc:	4680      	mov	r8, r0
 8004fde:	4614      	mov	r4, r2
 8004fe0:	460e      	mov	r6, r1
 8004fe2:	b921      	cbnz	r1, 8004fee <_realloc_r+0x16>
 8004fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe8:	4611      	mov	r1, r2
 8004fea:	f7fe bd51 	b.w	8003a90 <_malloc_r>
 8004fee:	b92a      	cbnz	r2, 8004ffc <_realloc_r+0x24>
 8004ff0:	f7fe fcda 	bl	80039a8 <_free_r>
 8004ff4:	4625      	mov	r5, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ffc:	f000 f914 	bl	8005228 <_malloc_usable_size_r>
 8005000:	4284      	cmp	r4, r0
 8005002:	4607      	mov	r7, r0
 8005004:	d802      	bhi.n	800500c <_realloc_r+0x34>
 8005006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800500a:	d812      	bhi.n	8005032 <_realloc_r+0x5a>
 800500c:	4621      	mov	r1, r4
 800500e:	4640      	mov	r0, r8
 8005010:	f7fe fd3e 	bl	8003a90 <_malloc_r>
 8005014:	4605      	mov	r5, r0
 8005016:	2800      	cmp	r0, #0
 8005018:	d0ed      	beq.n	8004ff6 <_realloc_r+0x1e>
 800501a:	42bc      	cmp	r4, r7
 800501c:	4622      	mov	r2, r4
 800501e:	4631      	mov	r1, r6
 8005020:	bf28      	it	cs
 8005022:	463a      	movcs	r2, r7
 8005024:	f7ff ffca 	bl	8004fbc <memcpy>
 8005028:	4631      	mov	r1, r6
 800502a:	4640      	mov	r0, r8
 800502c:	f7fe fcbc 	bl	80039a8 <_free_r>
 8005030:	e7e1      	b.n	8004ff6 <_realloc_r+0x1e>
 8005032:	4635      	mov	r5, r6
 8005034:	e7df      	b.n	8004ff6 <_realloc_r+0x1e>
	...

08005038 <_strtol_l.constprop.0>:
 8005038:	2b01      	cmp	r3, #1
 800503a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503e:	d001      	beq.n	8005044 <_strtol_l.constprop.0+0xc>
 8005040:	2b24      	cmp	r3, #36	; 0x24
 8005042:	d906      	bls.n	8005052 <_strtol_l.constprop.0+0x1a>
 8005044:	f7fe fc82 	bl	800394c <__errno>
 8005048:	2316      	movs	r3, #22
 800504a:	6003      	str	r3, [r0, #0]
 800504c:	2000      	movs	r0, #0
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005138 <_strtol_l.constprop.0+0x100>
 8005056:	460d      	mov	r5, r1
 8005058:	462e      	mov	r6, r5
 800505a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800505e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005062:	f017 0708 	ands.w	r7, r7, #8
 8005066:	d1f7      	bne.n	8005058 <_strtol_l.constprop.0+0x20>
 8005068:	2c2d      	cmp	r4, #45	; 0x2d
 800506a:	d132      	bne.n	80050d2 <_strtol_l.constprop.0+0x9a>
 800506c:	782c      	ldrb	r4, [r5, #0]
 800506e:	2701      	movs	r7, #1
 8005070:	1cb5      	adds	r5, r6, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d05b      	beq.n	800512e <_strtol_l.constprop.0+0xf6>
 8005076:	2b10      	cmp	r3, #16
 8005078:	d109      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800507a:	2c30      	cmp	r4, #48	; 0x30
 800507c:	d107      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800507e:	782c      	ldrb	r4, [r5, #0]
 8005080:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005084:	2c58      	cmp	r4, #88	; 0x58
 8005086:	d14d      	bne.n	8005124 <_strtol_l.constprop.0+0xec>
 8005088:	786c      	ldrb	r4, [r5, #1]
 800508a:	2310      	movs	r3, #16
 800508c:	3502      	adds	r5, #2
 800508e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005092:	f108 38ff 	add.w	r8, r8, #4294967295
 8005096:	f04f 0e00 	mov.w	lr, #0
 800509a:	fbb8 f9f3 	udiv	r9, r8, r3
 800509e:	4676      	mov	r6, lr
 80050a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80050a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80050a8:	f1bc 0f09 	cmp.w	ip, #9
 80050ac:	d816      	bhi.n	80050dc <_strtol_l.constprop.0+0xa4>
 80050ae:	4664      	mov	r4, ip
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	dd24      	ble.n	80050fe <_strtol_l.constprop.0+0xc6>
 80050b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80050b8:	d008      	beq.n	80050cc <_strtol_l.constprop.0+0x94>
 80050ba:	45b1      	cmp	r9, r6
 80050bc:	d31c      	bcc.n	80050f8 <_strtol_l.constprop.0+0xc0>
 80050be:	d101      	bne.n	80050c4 <_strtol_l.constprop.0+0x8c>
 80050c0:	45a2      	cmp	sl, r4
 80050c2:	db19      	blt.n	80050f8 <_strtol_l.constprop.0+0xc0>
 80050c4:	fb06 4603 	mla	r6, r6, r3, r4
 80050c8:	f04f 0e01 	mov.w	lr, #1
 80050cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050d0:	e7e8      	b.n	80050a4 <_strtol_l.constprop.0+0x6c>
 80050d2:	2c2b      	cmp	r4, #43	; 0x2b
 80050d4:	bf04      	itt	eq
 80050d6:	782c      	ldrbeq	r4, [r5, #0]
 80050d8:	1cb5      	addeq	r5, r6, #2
 80050da:	e7ca      	b.n	8005072 <_strtol_l.constprop.0+0x3a>
 80050dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80050e0:	f1bc 0f19 	cmp.w	ip, #25
 80050e4:	d801      	bhi.n	80050ea <_strtol_l.constprop.0+0xb2>
 80050e6:	3c37      	subs	r4, #55	; 0x37
 80050e8:	e7e2      	b.n	80050b0 <_strtol_l.constprop.0+0x78>
 80050ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80050ee:	f1bc 0f19 	cmp.w	ip, #25
 80050f2:	d804      	bhi.n	80050fe <_strtol_l.constprop.0+0xc6>
 80050f4:	3c57      	subs	r4, #87	; 0x57
 80050f6:	e7db      	b.n	80050b0 <_strtol_l.constprop.0+0x78>
 80050f8:	f04f 3eff 	mov.w	lr, #4294967295
 80050fc:	e7e6      	b.n	80050cc <_strtol_l.constprop.0+0x94>
 80050fe:	f1be 3fff 	cmp.w	lr, #4294967295
 8005102:	d105      	bne.n	8005110 <_strtol_l.constprop.0+0xd8>
 8005104:	2322      	movs	r3, #34	; 0x22
 8005106:	6003      	str	r3, [r0, #0]
 8005108:	4646      	mov	r6, r8
 800510a:	b942      	cbnz	r2, 800511e <_strtol_l.constprop.0+0xe6>
 800510c:	4630      	mov	r0, r6
 800510e:	e79e      	b.n	800504e <_strtol_l.constprop.0+0x16>
 8005110:	b107      	cbz	r7, 8005114 <_strtol_l.constprop.0+0xdc>
 8005112:	4276      	negs	r6, r6
 8005114:	2a00      	cmp	r2, #0
 8005116:	d0f9      	beq.n	800510c <_strtol_l.constprop.0+0xd4>
 8005118:	f1be 0f00 	cmp.w	lr, #0
 800511c:	d000      	beq.n	8005120 <_strtol_l.constprop.0+0xe8>
 800511e:	1e69      	subs	r1, r5, #1
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	e7f3      	b.n	800510c <_strtol_l.constprop.0+0xd4>
 8005124:	2430      	movs	r4, #48	; 0x30
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1b1      	bne.n	800508e <_strtol_l.constprop.0+0x56>
 800512a:	2308      	movs	r3, #8
 800512c:	e7af      	b.n	800508e <_strtol_l.constprop.0+0x56>
 800512e:	2c30      	cmp	r4, #48	; 0x30
 8005130:	d0a5      	beq.n	800507e <_strtol_l.constprop.0+0x46>
 8005132:	230a      	movs	r3, #10
 8005134:	e7ab      	b.n	800508e <_strtol_l.constprop.0+0x56>
 8005136:	bf00      	nop
 8005138:	0800534f 	.word	0x0800534f

0800513c <_strtol_r>:
 800513c:	f7ff bf7c 	b.w	8005038 <_strtol_l.constprop.0>

08005140 <_strtoul_l.constprop.0>:
 8005140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005144:	4f36      	ldr	r7, [pc, #216]	; (8005220 <_strtoul_l.constprop.0+0xe0>)
 8005146:	4686      	mov	lr, r0
 8005148:	460d      	mov	r5, r1
 800514a:	4628      	mov	r0, r5
 800514c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005150:	5d3e      	ldrb	r6, [r7, r4]
 8005152:	f016 0608 	ands.w	r6, r6, #8
 8005156:	d1f8      	bne.n	800514a <_strtoul_l.constprop.0+0xa>
 8005158:	2c2d      	cmp	r4, #45	; 0x2d
 800515a:	d130      	bne.n	80051be <_strtoul_l.constprop.0+0x7e>
 800515c:	782c      	ldrb	r4, [r5, #0]
 800515e:	2601      	movs	r6, #1
 8005160:	1c85      	adds	r5, r0, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d057      	beq.n	8005216 <_strtoul_l.constprop.0+0xd6>
 8005166:	2b10      	cmp	r3, #16
 8005168:	d109      	bne.n	800517e <_strtoul_l.constprop.0+0x3e>
 800516a:	2c30      	cmp	r4, #48	; 0x30
 800516c:	d107      	bne.n	800517e <_strtoul_l.constprop.0+0x3e>
 800516e:	7828      	ldrb	r0, [r5, #0]
 8005170:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005174:	2858      	cmp	r0, #88	; 0x58
 8005176:	d149      	bne.n	800520c <_strtoul_l.constprop.0+0xcc>
 8005178:	786c      	ldrb	r4, [r5, #1]
 800517a:	2310      	movs	r3, #16
 800517c:	3502      	adds	r5, #2
 800517e:	f04f 38ff 	mov.w	r8, #4294967295
 8005182:	2700      	movs	r7, #0
 8005184:	fbb8 f8f3 	udiv	r8, r8, r3
 8005188:	fb03 f908 	mul.w	r9, r3, r8
 800518c:	ea6f 0909 	mvn.w	r9, r9
 8005190:	4638      	mov	r0, r7
 8005192:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005196:	f1bc 0f09 	cmp.w	ip, #9
 800519a:	d815      	bhi.n	80051c8 <_strtoul_l.constprop.0+0x88>
 800519c:	4664      	mov	r4, ip
 800519e:	42a3      	cmp	r3, r4
 80051a0:	dd23      	ble.n	80051ea <_strtoul_l.constprop.0+0xaa>
 80051a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80051a6:	d007      	beq.n	80051b8 <_strtoul_l.constprop.0+0x78>
 80051a8:	4580      	cmp	r8, r0
 80051aa:	d31b      	bcc.n	80051e4 <_strtoul_l.constprop.0+0xa4>
 80051ac:	d101      	bne.n	80051b2 <_strtoul_l.constprop.0+0x72>
 80051ae:	45a1      	cmp	r9, r4
 80051b0:	db18      	blt.n	80051e4 <_strtoul_l.constprop.0+0xa4>
 80051b2:	fb00 4003 	mla	r0, r0, r3, r4
 80051b6:	2701      	movs	r7, #1
 80051b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051bc:	e7e9      	b.n	8005192 <_strtoul_l.constprop.0+0x52>
 80051be:	2c2b      	cmp	r4, #43	; 0x2b
 80051c0:	bf04      	itt	eq
 80051c2:	782c      	ldrbeq	r4, [r5, #0]
 80051c4:	1c85      	addeq	r5, r0, #2
 80051c6:	e7cc      	b.n	8005162 <_strtoul_l.constprop.0+0x22>
 80051c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80051cc:	f1bc 0f19 	cmp.w	ip, #25
 80051d0:	d801      	bhi.n	80051d6 <_strtoul_l.constprop.0+0x96>
 80051d2:	3c37      	subs	r4, #55	; 0x37
 80051d4:	e7e3      	b.n	800519e <_strtoul_l.constprop.0+0x5e>
 80051d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80051da:	f1bc 0f19 	cmp.w	ip, #25
 80051de:	d804      	bhi.n	80051ea <_strtoul_l.constprop.0+0xaa>
 80051e0:	3c57      	subs	r4, #87	; 0x57
 80051e2:	e7dc      	b.n	800519e <_strtoul_l.constprop.0+0x5e>
 80051e4:	f04f 37ff 	mov.w	r7, #4294967295
 80051e8:	e7e6      	b.n	80051b8 <_strtoul_l.constprop.0+0x78>
 80051ea:	1c7b      	adds	r3, r7, #1
 80051ec:	d106      	bne.n	80051fc <_strtoul_l.constprop.0+0xbc>
 80051ee:	2322      	movs	r3, #34	; 0x22
 80051f0:	f8ce 3000 	str.w	r3, [lr]
 80051f4:	4638      	mov	r0, r7
 80051f6:	b932      	cbnz	r2, 8005206 <_strtoul_l.constprop.0+0xc6>
 80051f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051fc:	b106      	cbz	r6, 8005200 <_strtoul_l.constprop.0+0xc0>
 80051fe:	4240      	negs	r0, r0
 8005200:	2a00      	cmp	r2, #0
 8005202:	d0f9      	beq.n	80051f8 <_strtoul_l.constprop.0+0xb8>
 8005204:	b107      	cbz	r7, 8005208 <_strtoul_l.constprop.0+0xc8>
 8005206:	1e69      	subs	r1, r5, #1
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	e7f5      	b.n	80051f8 <_strtoul_l.constprop.0+0xb8>
 800520c:	2430      	movs	r4, #48	; 0x30
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1b5      	bne.n	800517e <_strtoul_l.constprop.0+0x3e>
 8005212:	2308      	movs	r3, #8
 8005214:	e7b3      	b.n	800517e <_strtoul_l.constprop.0+0x3e>
 8005216:	2c30      	cmp	r4, #48	; 0x30
 8005218:	d0a9      	beq.n	800516e <_strtoul_l.constprop.0+0x2e>
 800521a:	230a      	movs	r3, #10
 800521c:	e7af      	b.n	800517e <_strtoul_l.constprop.0+0x3e>
 800521e:	bf00      	nop
 8005220:	0800534f 	.word	0x0800534f

08005224 <_strtoul_r>:
 8005224:	f7ff bf8c 	b.w	8005140 <_strtoul_l.constprop.0>

08005228 <_malloc_usable_size_r>:
 8005228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522c:	1f18      	subs	r0, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfbc      	itt	lt
 8005232:	580b      	ldrlt	r3, [r1, r0]
 8005234:	18c0      	addlt	r0, r0, r3
 8005236:	4770      	bx	lr

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
