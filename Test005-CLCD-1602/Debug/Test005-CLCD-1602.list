
Test005-CLCD-1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004868  08004868  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  080048d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080048d8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb6d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf3  00000000  00000000  0002bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000802  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c10  00000000  00000000  0002eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5ae  00000000  00000000  000457aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a0fe  00000000  00000000  00052d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f8  00000000  00000000  000dce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e0250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004774 	.word	0x08004774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004774 	.word	0x08004774

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <i2c_init>:
#define I2C_ADDR 0x4E	//0x27 << 1

I2C_HandleTypeDef *hi2c = NULL;

int i2c_init(I2C_HandleTypeDef *p)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <i2c_init+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000084 	.word	0x20000084

0800059c <i2c_scan>:

int i2c_scan()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <i2c_scan+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d024      	beq.n	80005f4 <i2c_scan+0x58>
	for(int addr=0;addr<128;addr++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e01d      	b.n	80005ec <i2c_scan+0x50>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <i2c_scan+0x64>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b299      	uxth	r1, r3
 80005b8:	230a      	movs	r3, #10
 80005ba:	2201      	movs	r2, #1
 80005bc:	f001 f9f6 	bl	80019ac <HAL_I2C_IsDeviceReady>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d104      	bne.n	80005d0 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <i2c_scan+0x68>)
 80005ca:	f002 ff75 	bl	80034b8 <iprintf>
 80005ce:	e002      	b.n	80005d6 <i2c_scan+0x3a>
		}
		else
		{
			printf("  .  ");
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <i2c_scan+0x6c>)
 80005d2:	f002 ff71 	bl	80034b8 <iprintf>
		}
		if((addr % 16) == 0) printf("\r\n");
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <i2c_scan+0x4a>
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <i2c_scan+0x70>)
 80005e2:	f002 ffcf 	bl	8003584 <puts>
	for(int addr=0;addr<128;addr++)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b7f      	cmp	r3, #127	; 0x7f
 80005f0:	ddde      	ble.n	80005b0 <i2c_scan+0x14>
 80005f2:	e000      	b.n	80005f6 <i2c_scan+0x5a>
	if(hi2c == NULL) return;
 80005f4:	bf00      	nop
	}
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	0800478c 	.word	0x0800478c
 8000608:	08004794 	.word	0x08004794
 800060c:	0800479c 	.word	0x0800479c

08000610 <lcd_command>:


void lcd_command(char cmd)	// cmd_bit : abcd efgh
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = cmd & 0xf0;	// n1 : abcd 0000 , upper nibble, up 4bits remain, low 4bits go away
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd & 0x0f) << 4;	// n2 : efgh 0000 , lower nibble, low 4bits remain,   (cmd << 4) is also same
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|0; //RW|EN_1|NC|RS; 0x0c
 8000628:	230c      	movs	r3, #12
 800062a:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0   |0|0; //RW|EN_0|NC|RS; 0x08
 800062c:	2308      	movs	r3, #8
 800062e:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	4313      	orrs	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	7b3b      	ldrb	r3, [r7, #12]
 800063e:	4313      	orrs	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000644:	7bba      	ldrb	r2, [r7, #14]
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	4313      	orrs	r3, r2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 800064e:	7bba      	ldrb	r2, [r7, #14]
 8000650:	7b3b      	ldrb	r3, [r7, #12]
 8000652:	4313      	orrs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <lcd_command+0x64>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	230a      	movs	r3, #10
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2304      	movs	r3, #4
 8000666:	214e      	movs	r1, #78	; 0x4e
 8000668:	f001 f8a2 	bl	80017b0 <HAL_I2C_Master_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000084 	.word	0x20000084

08000678 <lcd_data>:
void lcd_data(char ch)  //control signal, read,write / enable / 1(high) / resistor select  : 4bits
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	char n1, n2, n3, n4, dd[4];
	n1 = ch & 0xf0;	// n1 : abcd 0000 , upper nibble, up 4bits remain, low 4bits go away
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	73fb      	strb	r3, [r7, #15]
	n2 = (ch & 0x0f) << 4;	// n2 : efgh 0000 , lower nibble, low 4bits remain,   (cmd << 4) is also same
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|(1<<0); //RW|EN_1|NC|RS; 0x0c
 8000690:	230d      	movs	r3, #13
 8000692:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|  0   |0|(1<<0); //RW|EN_0|NC|RS; 0x08
 8000694:	2309      	movs	r3, #9
 8000696:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000698:	7bfa      	ldrb	r2, [r7, #15]
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	4313      	orrs	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80006ac:	7bba      	ldrb	r2, [r7, #14]
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;
 80006b6:	7bba      	ldrb	r2, [r7, #14]
 80006b8:	7b3b      	ldrb	r3, [r7, #12]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <lcd_data+0x64>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	f107 0208 	add.w	r2, r7, #8
 80006c8:	230a      	movs	r3, #10
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2304      	movs	r3, #4
 80006ce:	214e      	movs	r1, #78	; 0x4e
 80006d0:	f001 f86e 	bl	80017b0 <HAL_I2C_Master_Transmit>

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000084 	.word	0x20000084

080006e0 <lcd_init>:
void lcd_init()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff93 	bl	8000610 <lcd_command>
	lcd_command(0x02); // cursor home
 80006ea:	2002      	movs	r0, #2
 80006ec:	f7ff ff90 	bl	8000610 <lcd_command>
	lcd_command(0x06);
 80006f0:	2006      	movs	r0, #6
 80006f2:	f7ff ff8d 	bl	8000610 <lcd_command>
	lcd_command(0x0f);
 80006f6:	200f      	movs	r0, #15
 80006f8:	f7ff ff8a 	bl	8000610 <lcd_command>
	HAL_Delay(10);
 80006fc:	200a      	movs	r0, #10
 80006fe:	f000 fc53 	bl	8000fa8 <HAL_Delay>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}

08000706 <lcd_print>:

void lcd_print(char *str)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	while(*str) lcd_data(*str++);
 800070e:	e006      	b.n	800071e <lcd_print+0x18>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ffad 	bl	8000678 <lcd_data>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <lcd_print+0xa>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_printEx>:

void lcd_printEx(char *str, int ln)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command (0x80);		//1000 0000
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <lcd_printEx+0x16>
 8000740:	2080      	movs	r0, #128	; 0x80
 8000742:	f7ff ff65 	bl	8000610 <lcd_command>
	if(ln == 1) lcd_command (0xc0);		//1100 0000
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d102      	bne.n	8000752 <lcd_printEx+0x22>
 800074c:	20c0      	movs	r0, #192	; 0xc0
 800074e:	f7ff ff5f 	bl	8000610 <lcd_command>
	lcd_print(str);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ffd7 	bl	8000706 <lcd_print>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fbae 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f824 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f8e4 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f8b8 	bl	80008e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000774:	f000 f888 	bl	8000888 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("LCD (1602)");
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <main+0x44>)
 800077a:	f000 f999 	bl	8000ab0 <ProgramStart>
  i2c_init(&hi2c1);
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <main+0x48>)
 8000780:	f7ff fefc 	bl	800057c <i2c_init>
  i2c_scan();
 8000784:	f7ff ff0a 	bl	800059c <i2c_scan>

  lcd_init(); HAL_Delay(100);
 8000788:	f7ff ffaa 	bl	80006e0 <lcd_init>
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f000 fc0b 	bl	8000fa8 <HAL_Delay>
  lcd_print("Hello");
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <main+0x4c>)
 8000794:	f7ff ffb7 	bl	8000706 <lcd_print>
  lcd_printEx("Good afternoon", 1);
 8000798:	2101      	movs	r1, #1
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <main+0x50>)
 800079c:	f7ff ffc8 	bl	8000730 <lcd_printEx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x40>
 80007a2:	bf00      	nop
 80007a4:	080047a0 	.word	0x080047a0
 80007a8:	200001d8 	.word	0x200001d8
 80007ac:	080047ac 	.word	0x080047ac
 80007b0:	080047b4 	.word	0x080047b4

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 f88c 	bl	80038e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000824:	2310      	movs	r3, #16
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082e:	2304      	movs	r3, #4
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000832:	2304      	movs	r3, #4
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fc40 	bl	80020c0 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000846:	f000 f8e5 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fea2 	bl	80025b0 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000872:	f000 f8cf 	bl	8000a14 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f000 fe2f 	bl	8001528 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f8a0 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200001d8 	.word	0x200001d8
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f002 f868 	bl	80029f0 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f875 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000022c 	.word	0x2000022c
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0xd4>)
 80009c4:	f000 fd96 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0xd8>)
 80009e0:	f000 fbec 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0xd4>)
 80009fc:	f000 fbde 	bl	80011bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020800 	.word	0x40020800

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <__io_getchar>:
extern UART_HandleTypeDef huart2;
//I2C_HandleTypeDef *hi2c = NULL;


int __io_getchar(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000a26:	bf00      	nop
 8000a28:	1df9      	adds	r1, r7, #7
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <__io_getchar+0x44>)
 8000a30:	f002 f8b9 	bl	8002ba6 <HAL_UART_Receive>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f6      	bne.n	8000a28 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10); //echo
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <__io_getchar+0x44>)
 8000a42:	f002 f825 	bl	8002a90 <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b0d      	cmp	r3, #13
 8000a4a:	d105      	bne.n	8000a58 <__io_getchar+0x38>
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <__io_getchar+0x48>)
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <__io_getchar+0x44>)
 8000a54:	f002 f81c 	bl	8002a90 <HAL_UART_Transmit>
	return ch;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000022c 	.word	0x2000022c
 8000a68:	080047c4 	.word	0x080047c4

08000a6c <__io_putchar>:

int __io_putchar(int ch)  //4byte
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	230a      	movs	r3, #10
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <__io_putchar+0x20>)
 8000a7c:	f002 f808 	bl	8002a90 <HAL_UART_Transmit>
	return ch;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000022c 	.word	0x2000022c

08000a90 <Standby>:

void Standby()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
		while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)); //wait until B1 == 0 (Press)
 8000a94:	bf00      	nop
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <Standby+0x1c>)
 8000a9c:	f000 fd12 	bl	80014c4 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f7      	bne.n	8000a96 <Standby+0x6>
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020800 	.word	0x40020800

08000ab0 <ProgramStart>:

void ProgramStart (char* str)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]


	//printf("\033[2J\033[0;0H");
	cls();
 8000ab8:	f000 f820 	bl	8000afc <cls>
	Cursor(0,0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f826 	bl	8000b10 <Cursor>
	printf("Program Name - %s\r\n", str);
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <ProgramStart+0x40>)
 8000ac8:	f002 fcf6 	bl	80034b8 <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <ProgramStart+0x44>)
 8000ace:	f002 fd59 	bl	8003584 <puts>
	setvbuf(stdin, NULL, _IONBF, 0);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <ProgramStart+0x48>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6858      	ldr	r0, [r3, #4]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2202      	movs	r2, #2
 8000adc:	2100      	movs	r1, #0
 8000ade:	f002 fd59 	bl	8003594 <setvbuf>
	Standby();
 8000ae2:	f7ff ffd5 	bl	8000a90 <Standby>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080047c8 	.word	0x080047c8
 8000af4:	080047dc 	.word	0x080047dc
 8000af8:	20000064 	.word	0x20000064

08000afc <cls>:

void cls()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	printf("\033[2J");
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <cls+0x10>)
 8000b02:	f002 fcd9 	bl	80034b8 <iprintf>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08004800 	.word	0x08004800

08000b10 <Cursor>:
void Cursor(int x, int y)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf, "\033[%d;%dH", y, x);
 8000b1a:	f107 000c 	add.w	r0, r7, #12
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <Cursor+0x2c>)
 8000b24:	f002 fde4 	bl	80036f0 <siprintf>
	puts(buf);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fd29 	bl	8003584 <puts>
}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08004808 	.word	0x08004808

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fae8 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_I2C_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12c      	bne.n	8000c0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x8c>)
 8000bec:	f000 fae6 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_UART_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12b      	bne.n	8000c9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c96:	f000 fa91 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f934 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d16:	f7ff fe83 	bl	8000a20 <__io_getchar>
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
  }

  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fe87 	bl	8000a6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x12>
  }
  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f002 fdb4 	bl	800397c <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000088 	.word	0x20000088
 8000e48:	20000278 	.word	0x20000278

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f002 fd73 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fc5d 	bl	8000760 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb4:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8000eb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ebc:	20000278 	.word	0x20000278

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f931 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe22 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f93b 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f911 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000274 	.word	0x20000274

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000274 	.word	0x20000274

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	e159      	b.n	800148c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	f040 8148 	bne.w	8001486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120a:	2b02      	cmp	r3, #2
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a2 	beq.w	8001486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	4a52      	ldr	r2, [pc, #328]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a49      	ldr	r2, [pc, #292]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x202>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x1fe>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x1fa>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x1f6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x300>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x1f2>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x204>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x304>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f aea2 	bls.w	80011d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e12b      	b.n	8001792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fb1e 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800158c:	f001 fa08 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8001590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a81      	ldr	r2, [pc, #516]	; (800179c <HAL_I2C_Init+0x274>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d807      	bhi.n	80015ac <HAL_I2C_Init+0x84>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a80      	ldr	r2, [pc, #512]	; (80017a0 <HAL_I2C_Init+0x278>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e006      	b.n	80015ba <HAL_I2C_Init+0x92>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a7d      	ldr	r2, [pc, #500]	; (80017a4 <HAL_I2C_Init+0x27c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0e7      	b.n	8001792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a78      	ldr	r2, [pc, #480]	; (80017a8 <HAL_I2C_Init+0x280>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_I2C_Init+0x274>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d802      	bhi.n	80015fc <HAL_I2C_Init+0xd4>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	e009      	b.n	8001610 <HAL_I2C_Init+0xe8>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_I2C_Init+0x284>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	495c      	ldr	r1, [pc, #368]	; (800179c <HAL_I2C_Init+0x274>)
 800162c:	428b      	cmp	r3, r1
 800162e:	d819      	bhi.n	8001664 <HAL_I2C_Init+0x13c>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e59      	subs	r1, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fbb1 f3f3 	udiv	r3, r1, r3
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001644:	400b      	ands	r3, r1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_I2C_Init+0x138>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e59      	subs	r1, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fbb1 f3f3 	udiv	r3, r1, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	e051      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001660:	2304      	movs	r3, #4
 8001662:	e04f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_I2C_Init+0x168>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e012      	b.n	80016b6 <HAL_I2C_Init+0x18e>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	0099      	lsls	r1, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x196>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e022      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10e      	bne.n	80016e4 <HAL_I2C_Init+0x1bc>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e58      	subs	r0, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	440b      	add	r3, r1
 80016d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e2:	e00f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	0099      	lsls	r1, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	6809      	ldr	r1, [r1, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6911      	ldr	r1, [r2, #16]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68d2      	ldr	r2, [r2, #12]
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	000186a0 	.word	0x000186a0
 80017a0:	001e847f 	.word	0x001e847f
 80017a4:	003d08ff 	.word	0x003d08ff
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	461a      	mov	r2, r3
 80017bc:	460b      	mov	r3, r1
 80017be:	817b      	strh	r3, [r7, #10]
 80017c0:	4613      	mov	r3, r2
 80017c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fbe4 	bl	8000f90 <HAL_GetTick>
 80017c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	f040 80e0 	bne.w	8001998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2319      	movs	r3, #25
 80017de:	2201      	movs	r2, #1
 80017e0:	4970      	ldr	r1, [pc, #448]	; (80019a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa92 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0d3      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x50>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0cc      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d007      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2221      	movs	r2, #33	; 0x21
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2210      	movs	r2, #16
 8001842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	893a      	ldrh	r2, [r7, #8]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001868:	8979      	ldrh	r1, [r7, #10]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f9ca 	bl	8001c08 <I2C_MasterRequestWrite>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e08d      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001894:	e066      	b.n	8001964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	6a39      	ldr	r1, [r7, #32]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fb50 	bl	8001f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d107      	bne.n	80018be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06b      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d11b      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x188>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d017      	beq.n	8001938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fb47 	bl	8001fd0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00d      	beq.n	8001964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01a      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d194      	bne.n	8001896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	00100002 	.word	0x00100002
 80019a8:	ffff0000 	.word	0xffff0000

080019ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	460b      	mov	r3, r1
 80019ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff fae8 	bl	8000f90 <HAL_GetTick>
 80019c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	f040 8111 	bne.w	8001bf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2319      	movs	r3, #25
 80019da:	2201      	movs	r2, #1
 80019dc:	4988      	ldr	r1, [pc, #544]	; (8001c00 <HAL_I2C_IsDeviceReady+0x254>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f994 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	e104      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_IsDeviceReady+0x50>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0fd      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d007      	beq.n	8001a22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2224      	movs	r2, #36	; 0x24
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a70      	ldr	r2, [pc, #448]	; (8001c04 <HAL_I2C_IsDeviceReady+0x258>)
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f952 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00d      	beq.n	8001a8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7c:	d103      	bne.n	8001a86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0b6      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa79 	bl	8000f90 <HAL_GetTick>
 8001a9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ace:	e025      	b.n	8001b1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ad0:	f7ff fa5e 	bl	8000f90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d302      	bcc.n	8001ae6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	22a0      	movs	r2, #160	; 0xa0
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2ba0      	cmp	r3, #160	; 0xa0
 8001b26:	d005      	beq.n	8001b34 <HAL_I2C_IsDeviceReady+0x188>
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_I2C_IsDeviceReady+0x188>
 8001b2e:	7dbb      	ldrb	r3, [r7, #22]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0cd      	beq.n	8001ad0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d129      	bne.n	8001b9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2319      	movs	r3, #25
 8001b76:	2201      	movs	r2, #1
 8001b78:	4921      	ldr	r1, [pc, #132]	; (8001c00 <HAL_I2C_IsDeviceReady+0x254>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8c6 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e036      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e02c      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2319      	movs	r3, #25
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	490f      	ldr	r1, [pc, #60]	; (8001c00 <HAL_I2C_IsDeviceReady+0x254>)
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f8a2 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e012      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f4ff af32 	bcc.w	8001a46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	00100002 	.word	0x00100002
 8001c04:	ffff0000 	.word	0xffff0000

08001c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d006      	beq.n	8001c32 <I2C_MasterRequestWrite+0x2a>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d003      	beq.n	8001c32 <I2C_MasterRequestWrite+0x2a>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c30:	d108      	bne.n	8001c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e00b      	b.n	8001c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d107      	bne.n	8001c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f84f 	bl	8001d0c <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c82:	d103      	bne.n	8001c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e035      	b.n	8001cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c98:	d108      	bne.n	8001cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	e01b      	b.n	8001ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	11db      	asrs	r3, r3, #7
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f003 0306 	and.w	r3, r3, #6
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f063 030f 	orn	r3, r3, #15
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <I2C_MasterRequestWrite+0xfc>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f898 	bl	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e010      	b.n	8001cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <I2C_MasterRequestWrite+0x100>)
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f888 	bl	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	00010008 	.word	0x00010008
 8001d08:	00010002 	.word	0x00010002

08001d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d1c:	e048      	b.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d044      	beq.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d26:	f7ff f933 	bl	8000f90 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d139      	bne.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	e00c      	b.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d116      	bne.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e023      	b.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10d      	bne.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	e00c      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d093      	beq.n	8001d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e0e:	e071      	b.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1e:	d123      	bne.n	8001e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e067      	b.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d041      	beq.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e70:	f7ff f88e 	bl	8000f90 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d302      	bcc.n	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d136      	bne.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10c      	bne.n	8001eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e00b      	b.n	8001ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d016      	beq.n	8001ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e021      	b.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10c      	bne.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	2301      	movne	r3, #1
 8001f12:	2300      	moveq	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e00b      	b.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4013      	ands	r3, r2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af6d 	bne.w	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f4c:	e034      	b.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f886 	bl	8002060 <I2C_IsAcknowledgeFailed>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e034      	b.n	8001fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d028      	beq.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7ff f813 	bl	8000f90 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11d      	bne.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d016      	beq.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e007      	b.n	8001fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d1c3      	bne.n	8001f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fdc:	e034      	b.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f83e 	bl	8002060 <I2C_IsAcknowledgeFailed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e034      	b.n	8002058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d028      	beq.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7fe ffcb 	bl	8000f90 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	429a      	cmp	r2, r3
 8002004:	d302      	bcc.n	800200c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11d      	bne.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d016      	beq.n	8002048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e007      	b.n	8002058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b04      	cmp	r3, #4
 8002054:	d1c3      	bne.n	8001fde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002076:	d11b      	bne.n	80020b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e267      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d075      	beq.n	80021ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020de:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d00c      	beq.n	8002104 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ea:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d112      	bne.n	800211c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f6:	4b82      	ldr	r3, [pc, #520]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002102:	d10b      	bne.n	800211c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d05b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x108>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d157      	bne.n	80021c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e242      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d106      	bne.n	8002134 <HAL_RCC_OscConfig+0x74>
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e01d      	b.n	8002170 <HAL_RCC_OscConfig+0xb0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b70      	ldr	r3, [pc, #448]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6f      	ldr	r2, [pc, #444]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6c      	ldr	r2, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0xb0>
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a68      	ldr	r2, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe ff0a 	bl	8000f90 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe ff06 	bl	8000f90 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e207      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0xc0>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fef6 	bl	8000f90 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fef2 	bl	8000f90 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1f3      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0xe8>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d063      	beq.n	800229e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11c      	bne.n	8002228 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b44      	ldr	r3, [pc, #272]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d116      	bne.n	8002228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x152>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1c7      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	e03a      	b.n	800229e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002230:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_RCC_OscConfig+0x244>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe feab 	bl	8000f90 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7fe fea7 	bl	8000f90 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1a8      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4925      	ldr	r1, [pc, #148]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_OscConfig+0x244>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fe8a 	bl	8000f90 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7fe fe86 	bl	8000f90 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e187      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d036      	beq.n	8002318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x248>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fe6a 	bl	8000f90 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7fe fe66 	bl	8000f90 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e167      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x240>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x200>
 80022de:	e01b      	b.n	8002318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x248>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fe53 	bl	8000f90 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ec:	e00e      	b.n	800230c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7fe fe4f 	bl	8000f90 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d907      	bls.n	800230c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e150      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
 8002300:	40023800 	.word	0x40023800
 8002304:	42470000 	.word	0x42470000
 8002308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b88      	ldr	r3, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ea      	bne.n	80022ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8097 	beq.w	8002454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b81      	ldr	r3, [pc, #516]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b7d      	ldr	r3, [pc, #500]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a7c      	ldr	r2, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b7a      	ldr	r3, [pc, #488]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b77      	ldr	r3, [pc, #476]	; (8002534 <HAL_RCC_OscConfig+0x474>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b74      	ldr	r3, [pc, #464]	; (8002534 <HAL_RCC_OscConfig+0x474>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a73      	ldr	r2, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x474>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7fe fe0f 	bl	8000f90 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7fe fe0b 	bl	8000f90 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e10c      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x474>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x2ea>
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a63      	ldr	r2, [pc, #396]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x324>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x30c>
 80023b2:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a5e      	ldr	r2, [pc, #376]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0x324>
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7fe fdd0 	bl	8000f90 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7fe fdcc 	bl	8000f90 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0cb      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCC_OscConfig+0x334>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe fdba 	bl	8000f90 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe fdb6 	bl	8000f90 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0b5      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ee      	bne.n	8002420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a1 	beq.w	80025a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	d05c      	beq.n	8002524 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d141      	bne.n	80024f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_RCC_OscConfig+0x478>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fd8a 	bl	8000f90 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fd86 	bl	8000f90 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e087      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	3b01      	subs	r3, #1
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	491b      	ldr	r1, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x478>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fd5f 	bl	8000f90 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fd5b 	bl	8000f90 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e05c      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x416>
 80024f4:	e054      	b.n	80025a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_OscConfig+0x478>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fd48 	bl	8000f90 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fd44 	bl	8000f90 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e045      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_OscConfig+0x470>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
 8002522:	e03d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e038      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
 8002530:	40023800 	.word	0x40023800
 8002534:	40007000 	.word	0x40007000
 8002538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x4ec>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d028      	beq.n	800259c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d121      	bne.n	800259c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d11a      	bne.n	800259c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002574:	4293      	cmp	r3, r2
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	3b01      	subs	r3, #1
 8002586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0cc      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d90c      	bls.n	80025ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b65      	ldr	r3, [pc, #404]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b8      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800260e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	494d      	ldr	r1, [pc, #308]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d044      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d119      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d003      	beq.n	800266e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	2b03      	cmp	r3, #3
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e067      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b37      	ldr	r3, [pc, #220]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4934      	ldr	r1, [pc, #208]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fc76 	bl	8000f90 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fc72 	bl	8000f90 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04f      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d20c      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e032      	b.n	800275e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002736:	f000 f821 	bl	800277c <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fbd6 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00
 800276c:	40023800 	.word	0x40023800
 8002770:	08004814 	.word	0x08004814
 8002774:	20000000 	.word	0x20000000
 8002778:	20000004 	.word	0x20000004

0800277c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002780:	b094      	sub	sp, #80	; 0x50
 8002782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002794:	4b79      	ldr	r3, [pc, #484]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d00d      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x40>
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	f200 80e1 	bhi.w	8002968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x34>
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ae:	e0db      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b4:	e0db      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_GetSysClockFreq+0x208>)
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ba:	e0d8      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d063      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d2:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	2200      	movs	r2, #0
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
 80027dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
 80027e6:	2300      	movs	r3, #0
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ee:	4622      	mov	r2, r4
 80027f0:	462b      	mov	r3, r5
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	0159      	lsls	r1, r3, #5
 80027fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002800:	0150      	lsls	r0, r2, #5
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4621      	mov	r1, r4
 8002808:	1a51      	subs	r1, r2, r1
 800280a:	6139      	str	r1, [r7, #16]
 800280c:	4629      	mov	r1, r5
 800280e:	eb63 0301 	sbc.w	r3, r3, r1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002820:	4659      	mov	r1, fp
 8002822:	018b      	lsls	r3, r1, #6
 8002824:	4651      	mov	r1, sl
 8002826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282a:	4651      	mov	r1, sl
 800282c:	018a      	lsls	r2, r1, #6
 800282e:	4651      	mov	r1, sl
 8002830:	ebb2 0801 	subs.w	r8, r2, r1
 8002834:	4659      	mov	r1, fp
 8002836:	eb63 0901 	sbc.w	r9, r3, r1
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800284e:	4690      	mov	r8, r2
 8002850:	4699      	mov	r9, r3
 8002852:	4623      	mov	r3, r4
 8002854:	eb18 0303 	adds.w	r3, r8, r3
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	462b      	mov	r3, r5
 800285c:	eb49 0303 	adc.w	r3, r9, r3
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800286e:	4629      	mov	r1, r5
 8002870:	024b      	lsls	r3, r1, #9
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002878:	4621      	mov	r1, r4
 800287a:	024a      	lsls	r2, r1, #9
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
 8002886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800288c:	f7fd fcf8 	bl	8000280 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4613      	mov	r3, r2
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	e058      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	2200      	movs	r2, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	4611      	mov	r1, r2
 80028a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	f04f 0000 	mov.w	r0, #0
 80028bc:	f04f 0100 	mov.w	r1, #0
 80028c0:	0159      	lsls	r1, r3, #5
 80028c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c6:	0150      	lsls	r0, r2, #5
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4641      	mov	r1, r8
 80028ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80028d2:	4649      	mov	r1, r9
 80028d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028ec:	ebb2 040a 	subs.w	r4, r2, sl
 80028f0:	eb63 050b 	sbc.w	r5, r3, fp
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	00eb      	lsls	r3, r5, #3
 80028fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002902:	00e2      	lsls	r2, r4, #3
 8002904:	4614      	mov	r4, r2
 8002906:	461d      	mov	r5, r3
 8002908:	4643      	mov	r3, r8
 800290a:	18e3      	adds	r3, r4, r3
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	464b      	mov	r3, r9
 8002910:	eb45 0303 	adc.w	r3, r5, r3
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002922:	4629      	mov	r1, r5
 8002924:	028b      	lsls	r3, r1, #10
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800292c:	4621      	mov	r1, r4
 800292e:	028a      	lsls	r2, r1, #10
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002936:	2200      	movs	r2, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	61fa      	str	r2, [r7, #28]
 800293c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002940:	f7fd fc9e 	bl	8000280 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_GetSysClockFreq+0x200>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800295c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800295e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetSysClockFreq+0x204>)
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002970:	4618      	mov	r0, r3
 8002972:	3750      	adds	r7, #80	; 0x50
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400
 8002984:	007a1200 	.word	0x007a1200

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08004824 	.word	0x08004824

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffdc 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0b5b      	lsrs	r3, r3, #13
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08004824 	.word	0x08004824

080029f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e042      	b.n	8002a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe f902 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2224      	movs	r2, #36	; 0x24
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa09 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d175      	bne.n	8002b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Transmit+0x2c>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e06e      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fa5f 	bl	8000f90 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b04:	e02e      	b.n	8002b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f8df 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03a      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cb      	bne.n	8002b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f8ab 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e006      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b08a      	sub	sp, #40	; 0x28
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 8081 	bne.w	8002cca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Receive+0x2e>
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e079      	b.n	8002ccc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2222      	movs	r2, #34	; 0x22
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f9d0 	bl	8000f90 <HAL_GetTick>
 8002bf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d108      	bne.n	8002c1a <HAL_UART_Receive+0x74>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e003      	b.n	8002c22 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c22:	e047      	b.n	8002cb4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f850 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e042      	b.n	8002ccc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3302      	adds	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e01f      	b.n	8002ca6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d007      	beq.n	8002c80 <HAL_UART_Receive+0xda>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_UART_Receive+0xe8>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e008      	b.n	8002ca0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1b2      	bne.n	8002c24 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce4:	e03b      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d037      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe f94f 	bl	8000f90 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e03a      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d020      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d01d      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d116      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f81d 	bl	8002d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2208      	movs	r2, #8
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d0b4      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b095      	sub	sp, #84	; 0x54
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	330c      	adds	r3, #12
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dae:	643a      	str	r2, [r7, #64]	; 0x40
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e5      	bne.n	8002dc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d119      	bne.n	8002e32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f023 0310 	bic.w	r3, r3, #16
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e1e:	61ba      	str	r2, [r7, #24]
 8002e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e5      	bne.n	8002dfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e40:	bf00      	nop
 8002e42:	3754      	adds	r7, #84	; 0x54
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e50:	b0c0      	sub	sp, #256	; 0x100
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	ea40 0301 	orr.w	r3, r0, r1
 8002e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ea4:	f021 010c 	bic.w	r1, r1, #12
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	6999      	ldr	r1, [r3, #24]
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	ea40 0301 	orr.w	r3, r0, r1
 8002ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <UART_SetConfig+0x2cc>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d005      	beq.n	8002eec <UART_SetConfig+0xa0>
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b8d      	ldr	r3, [pc, #564]	; (800311c <UART_SetConfig+0x2d0>)
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d104      	bne.n	8002ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7ff fd6c 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ef4:	e003      	b.n	8002efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef6:	f7ff fd53 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8002efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	f040 810c 	bne.w	8003124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f26:	415b      	adcs	r3, r3
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f2e:	4621      	mov	r1, r4
 8002f30:	eb12 0801 	adds.w	r8, r2, r1
 8002f34:	4629      	mov	r1, r5
 8002f36:	eb43 0901 	adc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	eb49 0303 	adc.w	r3, r9, r3
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	18db      	adds	r3, r3, r3
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f80:	4613      	mov	r3, r2
 8002f82:	eb42 0303 	adc.w	r3, r2, r3
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
 8002f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f90:	f7fd f976 	bl	8000280 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <UART_SetConfig+0x2d4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe4:	4692      	mov	sl, r2
 8002fe6:	469b      	mov	fp, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	eb1a 0303 	adds.w	r3, sl, r3
 8002fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800300c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003010:	460b      	mov	r3, r1
 8003012:	18db      	adds	r3, r3, r3
 8003014:	643b      	str	r3, [r7, #64]	; 0x40
 8003016:	4613      	mov	r3, r2
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
 800301e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003026:	f7fd f92b 	bl	8000280 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4611      	mov	r1, r2
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2301 	umull	r2, r3, r3, r1
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	1acb      	subs	r3, r1, r3
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <UART_SetConfig+0x2d4>)
 8003048:	fba3 2302 	umull	r2, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003054:	441c      	add	r4, r3
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003070:	415b      	adcs	r3, r3
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003078:	4641      	mov	r1, r8
 800307a:	1851      	adds	r1, r2, r1
 800307c:	6339      	str	r1, [r7, #48]	; 0x30
 800307e:	4649      	mov	r1, r9
 8003080:	414b      	adcs	r3, r1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003090:	4659      	mov	r1, fp
 8003092:	00cb      	lsls	r3, r1, #3
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309a:	4651      	mov	r1, sl
 800309c:	00ca      	lsls	r2, r1, #3
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	4642      	mov	r2, r8
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030e2:	f7fd f8cd 	bl	8000280 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <UART_SetConfig+0x2d4>)
 80030ec:	fba3 1302 	umull	r1, r3, r3, r2
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	2164      	movs	r1, #100	; 0x64
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	3332      	adds	r3, #50	; 0x32
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <UART_SetConfig+0x2d4>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	f003 0207 	and.w	r2, r3, #7
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4422      	add	r2, r4
 8003112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003114:	e106      	b.n	8003324 <UART_SetConfig+0x4d8>
 8003116:	bf00      	nop
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800312e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	1891      	adds	r1, r2, r2
 800313c:	6239      	str	r1, [r7, #32]
 800313e:	415b      	adcs	r3, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003146:	4641      	mov	r1, r8
 8003148:	1854      	adds	r4, r2, r1
 800314a:	4649      	mov	r1, r9
 800314c:	eb43 0501 	adc.w	r5, r3, r1
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800316c:	464b      	mov	r3, r9
 800316e:	eb45 0303 	adc.w	r3, r5, r3
 8003172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003192:	4629      	mov	r1, r5
 8003194:	008b      	lsls	r3, r1, #2
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319c:	4621      	mov	r1, r4
 800319e:	008a      	lsls	r2, r1, #2
 80031a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031a4:	f7fd f86c 	bl	8000280 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4b60      	ldr	r3, [pc, #384]	; (8003330 <UART_SetConfig+0x4e4>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	011c      	lsls	r4, r3, #4
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	61b9      	str	r1, [r7, #24]
 80031d0:	415b      	adcs	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6139      	str	r1, [r7, #16]
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800320c:	464b      	mov	r3, r9
 800320e:	460a      	mov	r2, r1
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	67bb      	str	r3, [r7, #120]	; 0x78
 8003222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003230:	4649      	mov	r1, r9
 8003232:	008b      	lsls	r3, r1, #2
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323a:	4641      	mov	r1, r8
 800323c:	008a      	lsls	r2, r1, #2
 800323e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003242:	f7fd f81d 	bl	8000280 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4611      	mov	r1, r2
 800324c:	4b38      	ldr	r3, [pc, #224]	; (8003330 <UART_SetConfig+0x4e4>)
 800324e:	fba3 2301 	umull	r2, r3, r3, r1
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2264      	movs	r2, #100	; 0x64
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	1acb      	subs	r3, r1, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a33      	ldr	r2, [pc, #204]	; (8003330 <UART_SetConfig+0x4e4>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	441c      	add	r4, r3
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	673b      	str	r3, [r7, #112]	; 0x70
 8003276:	677a      	str	r2, [r7, #116]	; 0x74
 8003278:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	1891      	adds	r1, r2, r2
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	415b      	adcs	r3, r3
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800328c:	4641      	mov	r1, r8
 800328e:	1851      	adds	r1, r2, r1
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	4649      	mov	r1, r9
 8003294:	414b      	adcs	r3, r1
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a4:	4659      	mov	r1, fp
 80032a6:	00cb      	lsls	r3, r1, #3
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ae:	4651      	mov	r1, sl
 80032b0:	00ca      	lsls	r2, r1, #3
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	4642      	mov	r2, r8
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80032be:	464b      	mov	r3, r9
 80032c0:	460a      	mov	r2, r1
 80032c2:	eb42 0303 	adc.w	r3, r2, r3
 80032c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
 80032d2:	667a      	str	r2, [r7, #100]	; 0x64
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032e0:	4649      	mov	r1, r9
 80032e2:	008b      	lsls	r3, r1, #2
 80032e4:	4641      	mov	r1, r8
 80032e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ea:	4641      	mov	r1, r8
 80032ec:	008a      	lsls	r2, r1, #2
 80032ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032f2:	f7fc ffc5 	bl	8000280 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <UART_SetConfig+0x4e4>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <UART_SetConfig+0x4e4>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4422      	add	r2, r4
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800332a:	46bd      	mov	sp, r7
 800332c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003330:	51eb851f 	.word	0x51eb851f

08003334 <std>:
 8003334:	2300      	movs	r3, #0
 8003336:	b510      	push	{r4, lr}
 8003338:	4604      	mov	r4, r0
 800333a:	e9c0 3300 	strd	r3, r3, [r0]
 800333e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003342:	6083      	str	r3, [r0, #8]
 8003344:	8181      	strh	r1, [r0, #12]
 8003346:	6643      	str	r3, [r0, #100]	; 0x64
 8003348:	81c2      	strh	r2, [r0, #14]
 800334a:	6183      	str	r3, [r0, #24]
 800334c:	4619      	mov	r1, r3
 800334e:	2208      	movs	r2, #8
 8003350:	305c      	adds	r0, #92	; 0x5c
 8003352:	f000 fac5 	bl	80038e0 <memset>
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <std+0x58>)
 8003358:	6263      	str	r3, [r4, #36]	; 0x24
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <std+0x5c>)
 800335c:	62a3      	str	r3, [r4, #40]	; 0x28
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <std+0x60>)
 8003360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <std+0x64>)
 8003364:	6323      	str	r3, [r4, #48]	; 0x30
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <std+0x68>)
 8003368:	6224      	str	r4, [r4, #32]
 800336a:	429c      	cmp	r4, r3
 800336c:	d006      	beq.n	800337c <std+0x48>
 800336e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003372:	4294      	cmp	r4, r2
 8003374:	d002      	beq.n	800337c <std+0x48>
 8003376:	33d0      	adds	r3, #208	; 0xd0
 8003378:	429c      	cmp	r4, r3
 800337a:	d105      	bne.n	8003388 <std+0x54>
 800337c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003384:	f000 bb24 	b.w	80039d0 <__retarget_lock_init_recursive>
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	08003731 	.word	0x08003731
 8003390:	08003753 	.word	0x08003753
 8003394:	0800378b 	.word	0x0800378b
 8003398:	080037af 	.word	0x080037af
 800339c:	2000008c 	.word	0x2000008c

080033a0 <stdio_exit_handler>:
 80033a0:	4a02      	ldr	r2, [pc, #8]	; (80033ac <stdio_exit_handler+0xc>)
 80033a2:	4903      	ldr	r1, [pc, #12]	; (80033b0 <stdio_exit_handler+0x10>)
 80033a4:	4803      	ldr	r0, [pc, #12]	; (80033b4 <stdio_exit_handler+0x14>)
 80033a6:	f000 b869 	b.w	800347c <_fwalk_sglue>
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	0800453d 	.word	0x0800453d
 80033b4:	20000018 	.word	0x20000018

080033b8 <cleanup_stdio>:
 80033b8:	6841      	ldr	r1, [r0, #4]
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <cleanup_stdio+0x34>)
 80033bc:	4299      	cmp	r1, r3
 80033be:	b510      	push	{r4, lr}
 80033c0:	4604      	mov	r4, r0
 80033c2:	d001      	beq.n	80033c8 <cleanup_stdio+0x10>
 80033c4:	f001 f8ba 	bl	800453c <_fflush_r>
 80033c8:	68a1      	ldr	r1, [r4, #8]
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <cleanup_stdio+0x38>)
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d002      	beq.n	80033d6 <cleanup_stdio+0x1e>
 80033d0:	4620      	mov	r0, r4
 80033d2:	f001 f8b3 	bl	800453c <_fflush_r>
 80033d6:	68e1      	ldr	r1, [r4, #12]
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <cleanup_stdio+0x3c>)
 80033da:	4299      	cmp	r1, r3
 80033dc:	d004      	beq.n	80033e8 <cleanup_stdio+0x30>
 80033de:	4620      	mov	r0, r4
 80033e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e4:	f001 b8aa 	b.w	800453c <_fflush_r>
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	bf00      	nop
 80033ec:	2000008c 	.word	0x2000008c
 80033f0:	200000f4 	.word	0x200000f4
 80033f4:	2000015c 	.word	0x2000015c

080033f8 <global_stdio_init.part.0>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <global_stdio_init.part.0+0x30>)
 80033fc:	4c0b      	ldr	r4, [pc, #44]	; (800342c <global_stdio_init.part.0+0x34>)
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <global_stdio_init.part.0+0x38>)
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4620      	mov	r0, r4
 8003404:	2200      	movs	r2, #0
 8003406:	2104      	movs	r1, #4
 8003408:	f7ff ff94 	bl	8003334 <std>
 800340c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003410:	2201      	movs	r2, #1
 8003412:	2109      	movs	r1, #9
 8003414:	f7ff ff8e 	bl	8003334 <std>
 8003418:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800341c:	2202      	movs	r2, #2
 800341e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003422:	2112      	movs	r1, #18
 8003424:	f7ff bf86 	b.w	8003334 <std>
 8003428:	200001c4 	.word	0x200001c4
 800342c:	2000008c 	.word	0x2000008c
 8003430:	080033a1 	.word	0x080033a1

08003434 <__sfp_lock_acquire>:
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <__sfp_lock_acquire+0x8>)
 8003436:	f000 bacc 	b.w	80039d2 <__retarget_lock_acquire_recursive>
 800343a:	bf00      	nop
 800343c:	200001cd 	.word	0x200001cd

08003440 <__sfp_lock_release>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__sfp_lock_release+0x8>)
 8003442:	f000 bac7 	b.w	80039d4 <__retarget_lock_release_recursive>
 8003446:	bf00      	nop
 8003448:	200001cd 	.word	0x200001cd

0800344c <__sinit>:
 800344c:	b510      	push	{r4, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	f7ff fff0 	bl	8003434 <__sfp_lock_acquire>
 8003454:	6a23      	ldr	r3, [r4, #32]
 8003456:	b11b      	cbz	r3, 8003460 <__sinit+0x14>
 8003458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345c:	f7ff bff0 	b.w	8003440 <__sfp_lock_release>
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <__sinit+0x28>)
 8003462:	6223      	str	r3, [r4, #32]
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__sinit+0x2c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f5      	bne.n	8003458 <__sinit+0xc>
 800346c:	f7ff ffc4 	bl	80033f8 <global_stdio_init.part.0>
 8003470:	e7f2      	b.n	8003458 <__sinit+0xc>
 8003472:	bf00      	nop
 8003474:	080033b9 	.word	0x080033b9
 8003478:	200001c4 	.word	0x200001c4

0800347c <_fwalk_sglue>:
 800347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003480:	4607      	mov	r7, r0
 8003482:	4688      	mov	r8, r1
 8003484:	4614      	mov	r4, r2
 8003486:	2600      	movs	r6, #0
 8003488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800348c:	f1b9 0901 	subs.w	r9, r9, #1
 8003490:	d505      	bpl.n	800349e <_fwalk_sglue+0x22>
 8003492:	6824      	ldr	r4, [r4, #0]
 8003494:	2c00      	cmp	r4, #0
 8003496:	d1f7      	bne.n	8003488 <_fwalk_sglue+0xc>
 8003498:	4630      	mov	r0, r6
 800349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d907      	bls.n	80034b4 <_fwalk_sglue+0x38>
 80034a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d003      	beq.n	80034b4 <_fwalk_sglue+0x38>
 80034ac:	4629      	mov	r1, r5
 80034ae:	4638      	mov	r0, r7
 80034b0:	47c0      	blx	r8
 80034b2:	4306      	orrs	r6, r0
 80034b4:	3568      	adds	r5, #104	; 0x68
 80034b6:	e7e9      	b.n	800348c <_fwalk_sglue+0x10>

080034b8 <iprintf>:
 80034b8:	b40f      	push	{r0, r1, r2, r3}
 80034ba:	b507      	push	{r0, r1, r2, lr}
 80034bc:	4906      	ldr	r1, [pc, #24]	; (80034d8 <iprintf+0x20>)
 80034be:	ab04      	add	r3, sp, #16
 80034c0:	6808      	ldr	r0, [r1, #0]
 80034c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c6:	6881      	ldr	r1, [r0, #8]
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	f000 fd07 	bl	8003edc <_vfiprintf_r>
 80034ce:	b003      	add	sp, #12
 80034d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d4:	b004      	add	sp, #16
 80034d6:	4770      	bx	lr
 80034d8:	20000064 	.word	0x20000064

080034dc <_puts_r>:
 80034dc:	6a03      	ldr	r3, [r0, #32]
 80034de:	b570      	push	{r4, r5, r6, lr}
 80034e0:	6884      	ldr	r4, [r0, #8]
 80034e2:	4605      	mov	r5, r0
 80034e4:	460e      	mov	r6, r1
 80034e6:	b90b      	cbnz	r3, 80034ec <_puts_r+0x10>
 80034e8:	f7ff ffb0 	bl	800344c <__sinit>
 80034ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ee:	07db      	lsls	r3, r3, #31
 80034f0:	d405      	bmi.n	80034fe <_puts_r+0x22>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	0598      	lsls	r0, r3, #22
 80034f6:	d402      	bmi.n	80034fe <_puts_r+0x22>
 80034f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034fa:	f000 fa6a 	bl	80039d2 <__retarget_lock_acquire_recursive>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	0719      	lsls	r1, r3, #28
 8003502:	d513      	bpl.n	800352c <_puts_r+0x50>
 8003504:	6923      	ldr	r3, [r4, #16]
 8003506:	b18b      	cbz	r3, 800352c <_puts_r+0x50>
 8003508:	3e01      	subs	r6, #1
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003510:	3b01      	subs	r3, #1
 8003512:	60a3      	str	r3, [r4, #8]
 8003514:	b9e9      	cbnz	r1, 8003552 <_puts_r+0x76>
 8003516:	2b00      	cmp	r3, #0
 8003518:	da2e      	bge.n	8003578 <_puts_r+0x9c>
 800351a:	4622      	mov	r2, r4
 800351c:	210a      	movs	r1, #10
 800351e:	4628      	mov	r0, r5
 8003520:	f000 f949 	bl	80037b6 <__swbuf_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d007      	beq.n	8003538 <_puts_r+0x5c>
 8003528:	250a      	movs	r5, #10
 800352a:	e007      	b.n	800353c <_puts_r+0x60>
 800352c:	4621      	mov	r1, r4
 800352e:	4628      	mov	r0, r5
 8003530:	f000 f97e 	bl	8003830 <__swsetup_r>
 8003534:	2800      	cmp	r0, #0
 8003536:	d0e7      	beq.n	8003508 <_puts_r+0x2c>
 8003538:	f04f 35ff 	mov.w	r5, #4294967295
 800353c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800353e:	07da      	lsls	r2, r3, #31
 8003540:	d405      	bmi.n	800354e <_puts_r+0x72>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	059b      	lsls	r3, r3, #22
 8003546:	d402      	bmi.n	800354e <_puts_r+0x72>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f000 fa43 	bl	80039d4 <__retarget_lock_release_recursive>
 800354e:	4628      	mov	r0, r5
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	2b00      	cmp	r3, #0
 8003554:	da04      	bge.n	8003560 <_puts_r+0x84>
 8003556:	69a2      	ldr	r2, [r4, #24]
 8003558:	429a      	cmp	r2, r3
 800355a:	dc06      	bgt.n	800356a <_puts_r+0x8e>
 800355c:	290a      	cmp	r1, #10
 800355e:	d004      	beq.n	800356a <_puts_r+0x8e>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	6022      	str	r2, [r4, #0]
 8003566:	7019      	strb	r1, [r3, #0]
 8003568:	e7cf      	b.n	800350a <_puts_r+0x2e>
 800356a:	4622      	mov	r2, r4
 800356c:	4628      	mov	r0, r5
 800356e:	f000 f922 	bl	80037b6 <__swbuf_r>
 8003572:	3001      	adds	r0, #1
 8003574:	d1c9      	bne.n	800350a <_puts_r+0x2e>
 8003576:	e7df      	b.n	8003538 <_puts_r+0x5c>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	250a      	movs	r5, #10
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	701d      	strb	r5, [r3, #0]
 8003582:	e7db      	b.n	800353c <_puts_r+0x60>

08003584 <puts>:
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <puts+0xc>)
 8003586:	4601      	mov	r1, r0
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f7ff bfa7 	b.w	80034dc <_puts_r>
 800358e:	bf00      	nop
 8003590:	20000064 	.word	0x20000064

08003594 <setvbuf>:
 8003594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003598:	461d      	mov	r5, r3
 800359a:	4b54      	ldr	r3, [pc, #336]	; (80036ec <setvbuf+0x158>)
 800359c:	681f      	ldr	r7, [r3, #0]
 800359e:	4604      	mov	r4, r0
 80035a0:	460e      	mov	r6, r1
 80035a2:	4690      	mov	r8, r2
 80035a4:	b127      	cbz	r7, 80035b0 <setvbuf+0x1c>
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	b913      	cbnz	r3, 80035b0 <setvbuf+0x1c>
 80035aa:	4638      	mov	r0, r7
 80035ac:	f7ff ff4e 	bl	800344c <__sinit>
 80035b0:	f1b8 0f02 	cmp.w	r8, #2
 80035b4:	d006      	beq.n	80035c4 <setvbuf+0x30>
 80035b6:	f1b8 0f01 	cmp.w	r8, #1
 80035ba:	f200 8094 	bhi.w	80036e6 <setvbuf+0x152>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	f2c0 8091 	blt.w	80036e6 <setvbuf+0x152>
 80035c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035c6:	07da      	lsls	r2, r3, #31
 80035c8:	d405      	bmi.n	80035d6 <setvbuf+0x42>
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	059b      	lsls	r3, r3, #22
 80035ce:	d402      	bmi.n	80035d6 <setvbuf+0x42>
 80035d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d2:	f000 f9fe 	bl	80039d2 <__retarget_lock_acquire_recursive>
 80035d6:	4621      	mov	r1, r4
 80035d8:	4638      	mov	r0, r7
 80035da:	f000 ffaf 	bl	800453c <_fflush_r>
 80035de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e0:	b141      	cbz	r1, 80035f4 <setvbuf+0x60>
 80035e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e6:	4299      	cmp	r1, r3
 80035e8:	d002      	beq.n	80035f0 <setvbuf+0x5c>
 80035ea:	4638      	mov	r0, r7
 80035ec:	f000 f9f4 	bl	80039d8 <_free_r>
 80035f0:	2300      	movs	r3, #0
 80035f2:	6363      	str	r3, [r4, #52]	; 0x34
 80035f4:	2300      	movs	r3, #0
 80035f6:	61a3      	str	r3, [r4, #24]
 80035f8:	6063      	str	r3, [r4, #4]
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	0618      	lsls	r0, r3, #24
 80035fe:	d503      	bpl.n	8003608 <setvbuf+0x74>
 8003600:	6921      	ldr	r1, [r4, #16]
 8003602:	4638      	mov	r0, r7
 8003604:	f000 f9e8 	bl	80039d8 <_free_r>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	f1b8 0f02 	cmp.w	r8, #2
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	d05f      	beq.n	80036da <setvbuf+0x146>
 800361a:	ab01      	add	r3, sp, #4
 800361c:	466a      	mov	r2, sp
 800361e:	4621      	mov	r1, r4
 8003620:	4638      	mov	r0, r7
 8003622:	f000 ffb3 	bl	800458c <__swhatbuf_r>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	4318      	orrs	r0, r3
 800362a:	81a0      	strh	r0, [r4, #12]
 800362c:	bb2d      	cbnz	r5, 800367a <setvbuf+0xe6>
 800362e:	9d00      	ldr	r5, [sp, #0]
 8003630:	4628      	mov	r0, r5
 8003632:	f000 fa1d 	bl	8003a70 <malloc>
 8003636:	4606      	mov	r6, r0
 8003638:	2800      	cmp	r0, #0
 800363a:	d150      	bne.n	80036de <setvbuf+0x14a>
 800363c:	f8dd 9000 	ldr.w	r9, [sp]
 8003640:	45a9      	cmp	r9, r5
 8003642:	d13e      	bne.n	80036c2 <setvbuf+0x12e>
 8003644:	f04f 35ff 	mov.w	r5, #4294967295
 8003648:	2200      	movs	r2, #0
 800364a:	60a2      	str	r2, [r4, #8]
 800364c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003650:	6022      	str	r2, [r4, #0]
 8003652:	6122      	str	r2, [r4, #16]
 8003654:	2201      	movs	r2, #1
 8003656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365a:	6162      	str	r2, [r4, #20]
 800365c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	07d1      	lsls	r1, r2, #31
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	d404      	bmi.n	8003672 <setvbuf+0xde>
 8003668:	059b      	lsls	r3, r3, #22
 800366a:	d402      	bmi.n	8003672 <setvbuf+0xde>
 800366c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366e:	f000 f9b1 	bl	80039d4 <__retarget_lock_release_recursive>
 8003672:	4628      	mov	r0, r5
 8003674:	b003      	add	sp, #12
 8003676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800367a:	2e00      	cmp	r6, #0
 800367c:	d0d8      	beq.n	8003630 <setvbuf+0x9c>
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	b913      	cbnz	r3, 8003688 <setvbuf+0xf4>
 8003682:	4638      	mov	r0, r7
 8003684:	f7ff fee2 	bl	800344c <__sinit>
 8003688:	f1b8 0f01 	cmp.w	r8, #1
 800368c:	bf08      	it	eq
 800368e:	89a3      	ldrheq	r3, [r4, #12]
 8003690:	6026      	str	r6, [r4, #0]
 8003692:	bf04      	itt	eq
 8003694:	f043 0301 	orreq.w	r3, r3, #1
 8003698:	81a3      	strheq	r3, [r4, #12]
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f013 0208 	ands.w	r2, r3, #8
 80036a0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80036a4:	d01d      	beq.n	80036e2 <setvbuf+0x14e>
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	bf41      	itttt	mi
 80036aa:	2200      	movmi	r2, #0
 80036ac:	426d      	negmi	r5, r5
 80036ae:	60a2      	strmi	r2, [r4, #8]
 80036b0:	61a5      	strmi	r5, [r4, #24]
 80036b2:	bf58      	it	pl
 80036b4:	60a5      	strpl	r5, [r4, #8]
 80036b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036b8:	f015 0501 	ands.w	r5, r5, #1
 80036bc:	d0d4      	beq.n	8003668 <setvbuf+0xd4>
 80036be:	2500      	movs	r5, #0
 80036c0:	e7d7      	b.n	8003672 <setvbuf+0xde>
 80036c2:	4648      	mov	r0, r9
 80036c4:	f000 f9d4 	bl	8003a70 <malloc>
 80036c8:	4606      	mov	r6, r0
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d0ba      	beq.n	8003644 <setvbuf+0xb0>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d4:	81a3      	strh	r3, [r4, #12]
 80036d6:	464d      	mov	r5, r9
 80036d8:	e7d1      	b.n	800367e <setvbuf+0xea>
 80036da:	2500      	movs	r5, #0
 80036dc:	e7b4      	b.n	8003648 <setvbuf+0xb4>
 80036de:	46a9      	mov	r9, r5
 80036e0:	e7f5      	b.n	80036ce <setvbuf+0x13a>
 80036e2:	60a2      	str	r2, [r4, #8]
 80036e4:	e7e7      	b.n	80036b6 <setvbuf+0x122>
 80036e6:	f04f 35ff 	mov.w	r5, #4294967295
 80036ea:	e7c2      	b.n	8003672 <setvbuf+0xde>
 80036ec:	20000064 	.word	0x20000064

080036f0 <siprintf>:
 80036f0:	b40e      	push	{r1, r2, r3}
 80036f2:	b500      	push	{lr}
 80036f4:	b09c      	sub	sp, #112	; 0x70
 80036f6:	ab1d      	add	r3, sp, #116	; 0x74
 80036f8:	9002      	str	r0, [sp, #8]
 80036fa:	9006      	str	r0, [sp, #24]
 80036fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003700:	4809      	ldr	r0, [pc, #36]	; (8003728 <siprintf+0x38>)
 8003702:	9107      	str	r1, [sp, #28]
 8003704:	9104      	str	r1, [sp, #16]
 8003706:	4909      	ldr	r1, [pc, #36]	; (800372c <siprintf+0x3c>)
 8003708:	f853 2b04 	ldr.w	r2, [r3], #4
 800370c:	9105      	str	r1, [sp, #20]
 800370e:	6800      	ldr	r0, [r0, #0]
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	a902      	add	r1, sp, #8
 8003714:	f000 faba 	bl	8003c8c <_svfiprintf_r>
 8003718:	9b02      	ldr	r3, [sp, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	b01c      	add	sp, #112	; 0x70
 8003720:	f85d eb04 	ldr.w	lr, [sp], #4
 8003724:	b003      	add	sp, #12
 8003726:	4770      	bx	lr
 8003728:	20000064 	.word	0x20000064
 800372c:	ffff0208 	.word	0xffff0208

08003730 <__sread>:
 8003730:	b510      	push	{r4, lr}
 8003732:	460c      	mov	r4, r1
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	f000 f8fc 	bl	8003934 <_read_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	bfab      	itete	ge
 8003740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003742:	89a3      	ldrhlt	r3, [r4, #12]
 8003744:	181b      	addge	r3, r3, r0
 8003746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800374a:	bfac      	ite	ge
 800374c:	6563      	strge	r3, [r4, #84]	; 0x54
 800374e:	81a3      	strhlt	r3, [r4, #12]
 8003750:	bd10      	pop	{r4, pc}

08003752 <__swrite>:
 8003752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	461f      	mov	r7, r3
 8003758:	898b      	ldrh	r3, [r1, #12]
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	4605      	mov	r5, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4616      	mov	r6, r2
 8003762:	d505      	bpl.n	8003770 <__swrite+0x1e>
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	2302      	movs	r3, #2
 800376a:	2200      	movs	r2, #0
 800376c:	f000 f8d0 	bl	8003910 <_lseek_r>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	4632      	mov	r2, r6
 800377e:	463b      	mov	r3, r7
 8003780:	4628      	mov	r0, r5
 8003782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003786:	f000 b8e7 	b.w	8003958 <_write_r>

0800378a <__sseek>:
 800378a:	b510      	push	{r4, lr}
 800378c:	460c      	mov	r4, r1
 800378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003792:	f000 f8bd 	bl	8003910 <_lseek_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	bf15      	itete	ne
 800379c:	6560      	strne	r0, [r4, #84]	; 0x54
 800379e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037a6:	81a3      	strheq	r3, [r4, #12]
 80037a8:	bf18      	it	ne
 80037aa:	81a3      	strhne	r3, [r4, #12]
 80037ac:	bd10      	pop	{r4, pc}

080037ae <__sclose>:
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 b89d 	b.w	80038f0 <_close_r>

080037b6 <__swbuf_r>:
 80037b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b8:	460e      	mov	r6, r1
 80037ba:	4614      	mov	r4, r2
 80037bc:	4605      	mov	r5, r0
 80037be:	b118      	cbz	r0, 80037c8 <__swbuf_r+0x12>
 80037c0:	6a03      	ldr	r3, [r0, #32]
 80037c2:	b90b      	cbnz	r3, 80037c8 <__swbuf_r+0x12>
 80037c4:	f7ff fe42 	bl	800344c <__sinit>
 80037c8:	69a3      	ldr	r3, [r4, #24]
 80037ca:	60a3      	str	r3, [r4, #8]
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	071a      	lsls	r2, r3, #28
 80037d0:	d525      	bpl.n	800381e <__swbuf_r+0x68>
 80037d2:	6923      	ldr	r3, [r4, #16]
 80037d4:	b31b      	cbz	r3, 800381e <__swbuf_r+0x68>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	1a98      	subs	r0, r3, r2
 80037dc:	6963      	ldr	r3, [r4, #20]
 80037de:	b2f6      	uxtb	r6, r6
 80037e0:	4283      	cmp	r3, r0
 80037e2:	4637      	mov	r7, r6
 80037e4:	dc04      	bgt.n	80037f0 <__swbuf_r+0x3a>
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fea7 	bl	800453c <_fflush_r>
 80037ee:	b9e0      	cbnz	r0, 800382a <__swbuf_r+0x74>
 80037f0:	68a3      	ldr	r3, [r4, #8]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	6022      	str	r2, [r4, #0]
 80037fc:	701e      	strb	r6, [r3, #0]
 80037fe:	6962      	ldr	r2, [r4, #20]
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	429a      	cmp	r2, r3
 8003804:	d004      	beq.n	8003810 <__swbuf_r+0x5a>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	07db      	lsls	r3, r3, #31
 800380a:	d506      	bpl.n	800381a <__swbuf_r+0x64>
 800380c:	2e0a      	cmp	r6, #10
 800380e:	d104      	bne.n	800381a <__swbuf_r+0x64>
 8003810:	4621      	mov	r1, r4
 8003812:	4628      	mov	r0, r5
 8003814:	f000 fe92 	bl	800453c <_fflush_r>
 8003818:	b938      	cbnz	r0, 800382a <__swbuf_r+0x74>
 800381a:	4638      	mov	r0, r7
 800381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381e:	4621      	mov	r1, r4
 8003820:	4628      	mov	r0, r5
 8003822:	f000 f805 	bl	8003830 <__swsetup_r>
 8003826:	2800      	cmp	r0, #0
 8003828:	d0d5      	beq.n	80037d6 <__swbuf_r+0x20>
 800382a:	f04f 37ff 	mov.w	r7, #4294967295
 800382e:	e7f4      	b.n	800381a <__swbuf_r+0x64>

08003830 <__swsetup_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <__swsetup_r+0xac>)
 8003834:	4605      	mov	r5, r0
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	460c      	mov	r4, r1
 800383a:	b118      	cbz	r0, 8003844 <__swsetup_r+0x14>
 800383c:	6a03      	ldr	r3, [r0, #32]
 800383e:	b90b      	cbnz	r3, 8003844 <__swsetup_r+0x14>
 8003840:	f7ff fe04 	bl	800344c <__sinit>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800384a:	0718      	lsls	r0, r3, #28
 800384c:	d422      	bmi.n	8003894 <__swsetup_r+0x64>
 800384e:	06d9      	lsls	r1, r3, #27
 8003850:	d407      	bmi.n	8003862 <__swsetup_r+0x32>
 8003852:	2309      	movs	r3, #9
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e034      	b.n	80038cc <__swsetup_r+0x9c>
 8003862:	0758      	lsls	r0, r3, #29
 8003864:	d512      	bpl.n	800388c <__swsetup_r+0x5c>
 8003866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003868:	b141      	cbz	r1, 800387c <__swsetup_r+0x4c>
 800386a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800386e:	4299      	cmp	r1, r3
 8003870:	d002      	beq.n	8003878 <__swsetup_r+0x48>
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f8b0 	bl	80039d8 <_free_r>
 8003878:	2300      	movs	r3, #0
 800387a:	6363      	str	r3, [r4, #52]	; 0x34
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003882:	81a3      	strh	r3, [r4, #12]
 8003884:	2300      	movs	r3, #0
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	b94b      	cbnz	r3, 80038ac <__swsetup_r+0x7c>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800389e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a2:	d003      	beq.n	80038ac <__swsetup_r+0x7c>
 80038a4:	4621      	mov	r1, r4
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 fe96 	bl	80045d8 <__smakebuf_r>
 80038ac:	89a0      	ldrh	r0, [r4, #12]
 80038ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b2:	f010 0301 	ands.w	r3, r0, #1
 80038b6:	d00a      	beq.n	80038ce <__swsetup_r+0x9e>
 80038b8:	2300      	movs	r3, #0
 80038ba:	60a3      	str	r3, [r4, #8]
 80038bc:	6963      	ldr	r3, [r4, #20]
 80038be:	425b      	negs	r3, r3
 80038c0:	61a3      	str	r3, [r4, #24]
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	b943      	cbnz	r3, 80038d8 <__swsetup_r+0xa8>
 80038c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038ca:	d1c4      	bne.n	8003856 <__swsetup_r+0x26>
 80038cc:	bd38      	pop	{r3, r4, r5, pc}
 80038ce:	0781      	lsls	r1, r0, #30
 80038d0:	bf58      	it	pl
 80038d2:	6963      	ldrpl	r3, [r4, #20]
 80038d4:	60a3      	str	r3, [r4, #8]
 80038d6:	e7f4      	b.n	80038c2 <__swsetup_r+0x92>
 80038d8:	2000      	movs	r0, #0
 80038da:	e7f7      	b.n	80038cc <__swsetup_r+0x9c>
 80038dc:	20000064 	.word	0x20000064

080038e0 <memset>:
 80038e0:	4402      	add	r2, r0
 80038e2:	4603      	mov	r3, r0
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d100      	bne.n	80038ea <memset+0xa>
 80038e8:	4770      	bx	lr
 80038ea:	f803 1b01 	strb.w	r1, [r3], #1
 80038ee:	e7f9      	b.n	80038e4 <memset+0x4>

080038f0 <_close_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4d06      	ldr	r5, [pc, #24]	; (800390c <_close_r+0x1c>)
 80038f4:	2300      	movs	r3, #0
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	f7fd fa3b 	bl	8000d76 <_close>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_close_r+0x1a>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_close_r+0x1a>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	200001c8 	.word	0x200001c8

08003910 <_lseek_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4d07      	ldr	r5, [pc, #28]	; (8003930 <_lseek_r+0x20>)
 8003914:	4604      	mov	r4, r0
 8003916:	4608      	mov	r0, r1
 8003918:	4611      	mov	r1, r2
 800391a:	2200      	movs	r2, #0
 800391c:	602a      	str	r2, [r5, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f7fd fa50 	bl	8000dc4 <_lseek>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d102      	bne.n	800392e <_lseek_r+0x1e>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	b103      	cbz	r3, 800392e <_lseek_r+0x1e>
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	200001c8 	.word	0x200001c8

08003934 <_read_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d07      	ldr	r5, [pc, #28]	; (8003954 <_read_r+0x20>)
 8003938:	4604      	mov	r4, r0
 800393a:	4608      	mov	r0, r1
 800393c:	4611      	mov	r1, r2
 800393e:	2200      	movs	r2, #0
 8003940:	602a      	str	r2, [r5, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f7fd f9de 	bl	8000d04 <_read>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_read_r+0x1e>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_read_r+0x1e>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	200001c8 	.word	0x200001c8

08003958 <_write_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d07      	ldr	r5, [pc, #28]	; (8003978 <_write_r+0x20>)
 800395c:	4604      	mov	r4, r0
 800395e:	4608      	mov	r0, r1
 8003960:	4611      	mov	r1, r2
 8003962:	2200      	movs	r2, #0
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f7fd f9e9 	bl	8000d3e <_write>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_write_r+0x1e>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_write_r+0x1e>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	200001c8 	.word	0x200001c8

0800397c <__errno>:
 800397c:	4b01      	ldr	r3, [pc, #4]	; (8003984 <__errno+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000064 	.word	0x20000064

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	; (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	; (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	; (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	; (80039cc <__libc_init_array+0x44>)
 800399c:	f000 feea 	bl	8004774 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	08004868 	.word	0x08004868
 80039c4:	08004868 	.word	0x08004868
 80039c8:	08004868 	.word	0x08004868
 80039cc:	0800486c 	.word	0x0800486c

080039d0 <__retarget_lock_init_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <__retarget_lock_acquire_recursive>:
 80039d2:	4770      	bx	lr

080039d4 <__retarget_lock_release_recursive>:
 80039d4:	4770      	bx	lr
	...

080039d8 <_free_r>:
 80039d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039da:	2900      	cmp	r1, #0
 80039dc:	d044      	beq.n	8003a68 <_free_r+0x90>
 80039de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e2:	9001      	str	r0, [sp, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f1a1 0404 	sub.w	r4, r1, #4
 80039ea:	bfb8      	it	lt
 80039ec:	18e4      	addlt	r4, r4, r3
 80039ee:	f000 f8e7 	bl	8003bc0 <__malloc_lock>
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <_free_r+0x94>)
 80039f4:	9801      	ldr	r0, [sp, #4]
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	b933      	cbnz	r3, 8003a08 <_free_r+0x30>
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6014      	str	r4, [r2, #0]
 80039fe:	b003      	add	sp, #12
 8003a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a04:	f000 b8e2 	b.w	8003bcc <__malloc_unlock>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d908      	bls.n	8003a1e <_free_r+0x46>
 8003a0c:	6825      	ldr	r5, [r4, #0]
 8003a0e:	1961      	adds	r1, r4, r5
 8003a10:	428b      	cmp	r3, r1
 8003a12:	bf01      	itttt	eq
 8003a14:	6819      	ldreq	r1, [r3, #0]
 8003a16:	685b      	ldreq	r3, [r3, #4]
 8003a18:	1949      	addeq	r1, r1, r5
 8003a1a:	6021      	streq	r1, [r4, #0]
 8003a1c:	e7ed      	b.n	80039fa <_free_r+0x22>
 8003a1e:	461a      	mov	r2, r3
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b10b      	cbz	r3, 8003a28 <_free_r+0x50>
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d9fa      	bls.n	8003a1e <_free_r+0x46>
 8003a28:	6811      	ldr	r1, [r2, #0]
 8003a2a:	1855      	adds	r5, r2, r1
 8003a2c:	42a5      	cmp	r5, r4
 8003a2e:	d10b      	bne.n	8003a48 <_free_r+0x70>
 8003a30:	6824      	ldr	r4, [r4, #0]
 8003a32:	4421      	add	r1, r4
 8003a34:	1854      	adds	r4, r2, r1
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	d1e0      	bne.n	80039fe <_free_r+0x26>
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6053      	str	r3, [r2, #4]
 8003a42:	440c      	add	r4, r1
 8003a44:	6014      	str	r4, [r2, #0]
 8003a46:	e7da      	b.n	80039fe <_free_r+0x26>
 8003a48:	d902      	bls.n	8003a50 <_free_r+0x78>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6003      	str	r3, [r0, #0]
 8003a4e:	e7d6      	b.n	80039fe <_free_r+0x26>
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1961      	adds	r1, r4, r5
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf04      	itt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	6063      	str	r3, [r4, #4]
 8003a5e:	bf04      	itt	eq
 8003a60:	1949      	addeq	r1, r1, r5
 8003a62:	6021      	streq	r1, [r4, #0]
 8003a64:	6054      	str	r4, [r2, #4]
 8003a66:	e7ca      	b.n	80039fe <_free_r+0x26>
 8003a68:	b003      	add	sp, #12
 8003a6a:	bd30      	pop	{r4, r5, pc}
 8003a6c:	200001d0 	.word	0x200001d0

08003a70 <malloc>:
 8003a70:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <malloc+0xc>)
 8003a72:	4601      	mov	r1, r0
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	f000 b823 	b.w	8003ac0 <_malloc_r>
 8003a7a:	bf00      	nop
 8003a7c:	20000064 	.word	0x20000064

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0e      	ldr	r6, [pc, #56]	; (8003abc <sbrk_aligned+0x3c>)
 8003a84:	460c      	mov	r4, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	b911      	cbnz	r1, 8003a92 <sbrk_aligned+0x12>
 8003a8c:	f000 fe1c 	bl	80046c8 <_sbrk_r>
 8003a90:	6030      	str	r0, [r6, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fe17 	bl	80046c8 <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <sbrk_aligned+0x34>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d007      	beq.n	8003ab8 <sbrk_aligned+0x38>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fe0c 	bl	80046c8 <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d101      	bne.n	8003ab8 <sbrk_aligned+0x38>
 8003ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	200001d4 	.word	0x200001d4

08003ac0 <_malloc_r>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	1ccd      	adds	r5, r1, #3
 8003ac6:	f025 0503 	bic.w	r5, r5, #3
 8003aca:	3508      	adds	r5, #8
 8003acc:	2d0c      	cmp	r5, #12
 8003ace:	bf38      	it	cc
 8003ad0:	250c      	movcc	r5, #12
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	db01      	blt.n	8003adc <_malloc_r+0x1c>
 8003ad8:	42a9      	cmp	r1, r5
 8003ada:	d905      	bls.n	8003ae8 <_malloc_r+0x28>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bbc <_malloc_r+0xfc>
 8003aec:	f000 f868 	bl	8003bc0 <__malloc_lock>
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	461c      	mov	r4, r3
 8003af6:	bb5c      	cbnz	r4, 8003b50 <_malloc_r+0x90>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ffc0 	bl	8003a80 <sbrk_aligned>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	4604      	mov	r4, r0
 8003b04:	d155      	bne.n	8003bb2 <_malloc_r+0xf2>
 8003b06:	f8d8 4000 	ldr.w	r4, [r8]
 8003b0a:	4626      	mov	r6, r4
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d145      	bne.n	8003b9c <_malloc_r+0xdc>
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d048      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	eb04 0903 	add.w	r9, r4, r3
 8003b1e:	f000 fdd3 	bl	80046c8 <_sbrk_r>
 8003b22:	4581      	cmp	r9, r0
 8003b24:	d13f      	bne.n	8003ba6 <_malloc_r+0xe6>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1a6d      	subs	r5, r5, r1
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ffa7 	bl	8003a80 <sbrk_aligned>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d037      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	442b      	add	r3, r5
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <_malloc_r+0xf6>
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0xe2>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xb0>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d41f      	bmi.n	8003b96 <_malloc_r+0xd6>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xca>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4638      	mov	r0, r7
 8003b72:	f104 060b 	add.w	r6, r4, #11
 8003b76:	f000 f829 	bl	8003bcc <__malloc_unlock>
 8003b7a:	f026 0607 	bic.w	r6, r6, #7
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	1af2      	subs	r2, r6, r3
 8003b82:	d0ae      	beq.n	8003ae2 <_malloc_r+0x22>
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	50a3      	str	r3, [r4, r2]
 8003b88:	e7ab      	b.n	8003ae2 <_malloc_r+0x22>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x8c>
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e7ec      	b.n	8003b70 <_malloc_r+0xb0>
 8003b96:	4623      	mov	r3, r4
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	e7ac      	b.n	8003af6 <_malloc_r+0x36>
 8003b9c:	4634      	mov	r4, r6
 8003b9e:	6876      	ldr	r6, [r6, #4]
 8003ba0:	e7b4      	b.n	8003b0c <_malloc_r+0x4c>
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e7cc      	b.n	8003b40 <_malloc_r+0x80>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4638      	mov	r0, r7
 8003bac:	f000 f80e 	bl	8003bcc <__malloc_unlock>
 8003bb0:	e797      	b.n	8003ae2 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7dc      	b.n	8003b70 <_malloc_r+0xb0>
 8003bb6:	605b      	str	r3, [r3, #4]
 8003bb8:	deff      	udf	#255	; 0xff
 8003bba:	bf00      	nop
 8003bbc:	200001d0 	.word	0x200001d0

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf06 	b.w	80039d2 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	200001cc 	.word	0x200001cc

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf01 	b.w	80039d4 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	200001cc 	.word	0x200001cc

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	688e      	ldr	r6, [r1, #8]
 8003bde:	461f      	mov	r7, r3
 8003be0:	42be      	cmp	r6, r7
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	4682      	mov	sl, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4690      	mov	r8, r2
 8003bea:	d82c      	bhi.n	8003c46 <__ssputs_r+0x6e>
 8003bec:	898a      	ldrh	r2, [r1, #12]
 8003bee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf2:	d026      	beq.n	8003c42 <__ssputs_r+0x6a>
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	6909      	ldr	r1, [r1, #16]
 8003bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bfc:	eba3 0901 	sub.w	r9, r3, r1
 8003c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c04:	1c7b      	adds	r3, r7, #1
 8003c06:	444b      	add	r3, r9
 8003c08:	106d      	asrs	r5, r5, #1
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf38      	it	cc
 8003c0e:	461d      	movcc	r5, r3
 8003c10:	0553      	lsls	r3, r2, #21
 8003c12:	d527      	bpl.n	8003c64 <__ssputs_r+0x8c>
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7ff ff53 	bl	8003ac0 <_malloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	b360      	cbz	r0, 8003c78 <__ssputs_r+0xa0>
 8003c1e:	6921      	ldr	r1, [r4, #16]
 8003c20:	464a      	mov	r2, r9
 8003c22:	f000 fd61 	bl	80046e8 <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	6126      	str	r6, [r4, #16]
 8003c34:	6165      	str	r5, [r4, #20]
 8003c36:	444e      	add	r6, r9
 8003c38:	eba5 0509 	sub.w	r5, r5, r9
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	60a5      	str	r5, [r4, #8]
 8003c40:	463e      	mov	r6, r7
 8003c42:	42be      	cmp	r6, r7
 8003c44:	d900      	bls.n	8003c48 <__ssputs_r+0x70>
 8003c46:	463e      	mov	r6, r7
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	f000 fcff 	bl	8004650 <memmove>
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	4433      	add	r3, r6
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	462a      	mov	r2, r5
 8003c66:	f000 fd4d 	bl	8004704 <_realloc_r>
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x5a>
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7ff feb0 	bl	80039d8 <_free_r>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	f8ca 3000 	str.w	r3, [sl]
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e7e9      	b.n	8003c60 <__ssputs_r+0x88>

08003c8c <_svfiprintf_r>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4698      	mov	r8, r3
 8003c92:	898b      	ldrh	r3, [r1, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4607      	mov	r7, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	d50e      	bpl.n	8003cbe <_svfiprintf_r+0x32>
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	b963      	cbnz	r3, 8003cbe <_svfiprintf_r+0x32>
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	f7ff ff0b 	bl	8003ac0 <_malloc_r>
 8003caa:	6028      	str	r0, [r5, #0]
 8003cac:	6128      	str	r0, [r5, #16]
 8003cae:	b920      	cbnz	r0, 8003cba <_svfiprintf_r+0x2e>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e0d0      	b.n	8003e5c <_svfiprintf_r+0x1d0>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	616b      	str	r3, [r5, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ccc:	2330      	movs	r3, #48	; 0x30
 8003cce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e74 <_svfiprintf_r+0x1e8>
 8003cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd6:	f04f 0901 	mov.w	r9, #1
 8003cda:	4623      	mov	r3, r4
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce2:	b10a      	cbz	r2, 8003ce8 <_svfiprintf_r+0x5c>
 8003ce4:	2a25      	cmp	r2, #37	; 0x25
 8003ce6:	d1f9      	bne.n	8003cdc <_svfiprintf_r+0x50>
 8003ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cec:	d00b      	beq.n	8003d06 <_svfiprintf_r+0x7a>
 8003cee:	465b      	mov	r3, fp
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7ff ff6f 	bl	8003bd8 <__ssputs_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f000 80a9 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d02:	445a      	add	r2, fp
 8003d04:	9209      	str	r2, [sp, #36]	; 0x24
 8003d06:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a1 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f04f 32ff 	mov.w	r2, #4294967295
 8003d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d1a:	f10a 0a01 	add.w	sl, sl, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	9307      	str	r3, [sp, #28]
 8003d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d26:	931a      	str	r3, [sp, #104]	; 0x68
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d30:	4850      	ldr	r0, [pc, #320]	; (8003e74 <_svfiprintf_r+0x1e8>)
 8003d32:	f7fc fa55 	bl	80001e0 <memchr>
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	b9d8      	cbnz	r0, 8003d72 <_svfiprintf_r+0xe6>
 8003d3a:	06d0      	lsls	r0, r2, #27
 8003d3c:	bf44      	itt	mi
 8003d3e:	2320      	movmi	r3, #32
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	0711      	lsls	r1, r2, #28
 8003d46:	bf44      	itt	mi
 8003d48:	232b      	movmi	r3, #43	; 0x2b
 8003d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d015      	beq.n	8003d82 <_svfiprintf_r+0xf6>
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	4654      	mov	r4, sl
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f04f 0c0a 	mov.w	ip, #10
 8003d60:	4621      	mov	r1, r4
 8003d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d66:	3b30      	subs	r3, #48	; 0x30
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d94d      	bls.n	8003e08 <_svfiprintf_r+0x17c>
 8003d6c:	b1b0      	cbz	r0, 8003d9c <_svfiprintf_r+0x110>
 8003d6e:	9207      	str	r2, [sp, #28]
 8003d70:	e014      	b.n	8003d9c <_svfiprintf_r+0x110>
 8003d72:	eba0 0308 	sub.w	r3, r0, r8
 8003d76:	fa09 f303 	lsl.w	r3, r9, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	46a2      	mov	sl, r4
 8003d80:	e7d2      	b.n	8003d28 <_svfiprintf_r+0x9c>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	1d19      	adds	r1, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfbb      	ittet	lt
 8003d8e:	425b      	neglt	r3, r3
 8003d90:	f042 0202 	orrlt.w	r2, r2, #2
 8003d94:	9307      	strge	r3, [sp, #28]
 8003d96:	9307      	strlt	r3, [sp, #28]
 8003d98:	bfb8      	it	lt
 8003d9a:	9204      	strlt	r2, [sp, #16]
 8003d9c:	7823      	ldrb	r3, [r4, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d10c      	bne.n	8003dbc <_svfiprintf_r+0x130>
 8003da2:	7863      	ldrb	r3, [r4, #1]
 8003da4:	2b2a      	cmp	r3, #42	; 0x2a
 8003da6:	d134      	bne.n	8003e12 <_svfiprintf_r+0x186>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9203      	str	r2, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfb8      	it	lt
 8003db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db8:	3402      	adds	r4, #2
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e84 <_svfiprintf_r+0x1f8>
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f7fc fa0b 	bl	80001e0 <memchr>
 8003dca:	b138      	cbz	r0, 8003ddc <_svfiprintf_r+0x150>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	eba0 000a 	sub.w	r0, r0, sl
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	4082      	lsls	r2, r0
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	3401      	adds	r4, #1
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de0:	4825      	ldr	r0, [pc, #148]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de6:	2206      	movs	r2, #6
 8003de8:	f7fc f9fa 	bl	80001e0 <memchr>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d038      	beq.n	8003e62 <_svfiprintf_r+0x1d6>
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <_svfiprintf_r+0x1f0>)
 8003df2:	bb1b      	cbnz	r3, 8003e3c <_svfiprintf_r+0x1b0>
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	3307      	adds	r3, #7
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	4433      	add	r3, r6
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	e768      	b.n	8003cda <_svfiprintf_r+0x4e>
 8003e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7a6      	b.n	8003d60 <_svfiprintf_r+0xd4>
 8003e12:	2300      	movs	r3, #0
 8003e14:	3401      	adds	r4, #1
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0c0a 	mov.w	ip, #10
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e24:	3a30      	subs	r2, #48	; 0x30
 8003e26:	2a09      	cmp	r2, #9
 8003e28:	d903      	bls.n	8003e32 <_svfiprintf_r+0x1a6>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0c6      	beq.n	8003dbc <_svfiprintf_r+0x130>
 8003e2e:	9105      	str	r1, [sp, #20]
 8003e30:	e7c4      	b.n	8003dbc <_svfiprintf_r+0x130>
 8003e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e36:	4604      	mov	r4, r0
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f0      	b.n	8003e1e <_svfiprintf_r+0x192>
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e44:	a904      	add	r1, sp, #16
 8003e46:	4638      	mov	r0, r7
 8003e48:	f3af 8000 	nop.w
 8003e4c:	1c42      	adds	r2, r0, #1
 8003e4e:	4606      	mov	r6, r0
 8003e50:	d1d6      	bne.n	8003e00 <_svfiprintf_r+0x174>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	065b      	lsls	r3, r3, #25
 8003e56:	f53f af2d 	bmi.w	8003cb4 <_svfiprintf_r+0x28>
 8003e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5c:	b01d      	add	sp, #116	; 0x74
 8003e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462a      	mov	r2, r5
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e6a:	a904      	add	r1, sp, #16
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f000 f9bd 	bl	80041ec <_printf_i>
 8003e72:	e7eb      	b.n	8003e4c <_svfiprintf_r+0x1c0>
 8003e74:	0800482c 	.word	0x0800482c
 8003e78:	08004836 	.word	0x08004836
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003bd9 	.word	0x08003bd9
 8003e84:	08004832 	.word	0x08004832

08003e88 <__sfputc_r>:
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	b410      	push	{r4}
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	da08      	bge.n	8003ea6 <__sfputc_r+0x1e>
 8003e94:	6994      	ldr	r4, [r2, #24]
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	db01      	blt.n	8003e9e <__sfputc_r+0x16>
 8003e9a:	290a      	cmp	r1, #10
 8003e9c:	d103      	bne.n	8003ea6 <__sfputc_r+0x1e>
 8003e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea2:	f7ff bc88 	b.w	80037b6 <__swbuf_r>
 8003ea6:	6813      	ldr	r3, [r2, #0]
 8003ea8:	1c58      	adds	r0, r3, #1
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	7019      	strb	r1, [r3, #0]
 8003eae:	4608      	mov	r0, r1
 8003eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <__sfputs_r>:
 8003eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb8:	4606      	mov	r6, r0
 8003eba:	460f      	mov	r7, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	18d5      	adds	r5, r2, r3
 8003ec0:	42ac      	cmp	r4, r5
 8003ec2:	d101      	bne.n	8003ec8 <__sfputs_r+0x12>
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	e007      	b.n	8003ed8 <__sfputs_r+0x22>
 8003ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ecc:	463a      	mov	r2, r7
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f7ff ffda 	bl	8003e88 <__sfputc_r>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d1f3      	bne.n	8003ec0 <__sfputs_r+0xa>
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003edc <_vfiprintf_r>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	460d      	mov	r5, r1
 8003ee2:	b09d      	sub	sp, #116	; 0x74
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	4698      	mov	r8, r3
 8003ee8:	4606      	mov	r6, r0
 8003eea:	b118      	cbz	r0, 8003ef4 <_vfiprintf_r+0x18>
 8003eec:	6a03      	ldr	r3, [r0, #32]
 8003eee:	b90b      	cbnz	r3, 8003ef4 <_vfiprintf_r+0x18>
 8003ef0:	f7ff faac 	bl	800344c <__sinit>
 8003ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef6:	07d9      	lsls	r1, r3, #31
 8003ef8:	d405      	bmi.n	8003f06 <_vfiprintf_r+0x2a>
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	059a      	lsls	r2, r3, #22
 8003efe:	d402      	bmi.n	8003f06 <_vfiprintf_r+0x2a>
 8003f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f02:	f7ff fd66 	bl	80039d2 <__retarget_lock_acquire_recursive>
 8003f06:	89ab      	ldrh	r3, [r5, #12]
 8003f08:	071b      	lsls	r3, r3, #28
 8003f0a:	d501      	bpl.n	8003f10 <_vfiprintf_r+0x34>
 8003f0c:	692b      	ldr	r3, [r5, #16]
 8003f0e:	b99b      	cbnz	r3, 8003f38 <_vfiprintf_r+0x5c>
 8003f10:	4629      	mov	r1, r5
 8003f12:	4630      	mov	r0, r6
 8003f14:	f7ff fc8c 	bl	8003830 <__swsetup_r>
 8003f18:	b170      	cbz	r0, 8003f38 <_vfiprintf_r+0x5c>
 8003f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f1c:	07dc      	lsls	r4, r3, #31
 8003f1e:	d504      	bpl.n	8003f2a <_vfiprintf_r+0x4e>
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	b01d      	add	sp, #116	; 0x74
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	89ab      	ldrh	r3, [r5, #12]
 8003f2c:	0598      	lsls	r0, r3, #22
 8003f2e:	d4f7      	bmi.n	8003f20 <_vfiprintf_r+0x44>
 8003f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f32:	f7ff fd4f 	bl	80039d4 <__retarget_lock_release_recursive>
 8003f36:	e7f3      	b.n	8003f20 <_vfiprintf_r+0x44>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f46:	2330      	movs	r3, #48	; 0x30
 8003f48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80040fc <_vfiprintf_r+0x220>
 8003f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f50:	f04f 0901 	mov.w	r9, #1
 8003f54:	4623      	mov	r3, r4
 8003f56:	469a      	mov	sl, r3
 8003f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5c:	b10a      	cbz	r2, 8003f62 <_vfiprintf_r+0x86>
 8003f5e:	2a25      	cmp	r2, #37	; 0x25
 8003f60:	d1f9      	bne.n	8003f56 <_vfiprintf_r+0x7a>
 8003f62:	ebba 0b04 	subs.w	fp, sl, r4
 8003f66:	d00b      	beq.n	8003f80 <_vfiprintf_r+0xa4>
 8003f68:	465b      	mov	r3, fp
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff ffa1 	bl	8003eb6 <__sfputs_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	f000 80a9 	beq.w	80040cc <_vfiprintf_r+0x1f0>
 8003f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7c:	445a      	add	r2, fp
 8003f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f80:	f89a 3000 	ldrb.w	r3, [sl]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a1 	beq.w	80040cc <_vfiprintf_r+0x1f0>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f94:	f10a 0a01 	add.w	sl, sl, #1
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	9307      	str	r3, [sp, #28]
 8003f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa2:	4654      	mov	r4, sl
 8003fa4:	2205      	movs	r2, #5
 8003fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003faa:	4854      	ldr	r0, [pc, #336]	; (80040fc <_vfiprintf_r+0x220>)
 8003fac:	f7fc f918 	bl	80001e0 <memchr>
 8003fb0:	9a04      	ldr	r2, [sp, #16]
 8003fb2:	b9d8      	cbnz	r0, 8003fec <_vfiprintf_r+0x110>
 8003fb4:	06d1      	lsls	r1, r2, #27
 8003fb6:	bf44      	itt	mi
 8003fb8:	2320      	movmi	r3, #32
 8003fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbe:	0713      	lsls	r3, r2, #28
 8003fc0:	bf44      	itt	mi
 8003fc2:	232b      	movmi	r3, #43	; 0x2b
 8003fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fce:	d015      	beq.n	8003ffc <_vfiprintf_r+0x120>
 8003fd0:	9a07      	ldr	r2, [sp, #28]
 8003fd2:	4654      	mov	r4, sl
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f04f 0c0a 	mov.w	ip, #10
 8003fda:	4621      	mov	r1, r4
 8003fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe0:	3b30      	subs	r3, #48	; 0x30
 8003fe2:	2b09      	cmp	r3, #9
 8003fe4:	d94d      	bls.n	8004082 <_vfiprintf_r+0x1a6>
 8003fe6:	b1b0      	cbz	r0, 8004016 <_vfiprintf_r+0x13a>
 8003fe8:	9207      	str	r2, [sp, #28]
 8003fea:	e014      	b.n	8004016 <_vfiprintf_r+0x13a>
 8003fec:	eba0 0308 	sub.w	r3, r0, r8
 8003ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	46a2      	mov	sl, r4
 8003ffa:	e7d2      	b.n	8003fa2 <_vfiprintf_r+0xc6>
 8003ffc:	9b03      	ldr	r3, [sp, #12]
 8003ffe:	1d19      	adds	r1, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	9103      	str	r1, [sp, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	bfbb      	ittet	lt
 8004008:	425b      	neglt	r3, r3
 800400a:	f042 0202 	orrlt.w	r2, r2, #2
 800400e:	9307      	strge	r3, [sp, #28]
 8004010:	9307      	strlt	r3, [sp, #28]
 8004012:	bfb8      	it	lt
 8004014:	9204      	strlt	r2, [sp, #16]
 8004016:	7823      	ldrb	r3, [r4, #0]
 8004018:	2b2e      	cmp	r3, #46	; 0x2e
 800401a:	d10c      	bne.n	8004036 <_vfiprintf_r+0x15a>
 800401c:	7863      	ldrb	r3, [r4, #1]
 800401e:	2b2a      	cmp	r3, #42	; 0x2a
 8004020:	d134      	bne.n	800408c <_vfiprintf_r+0x1b0>
 8004022:	9b03      	ldr	r3, [sp, #12]
 8004024:	1d1a      	adds	r2, r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	9203      	str	r2, [sp, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	bfb8      	it	lt
 800402e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004032:	3402      	adds	r4, #2
 8004034:	9305      	str	r3, [sp, #20]
 8004036:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800410c <_vfiprintf_r+0x230>
 800403a:	7821      	ldrb	r1, [r4, #0]
 800403c:	2203      	movs	r2, #3
 800403e:	4650      	mov	r0, sl
 8004040:	f7fc f8ce 	bl	80001e0 <memchr>
 8004044:	b138      	cbz	r0, 8004056 <_vfiprintf_r+0x17a>
 8004046:	9b04      	ldr	r3, [sp, #16]
 8004048:	eba0 000a 	sub.w	r0, r0, sl
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	4082      	lsls	r2, r0
 8004050:	4313      	orrs	r3, r2
 8004052:	3401      	adds	r4, #1
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405a:	4829      	ldr	r0, [pc, #164]	; (8004100 <_vfiprintf_r+0x224>)
 800405c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004060:	2206      	movs	r2, #6
 8004062:	f7fc f8bd 	bl	80001e0 <memchr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d03f      	beq.n	80040ea <_vfiprintf_r+0x20e>
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <_vfiprintf_r+0x228>)
 800406c:	bb1b      	cbnz	r3, 80040b6 <_vfiprintf_r+0x1da>
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	3308      	adds	r3, #8
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407c:	443b      	add	r3, r7
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	e768      	b.n	8003f54 <_vfiprintf_r+0x78>
 8004082:	fb0c 3202 	mla	r2, ip, r2, r3
 8004086:	460c      	mov	r4, r1
 8004088:	2001      	movs	r0, #1
 800408a:	e7a6      	b.n	8003fda <_vfiprintf_r+0xfe>
 800408c:	2300      	movs	r3, #0
 800408e:	3401      	adds	r4, #1
 8004090:	9305      	str	r3, [sp, #20]
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 0c0a 	mov.w	ip, #10
 8004098:	4620      	mov	r0, r4
 800409a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409e:	3a30      	subs	r2, #48	; 0x30
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d903      	bls.n	80040ac <_vfiprintf_r+0x1d0>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0c6      	beq.n	8004036 <_vfiprintf_r+0x15a>
 80040a8:	9105      	str	r1, [sp, #20]
 80040aa:	e7c4      	b.n	8004036 <_vfiprintf_r+0x15a>
 80040ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b0:	4604      	mov	r4, r0
 80040b2:	2301      	movs	r3, #1
 80040b4:	e7f0      	b.n	8004098 <_vfiprintf_r+0x1bc>
 80040b6:	ab03      	add	r3, sp, #12
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <_vfiprintf_r+0x22c>)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	4630      	mov	r0, r6
 80040c2:	f3af 8000 	nop.w
 80040c6:	4607      	mov	r7, r0
 80040c8:	1c78      	adds	r0, r7, #1
 80040ca:	d1d6      	bne.n	800407a <_vfiprintf_r+0x19e>
 80040cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ce:	07d9      	lsls	r1, r3, #31
 80040d0:	d405      	bmi.n	80040de <_vfiprintf_r+0x202>
 80040d2:	89ab      	ldrh	r3, [r5, #12]
 80040d4:	059a      	lsls	r2, r3, #22
 80040d6:	d402      	bmi.n	80040de <_vfiprintf_r+0x202>
 80040d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040da:	f7ff fc7b 	bl	80039d4 <__retarget_lock_release_recursive>
 80040de:	89ab      	ldrh	r3, [r5, #12]
 80040e0:	065b      	lsls	r3, r3, #25
 80040e2:	f53f af1d 	bmi.w	8003f20 <_vfiprintf_r+0x44>
 80040e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040e8:	e71c      	b.n	8003f24 <_vfiprintf_r+0x48>
 80040ea:	ab03      	add	r3, sp, #12
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	462a      	mov	r2, r5
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <_vfiprintf_r+0x22c>)
 80040f2:	a904      	add	r1, sp, #16
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f879 	bl	80041ec <_printf_i>
 80040fa:	e7e4      	b.n	80040c6 <_vfiprintf_r+0x1ea>
 80040fc:	0800482c 	.word	0x0800482c
 8004100:	08004836 	.word	0x08004836
 8004104:	00000000 	.word	0x00000000
 8004108:	08003eb7 	.word	0x08003eb7
 800410c:	08004832 	.word	0x08004832

08004110 <_printf_common>:
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	4616      	mov	r6, r2
 8004116:	4699      	mov	r9, r3
 8004118:	688a      	ldr	r2, [r1, #8]
 800411a:	690b      	ldr	r3, [r1, #16]
 800411c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004120:	4293      	cmp	r3, r2
 8004122:	bfb8      	it	lt
 8004124:	4613      	movlt	r3, r2
 8004126:	6033      	str	r3, [r6, #0]
 8004128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800412c:	4607      	mov	r7, r0
 800412e:	460c      	mov	r4, r1
 8004130:	b10a      	cbz	r2, 8004136 <_printf_common+0x26>
 8004132:	3301      	adds	r3, #1
 8004134:	6033      	str	r3, [r6, #0]
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	0699      	lsls	r1, r3, #26
 800413a:	bf42      	ittt	mi
 800413c:	6833      	ldrmi	r3, [r6, #0]
 800413e:	3302      	addmi	r3, #2
 8004140:	6033      	strmi	r3, [r6, #0]
 8004142:	6825      	ldr	r5, [r4, #0]
 8004144:	f015 0506 	ands.w	r5, r5, #6
 8004148:	d106      	bne.n	8004158 <_printf_common+0x48>
 800414a:	f104 0a19 	add.w	sl, r4, #25
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	6832      	ldr	r2, [r6, #0]
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	42ab      	cmp	r3, r5
 8004156:	dc26      	bgt.n	80041a6 <_printf_common+0x96>
 8004158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800415c:	1e13      	subs	r3, r2, #0
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	bf18      	it	ne
 8004162:	2301      	movne	r3, #1
 8004164:	0692      	lsls	r2, r2, #26
 8004166:	d42b      	bmi.n	80041c0 <_printf_common+0xb0>
 8004168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800416c:	4649      	mov	r1, r9
 800416e:	4638      	mov	r0, r7
 8004170:	47c0      	blx	r8
 8004172:	3001      	adds	r0, #1
 8004174:	d01e      	beq.n	80041b4 <_printf_common+0xa4>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	6922      	ldr	r2, [r4, #16]
 800417a:	f003 0306 	and.w	r3, r3, #6
 800417e:	2b04      	cmp	r3, #4
 8004180:	bf02      	ittt	eq
 8004182:	68e5      	ldreq	r5, [r4, #12]
 8004184:	6833      	ldreq	r3, [r6, #0]
 8004186:	1aed      	subeq	r5, r5, r3
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	bf0c      	ite	eq
 800418c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004190:	2500      	movne	r5, #0
 8004192:	4293      	cmp	r3, r2
 8004194:	bfc4      	itt	gt
 8004196:	1a9b      	subgt	r3, r3, r2
 8004198:	18ed      	addgt	r5, r5, r3
 800419a:	2600      	movs	r6, #0
 800419c:	341a      	adds	r4, #26
 800419e:	42b5      	cmp	r5, r6
 80041a0:	d11a      	bne.n	80041d8 <_printf_common+0xc8>
 80041a2:	2000      	movs	r0, #0
 80041a4:	e008      	b.n	80041b8 <_printf_common+0xa8>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4652      	mov	r2, sl
 80041aa:	4649      	mov	r1, r9
 80041ac:	4638      	mov	r0, r7
 80041ae:	47c0      	blx	r8
 80041b0:	3001      	adds	r0, #1
 80041b2:	d103      	bne.n	80041bc <_printf_common+0xac>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	3501      	adds	r5, #1
 80041be:	e7c6      	b.n	800414e <_printf_common+0x3e>
 80041c0:	18e1      	adds	r1, r4, r3
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	2030      	movs	r0, #48	; 0x30
 80041c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ca:	4422      	add	r2, r4
 80041cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041d4:	3302      	adds	r3, #2
 80041d6:	e7c7      	b.n	8004168 <_printf_common+0x58>
 80041d8:	2301      	movs	r3, #1
 80041da:	4622      	mov	r2, r4
 80041dc:	4649      	mov	r1, r9
 80041de:	4638      	mov	r0, r7
 80041e0:	47c0      	blx	r8
 80041e2:	3001      	adds	r0, #1
 80041e4:	d0e6      	beq.n	80041b4 <_printf_common+0xa4>
 80041e6:	3601      	adds	r6, #1
 80041e8:	e7d9      	b.n	800419e <_printf_common+0x8e>
	...

080041ec <_printf_i>:
 80041ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	7e0f      	ldrb	r7, [r1, #24]
 80041f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f4:	2f78      	cmp	r7, #120	; 0x78
 80041f6:	4691      	mov	r9, r2
 80041f8:	4680      	mov	r8, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	469a      	mov	sl, r3
 80041fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004202:	d807      	bhi.n	8004214 <_printf_i+0x28>
 8004204:	2f62      	cmp	r7, #98	; 0x62
 8004206:	d80a      	bhi.n	800421e <_printf_i+0x32>
 8004208:	2f00      	cmp	r7, #0
 800420a:	f000 80d4 	beq.w	80043b6 <_printf_i+0x1ca>
 800420e:	2f58      	cmp	r7, #88	; 0x58
 8004210:	f000 80c0 	beq.w	8004394 <_printf_i+0x1a8>
 8004214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800421c:	e03a      	b.n	8004294 <_printf_i+0xa8>
 800421e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004222:	2b15      	cmp	r3, #21
 8004224:	d8f6      	bhi.n	8004214 <_printf_i+0x28>
 8004226:	a101      	add	r1, pc, #4	; (adr r1, 800422c <_printf_i+0x40>)
 8004228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800422c:	08004285 	.word	0x08004285
 8004230:	08004299 	.word	0x08004299
 8004234:	08004215 	.word	0x08004215
 8004238:	08004215 	.word	0x08004215
 800423c:	08004215 	.word	0x08004215
 8004240:	08004215 	.word	0x08004215
 8004244:	08004299 	.word	0x08004299
 8004248:	08004215 	.word	0x08004215
 800424c:	08004215 	.word	0x08004215
 8004250:	08004215 	.word	0x08004215
 8004254:	08004215 	.word	0x08004215
 8004258:	0800439d 	.word	0x0800439d
 800425c:	080042c5 	.word	0x080042c5
 8004260:	08004357 	.word	0x08004357
 8004264:	08004215 	.word	0x08004215
 8004268:	08004215 	.word	0x08004215
 800426c:	080043bf 	.word	0x080043bf
 8004270:	08004215 	.word	0x08004215
 8004274:	080042c5 	.word	0x080042c5
 8004278:	08004215 	.word	0x08004215
 800427c:	08004215 	.word	0x08004215
 8004280:	0800435f 	.word	0x0800435f
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004294:	2301      	movs	r3, #1
 8004296:	e09f      	b.n	80043d8 <_printf_i+0x1ec>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	0607      	lsls	r7, r0, #24
 800429e:	f103 0104 	add.w	r1, r3, #4
 80042a2:	6029      	str	r1, [r5, #0]
 80042a4:	d501      	bpl.n	80042aa <_printf_i+0xbe>
 80042a6:	681e      	ldr	r6, [r3, #0]
 80042a8:	e003      	b.n	80042b2 <_printf_i+0xc6>
 80042aa:	0646      	lsls	r6, r0, #25
 80042ac:	d5fb      	bpl.n	80042a6 <_printf_i+0xba>
 80042ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042b2:	2e00      	cmp	r6, #0
 80042b4:	da03      	bge.n	80042be <_printf_i+0xd2>
 80042b6:	232d      	movs	r3, #45	; 0x2d
 80042b8:	4276      	negs	r6, r6
 80042ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042be:	485a      	ldr	r0, [pc, #360]	; (8004428 <_printf_i+0x23c>)
 80042c0:	230a      	movs	r3, #10
 80042c2:	e012      	b.n	80042ea <_printf_i+0xfe>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	1d19      	adds	r1, r3, #4
 80042ca:	6029      	str	r1, [r5, #0]
 80042cc:	0605      	lsls	r5, r0, #24
 80042ce:	d501      	bpl.n	80042d4 <_printf_i+0xe8>
 80042d0:	681e      	ldr	r6, [r3, #0]
 80042d2:	e002      	b.n	80042da <_printf_i+0xee>
 80042d4:	0641      	lsls	r1, r0, #25
 80042d6:	d5fb      	bpl.n	80042d0 <_printf_i+0xe4>
 80042d8:	881e      	ldrh	r6, [r3, #0]
 80042da:	4853      	ldr	r0, [pc, #332]	; (8004428 <_printf_i+0x23c>)
 80042dc:	2f6f      	cmp	r7, #111	; 0x6f
 80042de:	bf0c      	ite	eq
 80042e0:	2308      	moveq	r3, #8
 80042e2:	230a      	movne	r3, #10
 80042e4:	2100      	movs	r1, #0
 80042e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ea:	6865      	ldr	r5, [r4, #4]
 80042ec:	60a5      	str	r5, [r4, #8]
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	bfa2      	ittt	ge
 80042f2:	6821      	ldrge	r1, [r4, #0]
 80042f4:	f021 0104 	bicge.w	r1, r1, #4
 80042f8:	6021      	strge	r1, [r4, #0]
 80042fa:	b90e      	cbnz	r6, 8004300 <_printf_i+0x114>
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	d04b      	beq.n	8004398 <_printf_i+0x1ac>
 8004300:	4615      	mov	r5, r2
 8004302:	fbb6 f1f3 	udiv	r1, r6, r3
 8004306:	fb03 6711 	mls	r7, r3, r1, r6
 800430a:	5dc7      	ldrb	r7, [r0, r7]
 800430c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004310:	4637      	mov	r7, r6
 8004312:	42bb      	cmp	r3, r7
 8004314:	460e      	mov	r6, r1
 8004316:	d9f4      	bls.n	8004302 <_printf_i+0x116>
 8004318:	2b08      	cmp	r3, #8
 800431a:	d10b      	bne.n	8004334 <_printf_i+0x148>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	07de      	lsls	r6, r3, #31
 8004320:	d508      	bpl.n	8004334 <_printf_i+0x148>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	6861      	ldr	r1, [r4, #4]
 8004326:	4299      	cmp	r1, r3
 8004328:	bfde      	ittt	le
 800432a:	2330      	movle	r3, #48	; 0x30
 800432c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004330:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004334:	1b52      	subs	r2, r2, r5
 8004336:	6122      	str	r2, [r4, #16]
 8004338:	f8cd a000 	str.w	sl, [sp]
 800433c:	464b      	mov	r3, r9
 800433e:	aa03      	add	r2, sp, #12
 8004340:	4621      	mov	r1, r4
 8004342:	4640      	mov	r0, r8
 8004344:	f7ff fee4 	bl	8004110 <_printf_common>
 8004348:	3001      	adds	r0, #1
 800434a:	d14a      	bne.n	80043e2 <_printf_i+0x1f6>
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	b004      	add	sp, #16
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f043 0320 	orr.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	4833      	ldr	r0, [pc, #204]	; (800442c <_printf_i+0x240>)
 8004360:	2778      	movs	r7, #120	; 0x78
 8004362:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	6829      	ldr	r1, [r5, #0]
 800436a:	061f      	lsls	r7, r3, #24
 800436c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004370:	d402      	bmi.n	8004378 <_printf_i+0x18c>
 8004372:	065f      	lsls	r7, r3, #25
 8004374:	bf48      	it	mi
 8004376:	b2b6      	uxthmi	r6, r6
 8004378:	07df      	lsls	r7, r3, #31
 800437a:	bf48      	it	mi
 800437c:	f043 0320 	orrmi.w	r3, r3, #32
 8004380:	6029      	str	r1, [r5, #0]
 8004382:	bf48      	it	mi
 8004384:	6023      	strmi	r3, [r4, #0]
 8004386:	b91e      	cbnz	r6, 8004390 <_printf_i+0x1a4>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	f023 0320 	bic.w	r3, r3, #32
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	2310      	movs	r3, #16
 8004392:	e7a7      	b.n	80042e4 <_printf_i+0xf8>
 8004394:	4824      	ldr	r0, [pc, #144]	; (8004428 <_printf_i+0x23c>)
 8004396:	e7e4      	b.n	8004362 <_printf_i+0x176>
 8004398:	4615      	mov	r5, r2
 800439a:	e7bd      	b.n	8004318 <_printf_i+0x12c>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6826      	ldr	r6, [r4, #0]
 80043a0:	6961      	ldr	r1, [r4, #20]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6028      	str	r0, [r5, #0]
 80043a6:	0635      	lsls	r5, r6, #24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0x1c4>
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0x1ca>
 80043b0:	0670      	lsls	r0, r6, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0x1c0>
 80043b4:	8019      	strh	r1, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	4615      	mov	r5, r2
 80043bc:	e7bc      	b.n	8004338 <_printf_i+0x14c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4628      	mov	r0, r5
 80043cc:	f7fb ff08 	bl	80001e0 <memchr>
 80043d0:	b108      	cbz	r0, 80043d6 <_printf_i+0x1ea>
 80043d2:	1b40      	subs	r0, r0, r5
 80043d4:	6060      	str	r0, [r4, #4]
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e0:	e7aa      	b.n	8004338 <_printf_i+0x14c>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	462a      	mov	r2, r5
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d0ad      	beq.n	800434c <_printf_i+0x160>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	079b      	lsls	r3, r3, #30
 80043f4:	d413      	bmi.n	800441e <_printf_i+0x232>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e7a6      	b.n	8004350 <_printf_i+0x164>
 8004402:	2301      	movs	r3, #1
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d09d      	beq.n	800434c <_printf_i+0x160>
 8004410:	3501      	adds	r5, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	42ab      	cmp	r3, r5
 800441a:	dcf2      	bgt.n	8004402 <_printf_i+0x216>
 800441c:	e7eb      	b.n	80043f6 <_printf_i+0x20a>
 800441e:	2500      	movs	r5, #0
 8004420:	f104 0619 	add.w	r6, r4, #25
 8004424:	e7f5      	b.n	8004412 <_printf_i+0x226>
 8004426:	bf00      	nop
 8004428:	0800483d 	.word	0x0800483d
 800442c:	0800484e 	.word	0x0800484e

08004430 <__sflush_r>:
 8004430:	898a      	ldrh	r2, [r1, #12]
 8004432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	4605      	mov	r5, r0
 8004438:	0710      	lsls	r0, r2, #28
 800443a:	460c      	mov	r4, r1
 800443c:	d458      	bmi.n	80044f0 <__sflush_r+0xc0>
 800443e:	684b      	ldr	r3, [r1, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	dc05      	bgt.n	8004450 <__sflush_r+0x20>
 8004444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	dc02      	bgt.n	8004450 <__sflush_r+0x20>
 800444a:	2000      	movs	r0, #0
 800444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004452:	2e00      	cmp	r6, #0
 8004454:	d0f9      	beq.n	800444a <__sflush_r+0x1a>
 8004456:	2300      	movs	r3, #0
 8004458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800445c:	682f      	ldr	r7, [r5, #0]
 800445e:	6a21      	ldr	r1, [r4, #32]
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	d032      	beq.n	80044ca <__sflush_r+0x9a>
 8004464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	075a      	lsls	r2, r3, #29
 800446a:	d505      	bpl.n	8004478 <__sflush_r+0x48>
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	1ac0      	subs	r0, r0, r3
 8004470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004472:	b10b      	cbz	r3, 8004478 <__sflush_r+0x48>
 8004474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004476:	1ac0      	subs	r0, r0, r3
 8004478:	2300      	movs	r3, #0
 800447a:	4602      	mov	r2, r0
 800447c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800447e:	6a21      	ldr	r1, [r4, #32]
 8004480:	4628      	mov	r0, r5
 8004482:	47b0      	blx	r6
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	d106      	bne.n	8004498 <__sflush_r+0x68>
 800448a:	6829      	ldr	r1, [r5, #0]
 800448c:	291d      	cmp	r1, #29
 800448e:	d82b      	bhi.n	80044e8 <__sflush_r+0xb8>
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <__sflush_r+0x108>)
 8004492:	410a      	asrs	r2, r1
 8004494:	07d6      	lsls	r6, r2, #31
 8004496:	d427      	bmi.n	80044e8 <__sflush_r+0xb8>
 8004498:	2200      	movs	r2, #0
 800449a:	6062      	str	r2, [r4, #4]
 800449c:	04d9      	lsls	r1, r3, #19
 800449e:	6922      	ldr	r2, [r4, #16]
 80044a0:	6022      	str	r2, [r4, #0]
 80044a2:	d504      	bpl.n	80044ae <__sflush_r+0x7e>
 80044a4:	1c42      	adds	r2, r0, #1
 80044a6:	d101      	bne.n	80044ac <__sflush_r+0x7c>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	b903      	cbnz	r3, 80044ae <__sflush_r+0x7e>
 80044ac:	6560      	str	r0, [r4, #84]	; 0x54
 80044ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044b0:	602f      	str	r7, [r5, #0]
 80044b2:	2900      	cmp	r1, #0
 80044b4:	d0c9      	beq.n	800444a <__sflush_r+0x1a>
 80044b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ba:	4299      	cmp	r1, r3
 80044bc:	d002      	beq.n	80044c4 <__sflush_r+0x94>
 80044be:	4628      	mov	r0, r5
 80044c0:	f7ff fa8a 	bl	80039d8 <_free_r>
 80044c4:	2000      	movs	r0, #0
 80044c6:	6360      	str	r0, [r4, #52]	; 0x34
 80044c8:	e7c0      	b.n	800444c <__sflush_r+0x1c>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b0      	blx	r6
 80044d0:	1c41      	adds	r1, r0, #1
 80044d2:	d1c8      	bne.n	8004466 <__sflush_r+0x36>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0c5      	beq.n	8004466 <__sflush_r+0x36>
 80044da:	2b1d      	cmp	r3, #29
 80044dc:	d001      	beq.n	80044e2 <__sflush_r+0xb2>
 80044de:	2b16      	cmp	r3, #22
 80044e0:	d101      	bne.n	80044e6 <__sflush_r+0xb6>
 80044e2:	602f      	str	r7, [r5, #0]
 80044e4:	e7b1      	b.n	800444a <__sflush_r+0x1a>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	e7ad      	b.n	800444c <__sflush_r+0x1c>
 80044f0:	690f      	ldr	r7, [r1, #16]
 80044f2:	2f00      	cmp	r7, #0
 80044f4:	d0a9      	beq.n	800444a <__sflush_r+0x1a>
 80044f6:	0793      	lsls	r3, r2, #30
 80044f8:	680e      	ldr	r6, [r1, #0]
 80044fa:	bf08      	it	eq
 80044fc:	694b      	ldreq	r3, [r1, #20]
 80044fe:	600f      	str	r7, [r1, #0]
 8004500:	bf18      	it	ne
 8004502:	2300      	movne	r3, #0
 8004504:	eba6 0807 	sub.w	r8, r6, r7
 8004508:	608b      	str	r3, [r1, #8]
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	dd9c      	ble.n	800444a <__sflush_r+0x1a>
 8004510:	6a21      	ldr	r1, [r4, #32]
 8004512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004514:	4643      	mov	r3, r8
 8004516:	463a      	mov	r2, r7
 8004518:	4628      	mov	r0, r5
 800451a:	47b0      	blx	r6
 800451c:	2800      	cmp	r0, #0
 800451e:	dc06      	bgt.n	800452e <__sflush_r+0xfe>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295
 800452c:	e78e      	b.n	800444c <__sflush_r+0x1c>
 800452e:	4407      	add	r7, r0
 8004530:	eba8 0800 	sub.w	r8, r8, r0
 8004534:	e7e9      	b.n	800450a <__sflush_r+0xda>
 8004536:	bf00      	nop
 8004538:	dfbffffe 	.word	0xdfbffffe

0800453c <_fflush_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	4605      	mov	r5, r0
 8004542:	460c      	mov	r4, r1
 8004544:	b913      	cbnz	r3, 800454c <_fflush_r+0x10>
 8004546:	2500      	movs	r5, #0
 8004548:	4628      	mov	r0, r5
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	b118      	cbz	r0, 8004556 <_fflush_r+0x1a>
 800454e:	6a03      	ldr	r3, [r0, #32]
 8004550:	b90b      	cbnz	r3, 8004556 <_fflush_r+0x1a>
 8004552:	f7fe ff7b 	bl	800344c <__sinit>
 8004556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f3      	beq.n	8004546 <_fflush_r+0xa>
 800455e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004560:	07d0      	lsls	r0, r2, #31
 8004562:	d404      	bmi.n	800456e <_fflush_r+0x32>
 8004564:	0599      	lsls	r1, r3, #22
 8004566:	d402      	bmi.n	800456e <_fflush_r+0x32>
 8004568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800456a:	f7ff fa32 	bl	80039d2 <__retarget_lock_acquire_recursive>
 800456e:	4628      	mov	r0, r5
 8004570:	4621      	mov	r1, r4
 8004572:	f7ff ff5d 	bl	8004430 <__sflush_r>
 8004576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004578:	07da      	lsls	r2, r3, #31
 800457a:	4605      	mov	r5, r0
 800457c:	d4e4      	bmi.n	8004548 <_fflush_r+0xc>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	059b      	lsls	r3, r3, #22
 8004582:	d4e1      	bmi.n	8004548 <_fflush_r+0xc>
 8004584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004586:	f7ff fa25 	bl	80039d4 <__retarget_lock_release_recursive>
 800458a:	e7dd      	b.n	8004548 <_fflush_r+0xc>

0800458c <__swhatbuf_r>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460c      	mov	r4, r1
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	2900      	cmp	r1, #0
 8004596:	b096      	sub	sp, #88	; 0x58
 8004598:	4615      	mov	r5, r2
 800459a:	461e      	mov	r6, r3
 800459c:	da0d      	bge.n	80045ba <__swhatbuf_r+0x2e>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	bf0c      	ite	eq
 80045aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045ae:	2340      	movne	r3, #64	; 0x40
 80045b0:	2000      	movs	r0, #0
 80045b2:	6031      	str	r1, [r6, #0]
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	b016      	add	sp, #88	; 0x58
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	466a      	mov	r2, sp
 80045bc:	f000 f862 	bl	8004684 <_fstat_r>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	dbec      	blt.n	800459e <__swhatbuf_r+0x12>
 80045c4:	9901      	ldr	r1, [sp, #4]
 80045c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045ce:	4259      	negs	r1, r3
 80045d0:	4159      	adcs	r1, r3
 80045d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d6:	e7eb      	b.n	80045b0 <__swhatbuf_r+0x24>

080045d8 <__smakebuf_r>:
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045dc:	079d      	lsls	r5, r3, #30
 80045de:	4606      	mov	r6, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d507      	bpl.n	80045f4 <__smakebuf_r+0x1c>
 80045e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2301      	movs	r3, #1
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	b002      	add	sp, #8
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	466a      	mov	r2, sp
 80045f8:	f7ff ffc8 	bl	800458c <__swhatbuf_r>
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff fa5d 	bl	8003ac0 <_malloc_r>
 8004606:	b948      	cbnz	r0, 800461c <__smakebuf_r+0x44>
 8004608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460c:	059a      	lsls	r2, r3, #22
 800460e:	d4ef      	bmi.n	80045f0 <__smakebuf_r+0x18>
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7e3      	b.n	80045e4 <__smakebuf_r+0xc>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	6020      	str	r0, [r4, #0]
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	9b00      	ldr	r3, [sp, #0]
 8004628:	6163      	str	r3, [r4, #20]
 800462a:	9b01      	ldr	r3, [sp, #4]
 800462c:	6120      	str	r0, [r4, #16]
 800462e:	b15b      	cbz	r3, 8004648 <__smakebuf_r+0x70>
 8004630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f837 	bl	80046a8 <_isatty_r>
 800463a:	b128      	cbz	r0, 8004648 <__smakebuf_r+0x70>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	431d      	orrs	r5, r3
 800464c:	81a5      	strh	r5, [r4, #12]
 800464e:	e7cf      	b.n	80045f0 <__smakebuf_r+0x18>

08004650 <memmove>:
 8004650:	4288      	cmp	r0, r1
 8004652:	b510      	push	{r4, lr}
 8004654:	eb01 0402 	add.w	r4, r1, r2
 8004658:	d902      	bls.n	8004660 <memmove+0x10>
 800465a:	4284      	cmp	r4, r0
 800465c:	4623      	mov	r3, r4
 800465e:	d807      	bhi.n	8004670 <memmove+0x20>
 8004660:	1e43      	subs	r3, r0, #1
 8004662:	42a1      	cmp	r1, r4
 8004664:	d008      	beq.n	8004678 <memmove+0x28>
 8004666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800466a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800466e:	e7f8      	b.n	8004662 <memmove+0x12>
 8004670:	4402      	add	r2, r0
 8004672:	4601      	mov	r1, r0
 8004674:	428a      	cmp	r2, r1
 8004676:	d100      	bne.n	800467a <memmove+0x2a>
 8004678:	bd10      	pop	{r4, pc}
 800467a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800467e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004682:	e7f7      	b.n	8004674 <memmove+0x24>

08004684 <_fstat_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	; (80046a4 <_fstat_r+0x20>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	f7fc fb7c 	bl	8000d8e <_fstat>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d102      	bne.n	80046a0 <_fstat_r+0x1c>
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	b103      	cbz	r3, 80046a0 <_fstat_r+0x1c>
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
 80046a2:	bf00      	nop
 80046a4:	200001c8 	.word	0x200001c8

080046a8 <_isatty_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d06      	ldr	r5, [pc, #24]	; (80046c4 <_isatty_r+0x1c>)
 80046ac:	2300      	movs	r3, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	f7fc fb7b 	bl	8000dae <_isatty>
 80046b8:	1c43      	adds	r3, r0, #1
 80046ba:	d102      	bne.n	80046c2 <_isatty_r+0x1a>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	b103      	cbz	r3, 80046c2 <_isatty_r+0x1a>
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	bd38      	pop	{r3, r4, r5, pc}
 80046c4:	200001c8 	.word	0x200001c8

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d06      	ldr	r5, [pc, #24]	; (80046e4 <_sbrk_r+0x1c>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fb84 	bl	8000de0 <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200001c8 	.word	0x200001c8

080046e8 <memcpy>:
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	4770      	bx	lr
 80046f4:	b510      	push	{r4, lr}
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fe:	4291      	cmp	r1, r2
 8004700:	d1f9      	bne.n	80046f6 <memcpy+0xe>
 8004702:	bd10      	pop	{r4, pc}

08004704 <_realloc_r>:
 8004704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	4680      	mov	r8, r0
 800470a:	4614      	mov	r4, r2
 800470c:	460e      	mov	r6, r1
 800470e:	b921      	cbnz	r1, 800471a <_realloc_r+0x16>
 8004710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004714:	4611      	mov	r1, r2
 8004716:	f7ff b9d3 	b.w	8003ac0 <_malloc_r>
 800471a:	b92a      	cbnz	r2, 8004728 <_realloc_r+0x24>
 800471c:	f7ff f95c 	bl	80039d8 <_free_r>
 8004720:	4625      	mov	r5, r4
 8004722:	4628      	mov	r0, r5
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	f000 f81b 	bl	8004762 <_malloc_usable_size_r>
 800472c:	4284      	cmp	r4, r0
 800472e:	4607      	mov	r7, r0
 8004730:	d802      	bhi.n	8004738 <_realloc_r+0x34>
 8004732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004736:	d812      	bhi.n	800475e <_realloc_r+0x5a>
 8004738:	4621      	mov	r1, r4
 800473a:	4640      	mov	r0, r8
 800473c:	f7ff f9c0 	bl	8003ac0 <_malloc_r>
 8004740:	4605      	mov	r5, r0
 8004742:	2800      	cmp	r0, #0
 8004744:	d0ed      	beq.n	8004722 <_realloc_r+0x1e>
 8004746:	42bc      	cmp	r4, r7
 8004748:	4622      	mov	r2, r4
 800474a:	4631      	mov	r1, r6
 800474c:	bf28      	it	cs
 800474e:	463a      	movcs	r2, r7
 8004750:	f7ff ffca 	bl	80046e8 <memcpy>
 8004754:	4631      	mov	r1, r6
 8004756:	4640      	mov	r0, r8
 8004758:	f7ff f93e 	bl	80039d8 <_free_r>
 800475c:	e7e1      	b.n	8004722 <_realloc_r+0x1e>
 800475e:	4635      	mov	r5, r6
 8004760:	e7df      	b.n	8004722 <_realloc_r+0x1e>

08004762 <_malloc_usable_size_r>:
 8004762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004766:	1f18      	subs	r0, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	bfbc      	itt	lt
 800476c:	580b      	ldrlt	r3, [r1, r0]
 800476e:	18c0      	addlt	r0, r0, r3
 8004770:	4770      	bx	lr
	...

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
